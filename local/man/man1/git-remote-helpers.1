'\" t
.\"     Title: git-remote-helpers
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 03/26/2012
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-REMOTE\-HELPERS" "1" "03/26/2012" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-remote-helpers \- Helper programs to interact with remote repositories
.SH "SYNOPSIS"
.sp
.nf
\fIgit remote\-<transport>\fR <repository> [<URL>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Remote helper programs are normally not used directly by end users, but they are invoked by git when it needs to interact with remote repositories git does not support natively\&. A given helper will implement a subset of the capabilities documented here\&. When git needs to interact with a repository using a remote helper, it spawns the helper as an independent process, sends commands to the helper\(cqs standard input, and expects results from the helper\(cqs standard output\&. Because a remote helper runs as an independent process from git, there is no need to re\-link git to add a new helper, nor any need to link the helper with the implementation of git\&.
.sp
Every helper must support the "capabilities" command, which git uses to determine what other commands the helper will accept\&. Those other commands can be used to discover and update remote refs, transport objects between the object database and the remote repository, and update the local object store\&.
.sp
Git comes with a "curl" family of remote helpers, that handle various transport protocols, such as \fIgit\-remote\-http\fR, \fIgit\-remote\-https\fR, \fIgit\-remote\-ftp\fR and \fIgit\-remote\-ftps\fR\&. They implement the capabilities \fIfetch\fR, \fIoption\fR, and \fIpush\fR\&.
.SH "INPUT FORMAT"
.sp
Git sends the remote helper a list of commands on standard input, one per line\&. The first command is always the \fIcapabilities\fR command, in response to which the remote helper must print a list of the capabilities it supports (see below) followed by a blank line\&. The response to the capabilities command determines what commands Git uses in the remainder of the command stream\&.
.sp
The command stream is terminated by a blank line\&. In some cases (indicated in the documentation of the relevant commands), this blank line is followed by a payload in some other protocol (e\&.g\&., the pack protocol), while in others it indicates the end of input\&.
.SS "Capabilities"
.sp
Each remote helper is expected to support only a subset of commands\&. The operations a helper supports are declared to git in the response to the capabilities command (see COMMANDS, below)\&.
.PP
\fIoption\fR
.RS 4
For specifying settings like
verbosity
(how much output to write to stderr) and
depth
(how much history is wanted in the case of a shallow clone) that affect how other commands are carried out\&.
.RE
.PP
\fIconnect\fR
.RS 4
For fetching and pushing using git\(cqs native packfile protocol that requires a bidirectional, full\-duplex connection\&.
.RE
.PP
\fIpush\fR
.RS 4
For listing remote refs and pushing specified objects from the local object store to remote refs\&.
.RE
.PP
\fIfetch\fR
.RS 4
For listing remote refs and fetching the associated history to the local object store\&.
.RE
.PP
\fIimport\fR
.RS 4
For listing remote refs and fetching the associated history as a fast\-import stream\&.
.RE
.PP
\fIrefspec\fR <refspec>
.RS 4
This modifies the
\fIimport\fR
capability, allowing the produced fast\-import stream to modify refs in a private namespace instead of writing to refs/heads or refs/remotes directly\&. It is recommended that all importers providing the
\fIimport\fR
capability use this\&.
.sp
A helper advertising the capability
refspec refs/heads/*:refs/svn/origin/branches/*
is saying that, when it is asked to
import refs/heads/topic, the stream it outputs will update the
refs/svn/origin/branches/topic
ref\&.
.sp
This capability can be advertised multiple times\&. The first applicable refspec takes precedence\&. The left\-hand of refspecs advertised with this capability must cover all refs reported by the list command\&. If no
\fIrefspec\fR
capability is advertised, there is an implied
refspec *:*\&.
.RE
.SS "Capabilities for Pushing"
.PP
\fIconnect\fR
.RS 4
Can attempt to connect to
\fIgit receive\-pack\fR
(for pushing),
\fIgit upload\-pack\fR, etc for communication using the packfile protocol\&.
.sp
Supported commands:
\fIconnect\fR\&.
.RE
.PP
\fIpush\fR
.RS 4
Can discover remote refs and push local commits and the history leading up to them to new or existing remote refs\&.
.sp
Supported commands:
\fIlist for\-push\fR,
\fIpush\fR\&.
.RE
.sp
If a helper advertises both \fIconnect\fR and \fIpush\fR, git will use \fIconnect\fR if possible and fall back to \fIpush\fR if the helper requests so when connecting (see the \fIconnect\fR command under COMMANDS)\&.
.SS "Capabilities for Fetching"
.PP
\fIconnect\fR
.RS 4
Can try to connect to
\fIgit upload\-pack\fR
(for fetching),
\fIgit receive\-pack\fR, etc for communication using the packfile protocol\&.
.sp
Supported commands:
\fIconnect\fR\&.
.RE
.PP
\fIfetch\fR
.RS 4
Can discover remote refs and transfer objects reachable from them to the local object store\&.
.sp
Supported commands:
\fIlist\fR,
\fIfetch\fR\&.
.RE
.PP
\fIimport\fR
.RS 4
Can discover remote refs and output objects reachable from them as a stream in fast\-import format\&.
.sp
Supported commands:
\fIlist\fR,
\fIimport\fR\&.
.RE
.sp
If a helper advertises \fIconnect\fR, git will use it if possible and fall back to another capability if the helper requests so when connecting (see the \fIconnect\fR command under COMMANDS)\&. When choosing between \fIfetch\fR and \fIimport\fR, git prefers \fIfetch\fR\&. Other frontends may have some other order of preference\&.
.PP
\fIrefspec\fR <refspec>
.RS 4
This modifies the
\fIimport\fR
capability\&.
.sp
A helper advertising
refspec refs/heads/*:refs/svn/origin/branches/*
in its capabilities is saying that, when it handles
import refs/heads/topic, the stream it outputs will update the
refs/svn/origin/branches/topic
ref\&.
.sp
This capability can be advertised multiple times\&. The first applicable refspec takes precedence\&. The left\-hand of refspecs advertised with this capability must cover all refs reported by the list command\&. If no
\fIrefspec\fR
capability is advertised, there is an implied
refspec *:*\&.
.RE
.SH "INVOCATION"
.sp
Remote helper programs are invoked with one or (optionally) two arguments\&. The first argument specifies a remote repository as in git; it is either the name of a configured remote or a URL\&. The second argument specifies a URL; it is usually of the form \fI<transport>://<address>\fR, but any arbitrary string is possible\&. The \fIGIT_DIR\fR environment variable is set up for the remote helper and can be used to determine where to store additional data or from which directory to invoke auxiliary git commands\&.
.sp
When git encounters a URL of the form \fI<transport>://<address>\fR, where \fI<transport>\fR is a protocol that it cannot handle natively, it automatically invokes \fIgit remote\-<transport>\fR with the full URL as the second argument\&. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote\&.
.sp
A URL of the form \fI<transport>::<address>\fR explicitly instructs git to invoke \fIgit remote\-<transport>\fR with \fI<address>\fR as the second argument\&. If such a URL is encountered directly on the command line, the first argument is \fI<address>\fR, and if it is encountered in a configured remote, the first argument is the name of that remote\&.
.sp
Additionally, when a configured remote has \fIremote\&.<name>\&.vcs\fR set to \fI<transport>\fR, git explicitly invokes \fIgit remote\-<transport>\fR with \fI<name>\fR as the first argument\&. If set, the second argument is \fIremote\&.<name>\&.url\fR; otherwise, the second argument is omitted\&.
.SH "COMMANDS"
.sp
Commands are given by the caller on the helper\(cqs standard input, one per line\&.
.PP
\fIcapabilities\fR
.RS 4
Lists the capabilities of the helper, one per line, ending with a blank line\&. Each capability may be preceded with
\fI*\fR, which marks them mandatory for git version using the remote helper to understand (unknown mandatory capability is fatal error)\&.
.RE
.PP
\fIlist\fR
.RS 4
Lists the refs, one per line, in the format "<value> <name> [<attr> \&...]"\&. The value may be a hex sha1 hash, "@<dest>" for a symref, or "?" to indicate that the helper could not get the value of the ref\&. A space\-separated list of attributes follows the name; unrecognized attributes are ignored\&. The list ends with a blank line\&.
.sp
If
\fIpush\fR
is supported this may be called as
\fIlist for\-push\fR
to obtain the current refs prior to sending one or more
\fIpush\fR
commands to the helper\&.
.RE
.PP
\fIoption\fR <name> <value>
.RS 4
Sets the transport helper option <name> to <value>\&. Outputs a single line containing one of
\fIok\fR
(option successfully set),
\fIunsupported\fR
(option not recognized) or
\fIerror <msg>\fR
(option <name> is supported but <value> is not valid for it)\&. Options should be set before other commands, and may influence the behavior of those commands\&.
.sp
Supported if the helper has the "option" capability\&.
.RE
.PP
\fIfetch\fR <sha1> <name>
.RS 4
Fetches the given object, writing the necessary objects to the database\&. Fetch commands are sent in a batch, one per line, terminated with a blank line\&. Outputs a single blank line when all fetch commands in the same batch are complete\&. Only objects which were reported in the ref list with a sha1 may be fetched this way\&.
.sp
Optionally may output a
\fIlock <file>\fR
line indicating a file under GIT_DIR/objects/pack which is keeping a pack until refs can be suitably updated\&.
.sp
Supported if the helper has the "fetch" capability\&.
.RE
.PP
\fIpush\fR +<src>:<dst>
.RS 4
Pushes the given local <src> commit or branch to the remote branch described by <dst>\&. A batch sequence of one or more
\fIpush\fR
commands is terminated with a blank line (if there is only one reference to push, a single
\fIpush\fR
command is followed by a blank line)\&. For example, the following would be two batches of
\fIpush\fR, the first asking the remote\-helper to push the local ref
\fImaster\fR
to the remote ref
\fImaster\fR
and the local
\fIHEAD\fR
to the remote
\fIbranch\fR, and the second asking to push ref
\fIfoo\fR
to ref
\fIbar\fR
(forced update requested by the
\fI+\fR)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
push refs/heads/master:refs/heads/master
push HEAD:refs/heads/branch
\en
push +refs/heads/foo:refs/heads/bar
\en
.fi
.if n \{\
.RE
.\}
.sp
Zero or more protocol options may be entered after the last
\fIpush\fR
command, before the batch\(cqs terminating blank line\&.
.sp
When the push is complete, outputs one or more
\fIok <dst>\fR
or
\fIerror <dst> <why>?\fR
lines to indicate success or failure of each pushed ref\&. The status report output is terminated by a blank line\&. The option field <why> may be quoted in a C style string if it contains an LF\&.
.sp
Supported if the helper has the "push" capability\&.
.RE
.PP
\fIimport\fR <name>
.RS 4
Produces a fast\-import stream which imports the current value of the named ref\&. It may additionally import other refs as needed to construct the history efficiently\&. The script writes to a helper\-specific private namespace\&. The value of the named ref should be written to a location in this namespace derived by applying the refspecs from the "refspec" capability to the name of the ref\&.
.sp
Especially useful for interoperability with a foreign versioning system\&.
.sp
Just like
\fIpush\fR, a batch sequence of one or more
\fIimport\fR
is terminated with a blank line\&. For each batch of
\fIimport\fR, the remote helper should produce a fast\-import stream terminated by a
\fIdone\fR
command\&.
.sp
Supported if the helper has the "import" capability\&.
.RE
.PP
\fIconnect\fR <service>
.RS 4
Connects to given service\&. Standard input and standard output of helper are connected to specified service (git prefix is included in service name so e\&.g\&. fetching uses
\fIgit\-upload\-pack\fR
as service) on remote side\&. Valid replies to this command are empty line (connection established),
\fIfallback\fR
(no smart transport support, fall back to dumb transports) and just exiting with error message printed (can\(cqt connect, don\(cqt bother trying to fall back)\&. After line feed terminating the positive (empty) response, the output of service starts\&. After the connection ends, the remote helper exits\&.
.sp
Supported if the helper has the "connect" capability\&.
.RE
.sp
If a fatal error occurs, the program writes the error message to stderr and exits\&. The caller should expect that a suitable error message has been printed if the child closes the connection without completing a valid response for the current command\&.
.sp
Additional commands may be supported, as may be determined from capabilities reported by the helper\&.
.SH "REF LIST ATTRIBUTES"
.PP
\fIfor\-push\fR
.RS 4
The caller wants to use the ref list to prepare push commands\&. A helper might chose to acquire the ref list by opening a different type of connection to the destination\&.
.RE
.PP
\fIunchanged\fR
.RS 4
This ref is unchanged since the last import or fetch, although the helper cannot necessarily determine what value that produced\&.
.RE
.SH "OPTIONS"
.PP
\fIoption verbosity\fR <n>
.RS 4
Changes the verbosity of messages displayed by the helper\&. A value of 0 for <n> means that processes operate quietly, and the helper produces only error output\&. 1 is the default level of verbosity, and higher values of <n> correspond to the number of \-v flags passed on the command line\&.
.RE
.PP
\fIoption progress\fR {\fItrue\fR|\fIfalse\fR}
.RS 4
Enables (or disables) progress messages displayed by the transport helper during a command\&.
.RE
.PP
\fIoption depth\fR <depth>
.RS 4
Deepens the history of a shallow repository\&.
.RE
.PP
\fIoption followtags\fR {\fItrue\fR|\fIfalse\fR}
.RS 4
If enabled the helper should automatically fetch annotated tag objects if the object the tag points at was transferred during the fetch command\&. If the tag is not fetched by the helper a second fetch command will usually be sent to ask for the tag specifically\&. Some helpers may be able to use this option to avoid a second network connection\&.
.RE
.sp
\fIoption dry\-run\fR {\fItrue\fR|\fIfalse\fR}: If true, pretend the operation completed successfully, but don\(cqt actually change any repository data\&. For most helpers this only applies to the \fIpush\fR, if supported\&.
.PP
\fIoption servpath <c\-style\-quoted\-path>\fR
.RS 4
Sets service path (\-\-upload\-pack, \-\-receive\-pack etc\&.) for next connect\&. Remote helper may support this option, but must not rely on this option being set before connect request occurs\&.
.RE
.SH "SEE ALSO"
.sp
\fBgit-remote\fR(1)
.sp
\fBgit-remote-testgit\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
