'\" t
.\"     Title: git-svn
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 03/26/2012
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-SVN" "1" "03/26/2012" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-svn \- Bidirectional operation between a Subversion repository and git
.SH "SYNOPSIS"
.sp
.nf
\fIgit svn\fR <command> [options] [arguments]
.fi
.sp
.SH "DESCRIPTION"
.sp
\fIgit svn\fR is a simple conduit for changesets between Subversion and git\&. It provides a bidirectional flow of changes between a Subversion and a git repository\&.
.sp
\fIgit svn\fR can track a standard Subversion repository, following the common "trunk/branches/tags" layout, with the \-\-stdlayout option\&. It can also follow branches and tags in any layout with the \-T/\-t/\-b options (see options to \fIinit\fR below, and also the \fIclone\fR command)\&.
.sp
Once tracking a Subversion repository (with any of the above methods), the git repository can be updated from Subversion by the \fIfetch\fR command and Subversion updated from git by the \fIdcommit\fR command\&.
.SH "COMMANDS"
.PP
\fIinit\fR
.RS 4
Initializes an empty git repository with additional metadata directories for
\fIgit svn\fR\&. The Subversion URL may be specified as a command\-line argument, or as full URL arguments to \-T/\-t/\-b\&. Optionally, the target directory to operate on can be specified as a second argument\&. Normally this command initializes the current directory\&.
.PP
\-T<trunk_subdir>, \-\-trunk=<trunk_subdir>, \-t<tags_subdir>, \-\-tags=<tags_subdir>, \-b<branches_subdir>, \-\-branches=<branches_subdir>, \-s, \-\-stdlayout
.RS 4
These are optional command\-line options for init\&. Each of these flags can point to a relative repository path (\-\-tags=project/tags) or a full url (\-\-tags=https://foo\&.org/project/tags)\&. You can specify more than one \-\-tags and/or \-\-branches options, in case your Subversion repository places tags or branches under multiple paths\&. The option \-\-stdlayout is a shorthand way of setting trunk,tags,branches as the relative paths, which is the Subversion default\&. If any of the other options are given as well, they take precedence\&.
.RE
.PP
\-\-no\-metadata
.RS 4
Set the
\fInoMetadata\fR
option in the [svn\-remote] config\&. This option is not recommended, please read the
\fIsvn\&.noMetadata\fR
section of this manpage before using this option\&.
.RE
.PP
\-\-use\-svm\-props
.RS 4
Set the
\fIuseSvmProps\fR
option in the [svn\-remote] config\&.
.RE
.PP
\-\-use\-svnsync\-props
.RS 4
Set the
\fIuseSvnsyncProps\fR
option in the [svn\-remote] config\&.
.RE
.PP
\-\-rewrite\-root=<URL>
.RS 4
Set the
\fIrewriteRoot\fR
option in the [svn\-remote] config\&.
.RE
.PP
\-\-rewrite\-uuid=<UUID>
.RS 4
Set the
\fIrewriteUUID\fR
option in the [svn\-remote] config\&.
.RE
.PP
\-\-username=<user>
.RS 4
For transports that SVN handles authentication for (http, https, and plain svn), specify the username\&. For other transports (eg svn+ssh://), you must include the username in the URL, eg svn+ssh://foo@svn\&.bar\&.com/project
.RE
.PP
\-\-prefix=<prefix>
.RS 4
This allows one to specify a prefix which is prepended to the names of remotes if trunk/branches/tags are specified\&. The prefix does not automatically include a trailing slash, so be sure you include one in the argument if that is what you want\&. If \-\-branches/\-b is specified, the prefix must include a trailing slash\&. Setting a prefix is useful if you wish to track multiple projects that share a common repository\&.
.RE
.PP
\-\-ignore\-paths=<regex>
.RS 4
When passed to
\fIinit\fR
or
\fIclone\fR
this regular expression will be preserved as a config key\&. See
\fIfetch\fR
for a description of
\fI\-\-ignore\-paths\fR\&.
.RE
.PP
\-\-no\-minimize\-url
.RS 4
When tracking multiple directories (using \-\-stdlayout, \-\-branches, or \-\-tags options), git svn will attempt to connect to the root (or highest allowed level) of the Subversion repository\&. This default allows better tracking of history if entire projects are moved within a repository, but may cause issues on repositories where read access restrictions are in place\&. Passing
\fI\-\-no\-minimize\-url\fR
will allow git svn to accept URLs as\-is without attempting to connect to a higher level directory\&. This option is off by default when only one URL/branch is tracked (it would do little good)\&.
.RE
.RE
.PP
\fIfetch\fR
.RS 4
Fetch unfetched revisions from the Subversion remote we are tracking\&. The name of the [svn\-remote "\&..."] section in the \&.git/config file may be specified as an optional command\-line argument\&.
.PP
\-\-localtime
.RS 4
Store Git commit times in the local timezone instead of UTC\&. This makes
\fIgit log\fR
(even without \-\-date=local) show the same times that
svn log
would in the local timezone\&.
.sp
This doesn\(cqt interfere with interoperating with the Subversion repository you cloned from, but if you wish for your local Git repository to be able to interoperate with someone else\(cqs local Git repository, either don\(cqt use this option or you should both use it in the same local timezone\&.
.RE
.PP
\-\-parent
.RS 4
Fetch only from the SVN parent of the current HEAD\&.
.RE
.PP
\-\-ignore\-paths=<regex>
.RS 4
This allows one to specify a Perl regular expression that will cause skipping of all matching paths from checkout from SVN\&. The
\fI\-\-ignore\-paths\fR
option should match for every
\fIfetch\fR
(including automatic fetches due to
\fIclone\fR,
\fIdcommit\fR,
\fIrebase\fR, etc) on a given repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\-remote\&.<name>\&.ignore\-paths
.fi
.if n \{\
.RE
.\}
.sp
If the ignore\-paths config key is set and the command line option is also given, both regular expressions will be used\&.
.sp
Examples:
.PP
Skip "doc*" directory for every fetch
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-ignore\-paths="^doc"
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
Skip "branches" and "tags" of first level directories
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-ignore\-paths="^[^/]+/(?:branches|tags)"
.fi
.if n \{\
.RE
.\}
.sp
.RE
.RE
.RE
.PP
\fIclone\fR
.RS 4
Runs
\fIinit\fR
and
\fIfetch\fR\&. It will automatically create a directory based on the basename of the URL passed to it; or if a second argument is passed; it will create a directory and work within that\&. It accepts all arguments that the
\fIinit\fR
and
\fIfetch\fR
commands accept; with the exception of
\fI\-\-fetch\-all\fR
and
\fI\-\-parent\fR\&. After a repository is cloned, the
\fIfetch\fR
command will be able to update revisions without affecting the working tree; and the
\fIrebase\fR
command will be able to update the working tree with the latest changes\&.
.PP
\-\-preserve\-empty\-dirs
.RS 4
Create a placeholder file in the local Git repository for each empty directory fetched from Subversion\&. This includes directories that become empty by removing all entries in the Subversion repository (but not the directory itself)\&. The placeholder files are also tracked and removed when no longer necessary\&.
.RE
.PP
\-\-placeholder\-filename=<filename>
.RS 4
Set the name of placeholder files created by \-\-preserve\-empty\-dirs\&. Default: "\&.gitignore"
.RE
.RE
.PP
\fIrebase\fR
.RS 4
This fetches revisions from the SVN parent of the current HEAD and rebases the current (uncommitted to SVN) work against it\&.
.sp
This works similarly to
svn update
or
\fIgit pull\fR
except that it preserves linear history with
\fIgit rebase\fR
instead of
\fIgit merge\fR
for ease of dcommitting with
\fIgit svn\fR\&.
.sp
This accepts all options that
\fIgit svn fetch\fR
and
\fIgit rebase\fR
accept\&. However,
\fI\-\-fetch\-all\fR
only fetches from the current [svn\-remote], and not all [svn\-remote] definitions\&.
.sp
Like
\fIgit rebase\fR; this requires that the working tree be clean and have no uncommitted changes\&.
.PP
\-l, \-\-local
.RS 4
Do not fetch remotely; only run
\fIgit rebase\fR
against the last fetched commit from the upstream SVN\&.
.RE
.RE
.PP
\fIdcommit\fR
.RS 4
Commit each diff from a specified head directly to the SVN repository, and then rebase or reset (depending on whether or not there is a diff between SVN and head)\&. This will create a revision in SVN for each commit in git\&. It is recommended that you run
\fIgit svn\fR
fetch and rebase (not pull or merge) your commits against the latest changes in the SVN repository\&. An optional revision or branch argument may be specified, and causes
\fIgit svn\fR
to do all work on that revision/branch instead of HEAD\&. This is advantageous over
\fIset\-tree\fR
(below) because it produces cleaner, more linear history\&.
.PP
\-\-no\-rebase
.RS 4
After committing, do not rebase or reset\&.
.RE
.PP
\-\-commit\-url <URL>
.RS 4
Commit to this SVN URL (the full path)\&. This is intended to allow existing
\fIgit svn\fR
repositories created with one transport method (e\&.g\&.
svn://
or
http://
for anonymous read) to be reused if a user is later given access to an alternate transport method (e\&.g\&.
svn+ssh://
or
https://) for commit\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\-remote\&.<name>\&.commiturl
config key: svn\&.commiturl (overwrites all svn\-remote\&.<name>\&.commiturl options)
.fi
.if n \{\
.RE
.\}
.sp
Using this option for any other purpose (don\(cqt ask) is very strongly discouraged\&.
.RE
.PP
\-\-mergeinfo=<mergeinfo>
.RS 4
Add the given merge information during the dcommit (e\&.g\&.
\-\-mergeinfo="/branches/foo:1\-10")\&. All svn server versions can store this information (as a property), and svn clients starting from version 1\&.5 can make use of it\&. To specify merge information from multiple branches, use a single space character between the branches (\-\-mergeinfo="/branches/foo:1\-10 /branches/bar:3,5\-6,8")
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.pushmergeinfo
.fi
.if n \{\
.RE
.\}
.sp
This option will cause git\-svn to attempt to automatically populate the svn:mergeinfo property in the SVN repository when possible\&. Currently, this can only be done when dcommitting non\-fast\-forward merges where all parents but the first have already been pushed into SVN\&.
.RE
.PP
\-\-interactive
.RS 4
Ask the user to confirm that a patch set should actually be sent to SVN\&. For each patch, one may answer "yes" (accept this patch), "no" (discard this patch), "all" (accept all patches), or "quit"\&.

\fIgit svn dcommit\fR
returns immediately if answer if "no" or "quit", without commiting anything to SVN\&.
.RE
.RE
.PP
\fIbranch\fR
.RS 4
Create a branch in the SVN repository\&.
.PP
\-m, \-\-message
.RS 4
Allows to specify the commit message\&.
.RE
.PP
\-t, \-\-tag
.RS 4
Create a tag by using the tags_subdir instead of the branches_subdir specified during git svn init\&.
.RE
.PP
\-d, \-\-destination
.RS 4
If more than one \-\-branches (or \-\-tags) option was given to the
\fIinit\fR
or
\fIclone\fR
command, you must provide the location of the branch (or tag) you wish to create in the SVN repository\&. The value of this option must match one of the paths specified by a \-\-branches (or \-\-tags) option\&. You can see these paths with the commands
.sp
.if n \{\
.RS 4
.\}
.nf
git config \-\-get\-all svn\-remote\&.<name>\&.branches
git config \-\-get\-all svn\-remote\&.<name>\&.tags
.fi
.if n \{\
.RE
.\}
.sp
where <name> is the name of the SVN repository as specified by the \-R option to
\fIinit\fR
(or "svn" by default)\&.
.RE
.PP
\-\-username
.RS 4
Specify the SVN username to perform the commit as\&. This option overrides the
\fIusername\fR
configuration property\&.
.RE
.PP
\-\-commit\-url
.RS 4
Use the specified URL to connect to the destination Subversion repository\&. This is useful in cases where the source SVN repository is read\-only\&. This option overrides configuration property
\fIcommiturl\fR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
git config \-\-get\-all svn\-remote\&.<name>\&.commiturl
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
\fItag\fR
.RS 4
Create a tag in the SVN repository\&. This is a shorthand for
\fIbranch \-t\fR\&.
.RE
.PP
\fIlog\fR
.RS 4
This should make it easy to look up svn log messages when svn users refer to \-r/\-\-revision numbers\&.
.sp
The following features from \(oqsvn log\(cq are supported:
.PP
\-r <n>[:<n>], \-\-revision=<n>[:<n>]
.RS 4
is supported, non\-numeric args are not: HEAD, NEXT, BASE, PREV, etc \&...
.RE
.PP
\-v, \-\-verbose
.RS 4
it\(cqs not completely compatible with the \-\-verbose output in svn log, but reasonably close\&.
.RE
.PP
\-\-limit=<n>
.RS 4
is NOT the same as \-\-max\-count, doesn\(cqt count merged/excluded commits
.RE
.PP
\-\-incremental
.RS 4
supported
.RE
.sp
New features:
.PP
\-\-show\-commit
.RS 4
shows the git commit sha1, as well
.RE
.PP
\-\-oneline
.RS 4
our version of \-\-pretty=oneline
.RE
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
SVN itself only stores times in UTC and nothing else\&. The regular svn client converts the UTC time to the local time (or based on the TZ= environment)\&. This command has the same behaviour\&.
.sp .5v
.RE
Any other arguments are passed directly to
\fIgit log\fR
.RE
.PP
\fIblame\fR
.RS 4
Show what revision and author last modified each line of a file\&. The output of this mode is format\-compatible with the output of \(oqsvn blame\(cq by default\&. Like the SVN blame command, local uncommitted changes in the working tree are ignored; the version of the file in the HEAD revision is annotated\&. Unknown arguments are passed directly to
\fIgit blame\fR\&.
.PP
\-\-git\-format
.RS 4
Produce output in the same format as
\fIgit blame\fR, but with SVN revision numbers instead of git commit hashes\&. In this mode, changes that haven\(cqt been committed to SVN (including local working\-copy edits) are shown as revision 0\&.
.RE
.RE
.PP
\fIfind\-rev\fR
.RS 4
When given an SVN revision number of the form
\fIrN\fR, returns the corresponding git commit hash (this can optionally be followed by a tree\-ish to specify which branch should be searched)\&. When given a tree\-ish, returns the corresponding SVN revision number\&.
.RE
.PP
\fIset\-tree\fR
.RS 4
You should consider using
\fIdcommit\fR
instead of this command\&. Commit specified commit or tree objects to SVN\&. This relies on your imported fetch data being up\-to\-date\&. This makes absolutely no attempts to do patching when committing to SVN, it simply overwrites files with those specified in the tree or commit\&. All merging is assumed to have taken place independently of
\fIgit svn\fR
functions\&.
.RE
.PP
\fIcreate\-ignore\fR
.RS 4
Recursively finds the svn:ignore property on directories and creates matching \&.gitignore files\&. The resulting files are staged to be committed, but are not committed\&. Use \-r/\-\-revision to refer to a specific revision\&.
.RE
.PP
\fIshow\-ignore\fR
.RS 4
Recursively finds and lists the svn:ignore property on directories\&. The output is suitable for appending to the $GIT_DIR/info/exclude file\&.
.RE
.PP
\fImkdirs\fR
.RS 4
Attempts to recreate empty directories that core git cannot track based on information in $GIT_DIR/svn/<refname>/unhandled\&.log files\&. Empty directories are automatically recreated when using "git svn clone" and "git svn rebase", so "mkdirs" is intended for use after commands like "git checkout" or "git reset"\&. (See the svn\-remote\&.<name>\&.automkdirs config file option for more information\&.)
.RE
.PP
\fIcommit\-diff\fR
.RS 4
Commits the diff of two tree\-ish arguments from the command\-line\&. This command does not rely on being inside an
git svn init\-ed repository\&. This command takes three arguments, (a) the original tree to diff against, (b) the new tree result, (c) the URL of the target Subversion repository\&. The final argument (URL) may be omitted if you are working from a
\fIgit svn\fR\-aware repository (that has been
init\-ed with
\fIgit svn\fR)\&. The \-r<revision> option is required for this\&.
.RE
.PP
\fIinfo\fR
.RS 4
Shows information about a file or directory similar to what \(oqsvn info\(cq provides\&. Does not currently support a \-r/\-\-revision argument\&. Use the \-\-url option to output only the value of the
\fIURL:\fR
field\&.
.RE
.PP
\fIproplist\fR
.RS 4
Lists the properties stored in the Subversion repository about a given file or directory\&. Use \-r/\-\-revision to refer to a specific Subversion revision\&.
.RE
.PP
\fIpropget\fR
.RS 4
Gets the Subversion property given as the first argument, for a file\&. A specific revision can be specified with \-r/\-\-revision\&.
.RE
.PP
\fIshow\-externals\fR
.RS 4
Shows the Subversion externals\&. Use \-r/\-\-revision to specify a specific revision\&.
.RE
.PP
\fIgc\fR
.RS 4
Compress $GIT_DIR/svn/<refname>/unhandled\&.log files in \&.git/svn and remove $GIT_DIR/svn/<refname>index files in \&.git/svn\&.
.RE
.PP
\fIreset\fR
.RS 4
Undoes the effects of
\fIfetch\fR
back to the specified revision\&. This allows you to re\-\fIfetch\fR
an SVN revision\&. Normally the contents of an SVN revision should never change and
\fIreset\fR
should not be necessary\&. However, if SVN permissions change, or if you alter your \-\-ignore\-paths option, a
\fIfetch\fR
may fail with "not found in commit" (file not previously visible) or "checksum mismatch" (missed a modification)\&. If the problem file cannot be ignored forever (with \-\-ignore\-paths) the only way to repair the repo is to use
\fIreset\fR\&.
.sp
Only the rev_map and refs/remotes/git\-svn are changed\&. Follow
\fIreset\fR
with a
\fIfetch\fR
and then
\fIgit reset\fR
or
\fIgit rebase\fR
to move local branches onto the new tree\&.
.PP
\-r <n>, \-\-revision=<n>
.RS 4
Specify the most recent revision to keep\&. All later revisions are discarded\&.
.RE
.PP
\-p, \-\-parent
.RS 4
Discard the specified revision as well, keeping the nearest parent instead\&.
.RE
.PP
Example:
.RS 4
Assume you have local changes in "master", but you need to refetch "r2"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
    r1\-\-\-r2\-\-\-r3 remotes/git\-svn
                \e
                 A\-\-\-B master
.fi
.if n \{\
.RE
.\}
.sp
Fix the ignore\-paths or SVN permissions problem that caused "r2" to be incomplete in the first place\&. Then:
.sp
.if n \{\
.RS 4
.\}
.nf
git svn reset \-r2 \-p
git svn fetch
.fi
.if n \{\
.RE
.\}
.sp

.sp
.if n \{\
.RS 4
.\}
.nf
    r1\-\-\-r2\*(Aq\-\-r3\*(Aq remotes/git\-svn
      \e
       r2\-\-\-r3\-\-\-A\-\-\-B master
.fi
.if n \{\
.RE
.\}
.sp
Then fixup "master" with
\fIgit rebase\fR\&. Do NOT use
\fIgit merge\fR
or your history will not be compatible with a future
\fIdcommit\fR!
.sp
.if n \{\
.RS 4
.\}
.nf
git rebase \-\-onto remotes/git\-svn A^ master
.fi
.if n \{\
.RE
.\}
.sp

.sp
.if n \{\
.RS 4
.\}
.nf
    r1\-\-\-r2\*(Aq\-\-r3\*(Aq remotes/git\-svn
                \e
                 A\*(Aq\-\-B\*(Aq master
.fi
.if n \{\
.RE
.\}
.sp
.RE
.RE
.SH "OPTIONS"
.PP
\-\-shared[=(false|true|umask|group|all|world|everybody)], \-\-template=<template_directory>
.RS 4
Only used with the
\fIinit\fR
command\&. These are passed directly to
\fIgit init\fR\&.
.RE
.PP
\-r <arg>, \-\-revision <arg>
.RS 4
Used with the
\fIfetch\fR
command\&.
.sp
This allows revision ranges for partial/cauterized history to be supported\&. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported\&.
.sp
This can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost\&.
.RE
.PP
\-, \-\-stdin
.RS 4
Only used with the
\fIset\-tree\fR
command\&.
.sp
Read a list of commits from stdin and commit them in reverse order\&. Only the leading sha1 is read from each line, so
\fIgit rev\-list \-\-pretty=oneline\fR
output can be used\&.
.RE
.PP
\-\-rmdir
.RS 4
Only used with the
\fIdcommit\fR,
\fIset\-tree\fR
and
\fIcommit\-diff\fR
commands\&.
.sp
Remove directories from the SVN tree if there are no files left behind\&. SVN can version empty directories, and they are not removed by default if there are no files left in them\&. git cannot version empty directories\&. Enabling this flag will make the commit to SVN act like git\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.rmdir
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-e, \-\-edit
.RS 4
Only used with the
\fIdcommit\fR,
\fIset\-tree\fR
and
\fIcommit\-diff\fR
commands\&.
.sp
Edit the commit message before committing to SVN\&. This is off by default for objects that are commits, and forced on when committing tree objects\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.edit
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-l<num>, \-\-find\-copies\-harder
.RS 4
Only used with the
\fIdcommit\fR,
\fIset\-tree\fR
and
\fIcommit\-diff\fR
commands\&.
.sp
They are both passed directly to
\fIgit diff\-tree\fR; see
\fBgit-diff-tree\fR(1)
for more information\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.l
config key: svn\&.findcopiesharder
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-A<filename>, \-\-authors\-file=<filename>
.RS 4
Syntax is compatible with the file used by
\fIgit cvsimport\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
        loginname = Joe User <user@example\&.com>
.fi
.if n \{\
.RE
.\}
.sp
If this option is specified and
\fIgit svn\fR
encounters an SVN committer name that does not exist in the authors\-file,
\fIgit svn\fR
will abort operation\&. The user will then have to add the appropriate entry\&. Re\-running the previous
\fIgit svn\fR
command after the authors\-file is modified should continue operation\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.authorsfile
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-\-authors\-prog=<filename>
.RS 4
If this option is specified, for each SVN committer name that does not exist in the authors file, the given file is executed with the committer name as the first argument\&. The program is expected to return a single line of the form "Name <email>", which will be treated as if included in the authors file\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Make
\fIgit svn\fR
less verbose\&. Specify a second time to make it even less verbose\&.
.RE
.PP
\-\-repack[=<n>], \-\-repack\-flags=<flags>
.RS 4
These should help keep disk usage sane for large fetches with many revisions\&.
.sp
\-\-repack takes an optional argument for the number of revisions to fetch before repacking\&. This defaults to repacking every 1000 commits fetched if no argument is specified\&.
.sp
\-\-repack\-flags are passed directly to
\fIgit repack\fR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.repack
config key: svn\&.repackflags
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-m, \-\-merge, \-s<strategy>, \-\-strategy=<strategy>
.RS 4
These are only used with the
\fIdcommit\fR
and
\fIrebase\fR
commands\&.
.sp
Passed directly to
\fIgit rebase\fR
when using
\fIdcommit\fR
if a
\fIgit reset\fR
cannot be used (see
\fIdcommit\fR)\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
This can be used with the
\fIdcommit\fR,
\fIrebase\fR,
\fIbranch\fR
and
\fItag\fR
commands\&.
.sp
For
\fIdcommit\fR, print out the series of git arguments that would show which diffs would be committed to SVN\&.
.sp
For
\fIrebase\fR, display the local branch associated with the upstream svn repository associated with the current branch and the URL of svn repository that will be fetched from\&.
.sp
For
\fIbranch\fR
and
\fItag\fR, display the urls that will be used for copying when creating the branch or tag\&.
.RE
.PP
\-\-use\-log\-author
.RS 4
When retrieving svn commits into git (as part of
\fIfetch\fR,
\fIrebase\fR, or
\fIdcommit\fR
operations), look for the first
From:
or
Signed\-off\-by:
line in the log message and use that as the author string\&.
.RE
.PP
\-\-add\-author\-from
.RS 4
When committing to svn from git (as part of
\fIcommit\-diff\fR,
\fIset\-tree\fR
or
\fIdcommit\fR
operations), if the existing log message doesn\(cqt already have a
From:
or
Signed\-off\-by:
line, append a
From:
line based on the git commit\(cqs author string\&. If you use this, then
\-\-use\-log\-author
will retrieve a valid author string for all commits\&.
.RE
.SH "ADVANCED OPTIONS"
.PP
\-i<GIT_SVN_ID>, \-\-id <GIT_SVN_ID>
.RS 4
This sets GIT_SVN_ID (instead of using the environment)\&. This allows the user to override the default refname to fetch from when tracking a single URL\&. The
\fIlog\fR
and
\fIdcommit\fR
commands no longer require this switch as an argument\&.
.RE
.PP
\-R<remote name>, \-\-svn\-remote <remote name>
.RS 4
Specify the [svn\-remote "<remote name>"] section to use, this allows SVN multiple repositories to be tracked\&. Default: "svn"
.RE
.PP
\-\-follow\-parent
.RS 4
This is especially helpful when we\(cqre tracking a directory that has been moved around within the repository, or if we started tracking a branch and never tracked the trunk it was descended from\&. This feature is enabled by default, use \-\-no\-follow\-parent to disable it\&.
.sp
.if n \{\
.RS 4
.\}
.nf
config key: svn\&.followparent
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "CONFIG FILE-ONLY OPTIONS"
.PP
svn\&.noMetadata, svn\-remote\&.<name>\&.noMetadata
.RS 4
This gets rid of the
\fIgit\-svn\-id:\fR
lines at the end of every commit\&.
.sp
This option can only be used for one\-shot imports as
\fIgit svn\fR
will not be able to fetch again without metadata\&. Additionally, if you lose your \&.git/svn/\fB*/\&.rev_map\&.\fR
files,
\fIgit svn\fR
will not be able to rebuild them\&.
.sp
The
\fIgit svn log\fR
command will not work on repositories using this, either\&. Using this conflicts with the
\fIuseSvmProps\fR
option for (hopefully) obvious reasons\&.
.sp
This option is NOT recommended as it makes it difficult to track down old references to SVN revision numbers in existing documentation, bug reports and archives\&. If you plan to eventually migrate from SVN to git and are certain about dropping SVN history, consider
\fBgit-filter-branch\fR(1)
instead\&. filter\-branch also allows reformatting of metadata for ease\-of\-reading and rewriting authorship info for non\-"svn\&.authorsFile" users\&.
.RE
.PP
svn\&.useSvmProps, svn\-remote\&.<name>\&.useSvmProps
.RS 4
This allows
\fIgit svn\fR
to re\-map repository URLs and UUIDs from mirrors created using SVN::Mirror (or svk) for metadata\&.
.sp
If an SVN revision has a property, "svm:headrev", it is likely that the revision was created by SVN::Mirror (also used by SVK)\&. The property contains a repository UUID and a revision\&. We want to make it look like we are mirroring the original URL, so introduce a helper function that returns the original identity URL and UUID, and use it when generating metadata in commit messages\&.
.RE
.PP
svn\&.useSvnsyncProps, svn\-remote\&.<name>\&.useSvnsyncprops
.RS 4
Similar to the useSvmProps option; this is for users of the svnsync(1) command distributed with SVN 1\&.4\&.x and later\&.
.RE
.PP
svn\-remote\&.<name>\&.rewriteRoot
.RS 4
This allows users to create repositories from alternate URLs\&. For example, an administrator could run
\fIgit svn\fR
on the server locally (accessing via file://) but wish to distribute the repository with a public http:// or svn:// URL in the metadata so users of it will see the public URL\&.
.RE
.PP
svn\-remote\&.<name>\&.rewriteUUID
.RS 4
Similar to the useSvmProps option; this is for users who need to remap the UUID manually\&. This may be useful in situations where the original UUID is not available via either useSvmProps or useSvnsyncProps\&.
.RE
.PP
svn\-remote\&.<name>\&.pushurl
.RS 4
Similar to git\(cqs
\fIremote\&.<name>\&.pushurl\fR, this key is designed to be used in cases where
\fIurl\fR
points to an SVN repository via a read\-only transport, to provide an alternate read/write transport\&. It is assumed that both keys point to the same repository\&. Unlike
\fIcommiturl\fR,
\fIpushurl\fR
is a base path\&. If either
\fIcommiturl\fR
or
\fIpushurl\fR
could be used,
\fIcommiturl\fR
takes precedence\&.
.RE
.PP
svn\&.brokenSymlinkWorkaround
.RS 4
This disables potentially expensive checks to workaround broken symlinks checked into SVN by broken clients\&. Set this option to "false" if you track a SVN repository with many empty blobs that are not symlinks\&. This option may be changed while
\fIgit svn\fR
is running and take effect on the next revision fetched\&. If unset,
\fIgit svn\fR
assumes this option to be "true"\&.
.RE
.PP
svn\&.pathnameencoding
.RS 4
This instructs git svn to recode pathnames to a given encoding\&. It can be used by windows users and by those who work in non\-utf8 locales to avoid corrupted file names with non\-ASCII characters\&. Valid encodings are the ones supported by Perl\(cqs Encode module\&.
.RE
.PP
svn\-remote\&.<name>\&.automkdirs
.RS 4
Normally, the "git svn clone" and "git svn rebase" commands attempt to recreate empty directories that are in the Subversion repository\&. If this option is set to "false", then empty directories will only be created if the "git svn mkdirs" command is run explicitly\&. If unset,
\fIgit svn\fR
assumes this option to be "true"\&.
.RE
.sp
Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and useSvmProps options all affect the metadata generated and used by \fIgit svn\fR; they \fBmust\fR be set in the configuration file before any history is imported and these settings should never be changed once they are set\&.
.sp
Additionally, only one of these options can be used per svn\-remote section because they affect the \fIgit\-svn\-id:\fR metadata line, except for rewriteRoot and rewriteUUID which can be used together\&.
.SH "BASIC EXAMPLES"
.sp
Tracking and contributing to the trunk of a Subversion\-managed project:
.sp
.if n \{\
.RS 4
.\}
.nf
# Clone a repo (like git clone):
        git svn clone http://svn\&.example\&.com/project/trunk
# Enter the newly cloned directory:
        cd trunk
# You should be on master branch, double\-check with \*(Aqgit branch\*(Aq
        git branch
# Do some work and commit locally to git:
        git commit \&.\&.\&.
# Something is committed to SVN, rebase your local changes against the
# latest changes in SVN:
        git svn rebase
# Now commit your changes (that were committed previously using git) to SVN,
# as well as automatically updating your working HEAD:
        git svn dcommit
# Append svn:ignore settings to the default git exclude file:
        git svn show\-ignore >> \&.git/info/exclude
.fi
.if n \{\
.RE
.\}
.sp
.sp
Tracking and contributing to an entire Subversion\-managed project (complete with a trunk, tags and branches):
.sp
.if n \{\
.RS 4
.\}
.nf
# Clone a repo (like git clone):
        git svn clone http://svn\&.example\&.com/project \-T trunk \-b branches \-t tags
# View all branches and tags you have cloned:
        git branch \-r
# Create a new branch in SVN
    git svn branch waldo
# Reset your master to trunk (or any other branch, replacing \*(Aqtrunk\*(Aq
# with the appropriate name):
        git reset \-\-hard remotes/trunk
# You may only dcommit to one branch/tag/trunk at a time\&.  The usage
# of dcommit/rebase/show\-ignore should be the same as above\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
The initial \fIgit svn clone\fR can be quite time\-consuming (especially for large Subversion repositories)\&. If multiple people (or one person with multiple machines) want to use \fIgit svn\fR to interact with the same Subversion repository, you can do the initial \fIgit svn clone\fR to a repository on a server and have each person clone that repository with \fIgit clone\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
# Do the initial import on a server
        ssh server "cd /pub && git svn clone http://svn\&.example\&.com/project
# Clone locally \- make sure the refs/remotes/ space matches the server
        mkdir project
        cd project
        git init
        git remote add origin server:/pub/project
        git config \-\-replace\-all remote\&.origin\&.fetch \*(Aq+refs/remotes/*:refs/remotes/*\*(Aq
        git fetch
# Prevent fetch/pull from remote git server in the future,
# we only want to use git svn for future updates
        git config \-\-remove\-section remote\&.origin
# Create a local branch from one of the branches just fetched
        git checkout \-b master FETCH_HEAD
# Initialize \*(Aqgit svn\*(Aq locally (be sure to use the same URL and \-T/\-b/\-t options as were used on server)
        git svn init http://svn\&.example\&.com/project
# Pull the latest changes from Subversion
        git svn rebase
.fi
.if n \{\
.RE
.\}
.sp
.SH "REBASE VS. PULL/MERGE"
.sp
Originally, \fIgit svn\fR recommended that the \fIremotes/git\-svn\fR branch be pulled or merged from\&. This is because the author favored git svn set\-tree B to commit a single head rather than the git svn set\-tree A\&.\&.B notation to commit multiple commits\&.
.sp
If you use git svn set\-tree A\&.\&.B to commit several diffs and you do not have the latest remotes/git\-svn merged into my\-branch, you should use git svn rebase to update your work branch instead of git pull or git merge\&. pull/merge can cause non\-linear history to be flattened when committing into SVN, which can lead to merge commits reversing previous commits in SVN\&.
.SH "MERGE TRACKING"
.sp
While \fIgit svn\fR can track copy history (including branches and tags) for repositories adopting a standard layout, it cannot yet represent merge history that happened inside git back upstream to SVN users\&. Therefore it is advised that users keep history as linear as possible inside git to ease compatibility with SVN (see the CAVEATS section below)\&.
.SH "CAVEATS"
.sp
For the sake of simplicity and interoperating with Subversion, it is recommended that all \fIgit svn\fR users clone, fetch and dcommit directly from the SVN server, and avoid all \fIgit clone\fR/\fIpull\fR/\fImerge\fR/\fIpush\fR operations between git repositories and branches\&. The recommended method of exchanging code between git branches and users is \fIgit format\-patch\fR and \fIgit am\fR, or just \*(Aqdcommit\(cqing to the SVN repository\&.
.sp
Running \fIgit merge\fR or \fIgit pull\fR is NOT recommended on a branch you plan to \fIdcommit\fR from because Subversion users cannot see any merges you\(cqve made\&. Furthermore, if you merge or pull from a git branch that is a mirror of an SVN branch, \fIdcommit\fR may commit to the wrong branch\&.
.sp
If you do merge, note the following rule: \fIgit svn dcommit\fR will attempt to commit on top of the SVN commit named in
.sp
.if n \{\
.RS 4
.\}
.nf
git log \-\-grep=^git\-svn\-id: \-\-first\-parent \-1
.fi
.if n \{\
.RE
.\}
.sp
.sp
You \fImust\fR therefore ensure that the most recent commit of the branch you want to dcommit to is the \fIfirst\fR parent of the merge\&. Chaos will ensue otherwise, especially if the first parent is an older commit on the same SVN branch\&.
.sp
\fIgit clone\fR does not clone branches under the refs/remotes/ hierarchy or any \fIgit svn\fR metadata, or config\&. So repositories created and managed with using \fIgit svn\fR should use \fIrsync\fR for cloning, if cloning is to be done at all\&.
.sp
Since \fIdcommit\fR uses rebase internally, any git branches you \fIgit push\fR to before \fIdcommit\fR on will require forcing an overwrite of the existing ref on the remote repository\&. This is generally considered bad practice, see the \fBgit-push\fR(1) documentation for details\&.
.sp
Do not use the \-\-amend option of \fBgit-commit\fR(1) on a change you\(cqve already dcommitted\&. It is considered bad practice to \-\-amend commits you\(cqve already pushed to a remote repository for other users, and dcommit with SVN is analogous to that\&.
.sp
When using multiple \-\-branches or \-\-tags, \fIgit svn\fR does not automatically handle name collisions (for example, if two branches from different paths have the same name, or if a branch and a tag have the same name)\&. In these cases, use \fIinit\fR to set up your git repository then, before your first \fIfetch\fR, edit the \&.git/config file so that the branches and tags are associated with different name spaces\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
branches = stable/*:refs/remotes/svn/stable/*
branches = debug/*:refs/remotes/svn/debug/*
.fi
.if n \{\
.RE
.\}
.SH "BUGS"
.sp
We ignore all SVN properties except svn:executable\&. Any unhandled properties are logged to $GIT_DIR/svn/<refname>/unhandled\&.log
.sp
Renamed and copied directories are not detected by git and hence not tracked when committing to SVN\&. I do not plan on adding support for this as it\(cqs quite difficult and time\-consuming to get working for all the possible corner cases (git doesn\(cqt do it, either)\&. Committing renamed and copied files is fully supported if they\(cqre similar enough for git to detect them\&.
.SH "CONFIGURATION"
.sp
\fIgit svn\fR stores [svn\-remote] configuration information in the repository \&.git/config file\&. It is similar the core git [remote] sections except \fIfetch\fR keys do not accept glob arguments; but they are instead handled by the \fIbranches\fR and \fItags\fR keys\&. Since some SVN repositories are oddly configured with multiple projects glob expansions such those listed below are allowed:
.sp
.if n \{\
.RS 4
.\}
.nf
[svn\-remote "project\-a"]
        url = http://server\&.org/svn
        fetch = trunk/project\-a:refs/remotes/project\-a/trunk
        branches = branches/*/project\-a:refs/remotes/project\-a/branches/*
        tags = tags/*/project\-a:refs/remotes/project\-a/tags/*
.fi
.if n \{\
.RE
.\}
.sp
.sp
Keep in mind that the \fI*\fR (asterisk) wildcard of the local ref (right of the \fI:\fR) \fBmust\fR be the farthest right path component; however the remote wildcard may be anywhere as long as it\(cqs an independent path component (surrounded by \fI/\fR or EOL)\&. This type of configuration is not automatically created by \fIinit\fR and should be manually entered with a text\-editor or using \fIgit config\fR\&.
.sp
It is also possible to fetch a subset of branches or tags by using a comma\-separated list of names within braces\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
[svn\-remote "huge\-project"]
        url = http://server\&.org/svn
        fetch = trunk/src:refs/remotes/trunk
        branches = branches/{red,green}/src:refs/remotes/branches/*
        tags = tags/{1\&.0,2\&.0}/src:refs/remotes/tags/*
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note that git\-svn keeps track of the highest revision in which a branch or tag has appeared\&. If the subset of branches or tags is changed after fetching, then \&.git/svn/\&.metadata must be manually edited to remove (or reset) branches\-maxRev and/or tags\-maxRev as appropriate\&.
.SH "SEE ALSO"
.sp
\fBgit-rebase\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
