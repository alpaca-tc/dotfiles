'\" t
.\"     Title: git-update-ref
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 03/26/2012
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-UPDATE\-REF" "1" "03/26/2012" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-update-ref \- Update the object name stored in a ref safely
.SH "SYNOPSIS"
.sp
.nf
\fIgit update\-ref\fR [\-m <reason>] (\-d <ref> [<oldvalue>] | [\-\-no\-deref] <ref> <newvalue> [<oldvalue>])
.fi
.sp
.SH "DESCRIPTION"
.sp
Given two arguments, stores the <newvalue> in the <ref>, possibly dereferencing the symbolic refs\&. E\&.g\&. git update\-ref HEAD <newvalue> updates the current branch head to the new object\&.
.sp
Given three arguments, stores the <newvalue> in the <ref>, possibly dereferencing the symbolic refs, after verifying that the current value of the <ref> matches <oldvalue>\&. E\&.g\&. git update\-ref refs/heads/master <newvalue> <oldvalue> updates the master branch head to <newvalue> only if its current value is <oldvalue>\&. You can specify 40 "0" or an empty string as <oldvalue> to make sure that the ref you are creating does not exist\&.
.sp
It also allows a "ref" file to be a symbolic pointer to another ref file by starting with the four\-byte header sequence of "ref:"\&.
.sp
More importantly, it allows the update of a ref file to follow these symbolic pointers, whether they are symlinks or these "regular file symbolic refs"\&. It follows \fBreal\fR symlinks only if they start with "refs/": otherwise it will just try to read them and update them as a regular file (i\&.e\&. it will allow the filesystem to follow them, but will overwrite such a symlink to somewhere else with a regular filename)\&.
.sp
If \-\-no\-deref is given, <ref> itself is overwritten, rather than the result of following the symbolic pointers\&.
.sp
In general, using
.sp
.if n \{\
.RS 4
.\}
.nf
git update\-ref HEAD "$head"
.fi
.if n \{\
.RE
.\}
.sp
should be a \fIlot\fR safer than doing
.sp
.if n \{\
.RS 4
.\}
.nf
echo "$head" > "$GIT_DIR/HEAD"
.fi
.if n \{\
.RE
.\}
.sp
both from a symlink following standpoint \fBand\fR an error checking standpoint\&. The "refs/" rule for symlinks means that symlinks that point to "outside" the tree are safe: they\(cqll be followed for reading but not for writing (so we\(cqll never write through a ref symlink to some other tree, if you have copied a whole archive by creating a symlink tree)\&.
.sp
With \-d flag, it deletes the named <ref> after verifying it still contains <oldvalue>\&.
.SH "LOGGING UPDATES"
.sp
If config parameter "core\&.logAllRefUpdates" is true and the ref is one under "refs/heads/", "refs/remotes/", "refs/notes/", or the symbolic ref HEAD; or the file "$GIT_DIR/logs/<ref>" exists then git update\-ref will append a line to the log file "$GIT_DIR/logs/<ref>" (dereferencing all symbolic refs before creating the log name) describing the change in ref value\&. Log lines are formatted as:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
oldsha1 SP newsha1 SP committer LF
.sp
Where "oldsha1" is the 40 character hexadecimal value previously stored in <ref>, "newsha1" is the 40 character hexadecimal value of <newvalue> and "committer" is the committer\(cqs name, email address and date in the standard GIT committer ident format\&.
.RE
.sp
Optionally with \-m:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
oldsha1 SP newsha1 SP committer TAB message LF
.sp
Where all fields are as described above and "message" is the value supplied to the \-m option\&.
.RE
.sp
An update will fail (without changing <ref>) if the current user is unable to create a new log file, append to the existing log file or does not have committer information available\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
