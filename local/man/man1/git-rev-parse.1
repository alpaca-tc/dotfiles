'\" t
.\"     Title: git-rev-parse
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 03/26/2012
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-REV\-PARSE" "1" "03/26/2012" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-rev-parse \- Pick out and massage parameters
.SH "SYNOPSIS"
.sp
.nf
\fIgit rev\-parse\fR [ \-\-option ] <args>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
Many git porcelainish commands take mixture of flags (i\&.e\&. parameters that begin with a dash \fI\-\fR) and parameters meant for the underlying \fIgit rev\-list\fR command they use internally and flags and parameters for the other commands they use downstream of \fIgit rev\-list\fR\&. This command is used to distinguish between them\&.
.SH "OPTIONS"
.PP
\-\-parseopt
.RS 4
Use
\fIgit rev\-parse\fR
in option parsing mode (see PARSEOPT section below)\&.
.RE
.PP
\-\-keep\-dashdash
.RS 4
Only meaningful in
\-\-parseopt
mode\&. Tells the option parser to echo out the first
\-\-
met instead of skipping it\&.
.RE
.PP
\-\-stop\-at\-non\-option
.RS 4
Only meaningful in
\-\-parseopt
mode\&. Lets the option parser stop at the first non\-option argument\&. This can be used to parse sub\-commands that take options themselves\&.
.RE
.PP
\-\-sq\-quote
.RS 4
Use
\fIgit rev\-parse\fR
in shell quoting mode (see SQ\-QUOTE section below)\&. In contrast to the
\-\-sq
option below, this mode does only quoting\&. Nothing else is done to command input\&.
.RE
.PP
\-\-revs\-only
.RS 4
Do not output flags and parameters not meant for
\fIgit rev\-list\fR
command\&.
.RE
.PP
\-\-no\-revs
.RS 4
Do not output flags and parameters meant for
\fIgit rev\-list\fR
command\&.
.RE
.PP
\-\-flags
.RS 4
Do not output non\-flag parameters\&.
.RE
.PP
\-\-no\-flags
.RS 4
Do not output flag parameters\&.
.RE
.PP
\-\-default <arg>
.RS 4
If there is no parameter given by the user, use
<arg>
instead\&.
.RE
.PP
\-\-verify
.RS 4
The parameter given must be usable as a single, valid object name\&. Otherwise barf and abort\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Only meaningful in
\-\-verify
mode\&. Do not output an error message if the first argument is not a valid object name; instead exit with non\-zero status silently\&.
.RE
.PP
\-\-sq
.RS 4
Usually the output is made one line per flag and parameter\&. This option makes output a single line, properly quoted for consumption by shell\&. Useful when you expect your parameter to contain whitespaces and newlines (e\&.g\&. when using pickaxe
\-S
with
\fIgit diff\-*\fR)\&. In contrast to the
\-\-sq\-quote
option, the command input is still interpreted as usual\&.
.RE
.PP
\-\-not
.RS 4
When showing object names, prefix them with
\fI^\fR
and strip
\fI^\fR
prefix from the object names that already have one\&.
.RE
.PP
\-\-symbolic
.RS 4
Usually the object names are output in SHA1 form (with possible
\fI^\fR
prefix); this option makes them output in a form as close to the original input as possible\&.
.RE
.PP
\-\-symbolic\-full\-name
.RS 4
This is similar to \-\-symbolic, but it omits input that are not refs (i\&.e\&. branch or tag names; or more explicitly disambiguating "heads/master" form, when you want to name the "master" branch when there is an unfortunately named tag "master"), and show them as full refnames (e\&.g\&. "refs/heads/master")\&.
.RE
.PP
\-\-abbrev\-ref[=(strict|loose)]
.RS 4
A non\-ambiguous short name of the objects name\&. The option core\&.warnAmbiguousRefs is used to select the strict abbreviation mode\&.
.RE
.PP
\-\-all
.RS 4
Show all refs found in
refs/\&.
.RE
.PP
\-\-branches[=pattern], \-\-tags[=pattern], \-\-remotes[=pattern]
.RS 4
Show all branches, tags, or remote\-tracking branches, respectively (i\&.e\&., refs found in
refs/heads,
refs/tags, or
refs/remotes, respectively)\&.
.sp
If a
pattern
is given, only refs matching the given shell glob are shown\&. If the pattern does not contain a globbing character (?,
*, or
[), it is turned into a prefix match by appending
/*\&.
.RE
.PP
\-\-glob=pattern
.RS 4
Show all refs matching the shell glob pattern
pattern\&. If the pattern does not start with
refs/, this is automatically prepended\&. If the pattern does not contain a globbing character (?,
*, or
[), it is turned into a prefix match by appending
/*\&.
.RE
.PP
\-\-show\-toplevel
.RS 4
Show the absolute path of the top\-level directory\&.
.RE
.PP
\-\-show\-prefix
.RS 4
When the command is invoked from a subdirectory, show the path of the current directory relative to the top\-level directory\&.
.RE
.PP
\-\-show\-cdup
.RS 4
When the command is invoked from a subdirectory, show the path of the top\-level directory relative to the current directory (typically a sequence of "\&.\&./", or an empty string)\&.
.RE
.PP
\-\-git\-dir
.RS 4
Show
$GIT_DIR
if defined\&. Otherwise show the path to the \&.git directory, relative to the current directory\&.
.sp
If
$GIT_DIR
is not defined and the current directory is not detected to lie in a git repository or work tree print a message to stderr and exit with nonzero status\&.
.RE
.PP
\-\-is\-inside\-git\-dir
.RS 4
When the current working directory is below the repository directory print "true", otherwise "false"\&.
.RE
.PP
\-\-is\-inside\-work\-tree
.RS 4
When the current working directory is inside the work tree of the repository print "true", otherwise "false"\&.
.RE
.PP
\-\-is\-bare\-repository
.RS 4
When the repository is bare print "true", otherwise "false"\&.
.RE
.PP
\-\-local\-env\-vars
.RS 4
List the GIT_* environment variables that are local to the repository (e\&.g\&. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR)\&. Only the names of the variables are listed, not their value, even if they are set\&.
.RE
.PP
\-\-short, \-\-short=number
.RS 4
Instead of outputting the full SHA1 values of object names try to abbreviate them to a shorter unique name\&. When no length is specified 7 is used\&. The minimum length is 4\&.
.RE
.PP
\-\-since=datestring, \-\-after=datestring
.RS 4
Parse the date string, and output the corresponding \-\-max\-age= parameter for
\fIgit rev\-list\fR\&.
.RE
.PP
\-\-until=datestring, \-\-before=datestring
.RS 4
Parse the date string, and output the corresponding \-\-min\-age= parameter for
\fIgit rev\-list\fR\&.
.RE
.PP
<args>\&...
.RS 4
Flags and parameters to be parsed\&.
.RE
.PP
\-\-resolve\-git\-dir <path>
.RS 4
Check if <path> is a valid git\-dir or a git\-file pointing to a valid git\-dir\&. If <path> is a valid git\-dir the resolved path to git\-dir will be printed\&.
.RE
.SH "SPECIFYING REVISIONS"
.sp
A revision parameter \fI<rev>\fR typically, but not necessarily, names a commit object\&. It uses what is called an \fIextended SHA1\fR syntax\&. Here are various ways to spell object names\&. The ones listed near the end of this list name trees and blobs contained in a commit\&.
.PP
\fI<sha1>\fR, e\&.g\&. \fIdae86e1950b1277e545cee180551750029cfe735\fR, \fIdae86e\fR
.RS 4
The full SHA1 object name (40\-byte hexadecimal string), or a leading substring that is unique within the repository\&. E\&.g\&. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e\&.
.RE
.PP
\fI<describeOutput>\fR, e\&.g\&. \fIv1\&.7\&.4\&.2\-679\-g3bee7fb\fR
.RS 4
Output from
git describe; i\&.e\&. a closest tag, optionally followed by a dash and a number of commits, followed by a dash, a
\fIg\fR, and an abbreviated object name\&.
.RE
.PP
\fI<refname>\fR, e\&.g\&. \fImaster\fR, \fIheads/master\fR, \fIrefs/heads/master\fR
.RS 4
A symbolic ref name\&. E\&.g\&.
\fImaster\fR
typically means the commit object referenced by
\fIrefs/heads/master\fR\&. If you happen to have both
\fIheads/master\fR
and
\fItags/master\fR, you can explicitly say
\fIheads/master\fR
to tell git which one you mean\&. When ambiguous, a
\fI<name>\fR
is disambiguated by taking the first match in the following rules:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If
\fI$GIT_DIR/<name>\fR
exists, that is what you mean (this is usually useful only for
\fIHEAD\fR,
\fIFETCH_HEAD\fR,
\fIORIG_HEAD\fR,
\fIMERGE_HEAD\fR
and
\fICHERRY_PICK_HEAD\fR);
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
otherwise,
\fIrefs/<name>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
otherwise,
\fIrefs/tags/<refname>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
otherwise,
\fIrefs/heads/<name>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
otherwise,
\fIrefs/remotes/<name>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
otherwise,
\fIrefs/remotes/<name>/HEAD\fR
if it exists\&.
.sp
\fIHEAD\fR
names the commit on which you based the changes in the working tree\&.
\fIFETCH_HEAD\fR
records the branch which you fetched from a remote repository with your last
git fetch
invocation\&.
\fIORIG_HEAD\fR
is created by commands that move your
\fIHEAD\fR
in a drastic way, to record the position of the
\fIHEAD\fR
before their operation, so that you can easily change the tip of the branch back to the state before you ran them\&.
\fIMERGE_HEAD\fR
records the commit(s) which you are merging into your branch when you run
git merge\&.
\fICHERRY_PICK_HEAD\fR
records the commit which you are cherry\-picking when you run
git cherry\-pick\&.
.sp
Note that any of the
\fIrefs/*\fR
cases above may come either from the
\fI$GIT_DIR/refs\fR
directory or from the
\fI$GIT_DIR/packed\-refs\fR
file\&.
.RE
.RE
.PP
\fI<refname>@{<date>}\fR, e\&.g\&. \fImaster@{yesterday}\fR, \fIHEAD@{5 minutes ago}\fR
.RS 4
A ref followed by the suffix
\fI@\fR
with a date specification enclosed in a brace pair (e\&.g\&.
\fI{yesterday}\fR,
\fI{1 month 2 weeks 3 days 1 hour 1 second ago}\fR
or
\fI{1979\-02\-26 18:30:00}\fR) specifies the value of the ref at a prior point in time\&. This suffix may only be used immediately following a ref name and the ref must have an existing log (\fI$GIT_DIR/logs/<ref>\fR)\&. Note that this looks up the state of your
\fBlocal\fR
ref at a given time; e\&.g\&., what was in your local
\fImaster\fR
branch last week\&. If you want to look at commits made during certain times, see
\fI\-\-since\fR
and
\fI\-\-until\fR\&.
.RE
.PP
\fI<refname>@{<n>}\fR, e\&.g\&. \fImaster@{1}\fR
.RS 4
A ref followed by the suffix
\fI@\fR
with an ordinal specification enclosed in a brace pair (e\&.g\&.
\fI{1}\fR,
\fI{15}\fR) specifies the n\-th prior value of that ref\&. For example
\fImaster@{1}\fR
is the immediate prior value of
\fImaster\fR
while
\fImaster@{5}\fR
is the 5th prior value of
\fImaster\fR\&. This suffix may only be used immediately following a ref name and the ref must have an existing log (\fI$GIT_DIR/logs/<refname>\fR)\&.
.RE
.PP
\fI@{<n>}\fR, e\&.g\&. \fI@{1}\fR
.RS 4
You can use the
\fI@\fR
construct with an empty ref part to get at a reflog entry of the current branch\&. For example, if you are on branch
\fIblabla\fR
then
\fI@{1}\fR
means the same as
\fIblabla@{1}\fR\&.
.RE
.PP
\fI@{\-<n>}\fR, e\&.g\&. \fI@{\-1}\fR
.RS 4
The construct
\fI@{\-<n>}\fR
means the <n>th branch checked out before the current one\&.
.RE
.PP
\fI<refname>@{upstream}\fR, e\&.g\&. \fImaster@{upstream}\fR, \fI@{u}\fR
.RS 4
The suffix
\fI@{upstream}\fR
to a ref (short form
\fI<refname>@{u}\fR) refers to the branch the ref is set to build on top of\&. A missing ref defaults to the current branch\&.
.RE
.PP
\fI<rev>^\fR, e\&.g\&. \fIHEAD^, v1\&.5\&.1^0\fR
.RS 4
A suffix
\fI^\fR
to a revision parameter means the first parent of that commit object\&.
\fI^<n>\fR
means the <n>th parent (i\&.e\&.
\fI<rev>^\fR
is equivalent to
\fI<rev>^1\fR)\&. As a special rule,
\fI<rev>^0\fR
means the commit itself and is used when
\fI<rev>\fR
is the object name of a tag object that refers to a commit object\&.
.RE
.PP
\fI<rev>~<n>\fR, e\&.g\&. \fImaster~3\fR
.RS 4
A suffix
\fI~<n>\fR
to a revision parameter means the commit object that is the <n>th generation ancestor of the named commit object, following only the first parents\&. I\&.e\&.
\fI<rev>~3\fR
is equivalent to
\fI<rev>^^^\fR
which is equivalent to
\fI<rev>^1^1^1\fR\&. See below for an illustration of the usage of this form\&.
.RE
.PP
\fI<rev>^{<type>}\fR, e\&.g\&. \fIv0\&.99\&.8^{commit}\fR
.RS 4
A suffix
\fI^\fR
followed by an object type name enclosed in brace pair means the object could be a tag, and dereference the tag recursively until an object of that type is found or the object cannot be dereferenced anymore (in which case, barf)\&.
\fI<rev>^0\fR
is a short\-hand for
\fI<rev>^{commit}\fR\&.
.RE
.PP
\fI<rev>^{}\fR, e\&.g\&. \fIv0\&.99\&.8^{}\fR
.RS 4
A suffix
\fI^\fR
followed by an empty brace pair means the object could be a tag, and dereference the tag recursively until a non\-tag object is found\&.
.RE
.PP
\fI<rev>^{/<text>}\fR, e\&.g\&. \fIHEAD^{/fix nasty bug}\fR
.RS 4
A suffix
\fI^\fR
to a revision parameter, followed by a brace pair that contains a text led by a slash, is the same as the
\fI:/fix nasty bug\fR
syntax below except that it returns the youngest matching commit which is reachable from the
\fI<rev>\fR
before
\fI^\fR\&.
.RE
.PP
\fI:/<text>\fR, e\&.g\&. \fI:/fix nasty bug\fR
.RS 4
A colon, followed by a slash, followed by a text, names a commit whose commit message matches the specified regular expression\&. This name returns the youngest matching commit which is reachable from any ref\&. If the commit message starts with a
\fI!\fR
you have to repeat that; the special sequence
\fI:/!\fR, followed by something else than
\fI!\fR, is reserved for now\&. The regular expression can match any part of the commit message\&. To match messages starting with a string, one can use e\&.g\&.
\fI:/^foo\fR\&.
.RE
.PP
\fI<rev>:<path>\fR, e\&.g\&. \fIHEAD:README\fR, \fI:README\fR, \fImaster:\&./README\fR
.RS 4
A suffix
\fI:\fR
followed by a path names the blob or tree at the given path in the tree\-ish object named by the part before the colon\&.
\fI:path\fR
(with an empty part before the colon) is a special case of the syntax described next: content recorded in the index at the given path\&. A path starting with
\fI\&./\fR
or
\fI\&.\&./\fR
is relative to the current working directory\&. The given path will be converted to be relative to the working tree\(cqs root directory\&. This is most useful to address a blob or tree from a commit or tree that has the same tree structure as the working tree\&.
.RE
.PP
\fI:<n>:<path>\fR, e\&.g\&. \fI:0:README\fR, \fI:README\fR
.RS 4
A colon, optionally followed by a stage number (0 to 3) and a colon, followed by a path, names a blob object in the index at the given path\&. A missing stage number (and the colon that follows it) names a stage 0 entry\&. During a merge, stage 1 is the common ancestor, stage 2 is the target branch\(cqs version (typically the current branch), and stage 3 is the version from the branch which is being merged\&.
.RE
.sp
Here is an illustration, by Jon Loeliger\&. Both commit nodes B and C are parents of commit node A\&. Parent commits are ordered left\-to\-right\&.
.sp
.if n \{\
.RS 4
.\}
.nf
G   H   I   J
 \e /     \e /
  D   E   F
   \e  |  / \e
    \e | /   |
     \e|/    |
      B     C
       \e   /
        \e /
         A
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
.fi
.if n \{\
.RE
.\}
.SH "SPECIFYING RANGES"
.sp
History traversing commands such as git log operate on a set of commits, not just a single commit\&. To these commands, specifying a single revision with the notation described in the previous section means the set of commits reachable from that commit, following the commit ancestry chain\&.
.sp
To exclude commits reachable from a commit, a prefix \fI^\fR notation is used\&. E\&.g\&. \fI^r1 r2\fR means commits reachable from \fIr2\fR but exclude the ones reachable from \fIr1\fR\&.
.sp
This set operation appears so often that there is a shorthand for it\&. When you have two commits \fIr1\fR and \fIr2\fR (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by \fI^r1 r2\fR and it can be written as \fIr1\&.\&.r2\fR\&.
.sp
A similar notation \fIr1\&.\&.\&.r2\fR is called symmetric difference of \fIr1\fR and \fIr2\fR and is defined as \fIr1 r2 \-\-not $(git merge\-base \-\-all r1 r2)\fR\&. It is the set of commits that are reachable from either one of \fIr1\fR or \fIr2\fR but not from both\&.
.sp
Two other shorthands for naming a set that is formed by a commit and its parent commits exist\&. The \fIr1^@\fR notation means all parents of \fIr1\fR\&. \fIr1^!\fR includes commit \fIr1\fR but excludes all of its parents\&.
.sp
Here are a handful of examples:
.sp
.if n \{\
.RS 4
.\}
.nf
D                G H D
D F              G H I J D F
^G D             H D
^D B             E I J F B
B\&.\&.\&.C            G H D E B C
^D B C           E I J F B C
C^@              I J F
F^! D            G H D F
.fi
.if n \{\
.RE
.\}
.SH "PARSEOPT"
.sp
In \-\-parseopt mode, \fIgit rev\-parse\fR helps massaging options to bring to shell scripts the same facilities C builtins have\&. It works as an option normalizer (e\&.g\&. splits single switches aggregate values), a bit like getopt(1) does\&.
.sp
It takes on the standard input the specification of the options to parse and understand, and echoes on the standard output a string suitable for sh(1) eval to replace the arguments with normalized ones\&. In case of error, it outputs usage on the standard error stream, and exits with code 129\&.
.sp
Note: Make sure you quote the result when passing it to eval\&. See below for an example\&.
.SS "Input Format"
.sp
\fIgit rev\-parse \-\-parseopt\fR input format is fully text based\&. It has two parts, separated by a line that contains only \-\-\&. The lines before the separator (should be more than one) are used for the usage\&. The lines after the separator describe the options\&.
.sp
Each line of options has this format:
.sp
.if n \{\
.RS 4
.\}
.nf
<opt_spec><flags>* SP+ help LF
.fi
.if n \{\
.RE
.\}
.sp
.PP
<opt_spec>
.RS 4
its format is the short option character, then the long option name separated by a comma\&. Both parts are not required, though at least one is necessary\&.
h,help,
dry\-run
and
f
are all three correct
<opt_spec>\&.
.RE
.PP
<flags>
.RS 4

<flags>
are of
*,
=,
?
or
!\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use
=
if the option takes an argument\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use
?
to mean that the option is optional (though its use is discouraged)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use
*
to mean that this option should not be listed in the usage generated for the
\-h
argument\&. It\(cqs shown for
\-\-help\-all
as documented in
\fBgitcli\fR(7)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use
!
to not make the corresponding negated long option available\&.
.RE
.RE
.sp
The remainder of the line, after stripping the spaces, is used as the help associated to the option\&.
.sp
Blank lines are ignored, and lines that don\(cqt match this specification are used as option group headers (start the line with a space to create such lines on purpose)\&.
.SS "Example"
.sp
.if n \{\
.RS 4
.\}
.nf
OPTS_SPEC="\e
some\-command [options] <args>\&.\&.\&.

some\-command does foo and bar!
\-\-
h,help    show the help

foo       some nifty option \-\-foo
bar=      some cool option \-\-bar with an argument

  An option group Header
C?        option C with an optional argument"

eval "$(echo "$OPTS_SPEC" | git rev\-parse \-\-parseopt \-\- "$@" || echo exit $?)"
.fi
.if n \{\
.RE
.\}
.sp
.SH "SQ-QUOTE"
.sp
In \-\-sq\-quote mode, \fIgit rev\-parse\fR echoes on the standard output a single line suitable for sh(1) eval\&. This line is made by normalizing the arguments following \-\-sq\-quote\&. Nothing other than quoting the arguments is done\&.
.sp
If you want command input to still be interpreted as usual by \fIgit rev\-parse\fR before the output is shell quoted, see the \-\-sq option\&.
.SS "Example"
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat >your\-git\-script\&.sh <<\eEOF
#!/bin/sh
args=$(git rev\-parse \-\-sq\-quote "$@")   # quote user\-supplied arguments
command="git frotz \-n24 $args"          # and use it inside a handcrafted
                                        # command line
eval "$command"
EOF

$ sh your\-git\-script\&.sh "a b\*(Aqc"
.fi
.if n \{\
.RE
.\}
.sp
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Print the object name of the current commit:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rev\-parse \-\-verify HEAD
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Print the commit object name from the revision in the $REV shell variable:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rev\-parse \-\-verify $REV
.fi
.if n \{\
.RE
.\}
.sp
This will error out if $REV is empty or not a valid revision\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Same as above:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rev\-parse \-\-default master \-\-verify $REV
.fi
.if n \{\
.RE
.\}
.sp
but if $REV is empty, the commit object name from master will be printed\&.
.RE
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
