'\" t
.\"     Title: git-fetch
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 03/26/2012
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-FETCH" "1" "03/26/2012" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-fetch \- Download objects and refs from another repository
.SH "SYNOPSIS"
.sp
.nf
\fIgit fetch\fR [<options>] [<repository> [<refspec>\&...]]
\fIgit fetch\fR [<options>] <group>
\fIgit fetch\fR \-\-multiple [<options>] [(<repository> | <group>)\&...]
\fIgit fetch\fR \-\-all [<options>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Fetches named heads or tags from one or more other repositories, along with the objects necessary to complete them\&.
.sp
The ref names and their object names of fetched refs are stored in \&.git/FETCH_HEAD\&. This information is left for a later merge operation done by \fIgit merge\fR\&.
.sp
When <refspec> stores the fetched result in remote\-tracking branches, the tags that point at these branches are automatically followed\&. This is done by first fetching from the remote using the given <refspec>s, and if the repository has objects that are pointed by remote tags that it does not yet have, then fetch those missing tags\&. If the other end has tags that point at branches you are not interested in, you will not get them\&.
.sp
\fIgit fetch\fR can fetch from either a single named repository, or from several repositories at once if <group> is given and there is a remotes\&.<group> entry in the configuration file\&. (See \fBgit-config\fR(1))\&.
.SH "OPTIONS"
.PP
\-\-all
.RS 4
Fetch all remotes\&.
.RE
.PP
\-a, \-\-append
.RS 4
Append ref names and object names of fetched refs to the existing contents of
\&.git/FETCH_HEAD\&. Without this option old data in
\&.git/FETCH_HEAD
will be overwritten\&.
.RE
.PP
\-\-depth=<depth>
.RS 4
Deepen the history of a
\fIshallow\fR
repository created by
git clone
with
\-\-depth=<depth>
option (see
\fBgit-clone\fR(1)) by the specified number of commits\&.
.RE
.PP
\-\-dry\-run
.RS 4
Show what would be done, without making any changes\&.
.RE
.PP
\-f, \-\-force
.RS 4
When
\fIgit fetch\fR
is used with
<rbranch>:<lbranch>
refspec, it refuses to update the local branch
<lbranch>
unless the remote branch
<rbranch>
it fetches is a descendant of
<lbranch>\&. This option overrides that check\&.
.RE
.PP
\-k, \-\-keep
.RS 4
Keep downloaded pack\&.
.RE
.PP
\-\-multiple
.RS 4
Allow several <repository> and <group> arguments to be specified\&. No <refspec>s may be specified\&.
.RE
.PP
\-p, \-\-prune
.RS 4
After fetching, remove any remote\-tracking branches which no longer exist on the remote\&.
.RE
.PP
\-n, \-\-no\-tags
.RS 4
By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally\&. This option disables this automatic tag following\&. The default behavior for a remote may be specified with the remote\&.<name>\&.tagopt setting\&. See
\fBgit-config\fR(1)\&.
.RE
.PP
\-t, \-\-tags
.RS 4
Most of the tags are fetched automatically as branch heads are downloaded, but tags that do not point at objects reachable from the branch heads that are being tracked will not be fetched by this mechanism\&. This flag lets all tags and their associated objects be downloaded\&. The default behavior for a remote may be specified with the remote\&.<name>\&.tagopt setting\&. See
\fBgit-config\fR(1)\&.
.RE
.PP
\-\-recurse\-submodules[=yes|on\-demand|no]
.RS 4
This option controls if and under what conditions new commits of populated submodules should be fetched too\&. It can be used as a boolean option to completely disable recursion when set to
\fIno\fR
or to unconditionally recurse into all populated submodules when set to
\fIyes\fR, which is the default when this option is used without any value\&. Use
\fIon\-demand\fR
to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule\(cqs reference to a commit that isn\(cqt already in the local submodule clone\&.
.RE
.PP
\-\-no\-recurse\-submodules
.RS 4
Disable recursive fetching of submodules (this has the same effect as using the
\fI\-\-recurse\-submodules=no\fR
option)\&.
.RE
.PP
\-\-submodule\-prefix=<path>
.RS 4
Prepend <path> to paths printed in informative messages such as "Fetching submodule foo"\&. This option is used internally when recursing over submodules\&.
.RE
.PP
\-\-recurse\-submodules\-default=[yes|on\-demand]
.RS 4
This option is used internally to temporarily provide a non\-negative default value for the \-\-recurse\-submodules option\&. All other methods of configuring fetch\(cqs submodule recursion (such as settings in
\fBgitmodules\fR(5)
and
\fBgit-config\fR(1)) override this option, as does specifying \-\-[no\-]recurse\-submodules directly\&.
.RE
.PP
\-u, \-\-update\-head\-ok
.RS 4
By default
\fIgit fetch\fR
refuses to update the head which corresponds to the current branch\&. This flag disables the check\&. This is purely for the internal use for
\fIgit pull\fR
to communicate with
\fIgit fetch\fR, and unless you are implementing your own Porcelain you are not supposed to use it\&.
.RE
.PP
\-\-upload\-pack <upload\-pack>
.RS 4
When given, and the repository to fetch from is handled by
\fIgit fetch\-pack\fR,
\fI\-\-exec=<upload\-pack>\fR
is passed to the command to specify non\-default path for the command run on the other end\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Pass \-\-quiet to git\-fetch\-pack and silence any other internally used git commands\&. Progress is not reported to the standard error stream\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Be verbose\&.
.RE
.PP
\-\-progress
.RS 4
Progress status is reported on the standard error stream by default when it is attached to a terminal, unless \-q is specified\&. This flag forces progress status even if the standard error stream is not directed to a terminal\&.
.RE
.PP
<repository>
.RS 4
The "remote" repository that is the source of a fetch or pull operation\&. This parameter can be either a URL (see the section
GIT URLS
below) or the name of a remote (see the section
REMOTES
below)\&.
.RE
.PP
<group>
.RS 4
A name referring to a list of repositories as the value of remotes\&.<group> in the configuration file\&. (See
\fBgit-config\fR(1))\&.
.RE
.PP
<refspec>
.RS 4
The format of a <refspec> parameter is an optional plus
+, followed by the source ref <src>, followed by a colon
:, followed by the destination ref <dst>\&.
.sp
The remote ref that matches <src> is fetched, and if <dst> is not empty string, the local ref that matches it is fast\-forwarded using <src>\&. If the optional plus
+
is used, the local ref is updated even if it does not result in a fast\-forward update\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
If the remote branch from which you want to pull is modified in non\-linear ways such as being rewound and rebased frequently, then a pull will attempt a merge with an older version of itself, likely conflict, and fail\&. It is under these conditions that you would want to use the
+
sign to indicate non\-fast\-forward updates will be needed\&. There is currently no easy way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
You never do your own development on branches that appear on the right hand side of a <refspec> colon on
Pull:
lines; they are to be updated by
\fIgit fetch\fR\&. If you intend to do development derived from a remote branch
B, have a
Pull:
line to track it (i\&.e\&.
Pull: B:remote\-B), and have a separate branch
my\-B
to do your development on top of it\&. The latter is created by
git branch my\-B remote\-B
(or its equivalent
git checkout \-b my\-B remote\-B)\&. Run
git fetch
to keep track of the progress of the remote side, and when you see something new on the remote branch, merge it into your development branch with
git pull \&. remote\-B, while you are on
my\-B
branch\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
There is a difference between listing multiple <refspec> directly on
\fIgit pull\fR
command line and having multiple
Pull:
<refspec> lines for a <repository> and running
\fIgit pull\fR
command without any explicit <refspec> parameters\&. <refspec> listed explicitly on the command line are always merged into the current branch after fetching\&. In other words, if you list more than one remote refs, you would be making an Octopus\&. While
\fIgit pull\fR
run without any explicit <refspec> parameter takes default <refspec>s from
Pull:
lines, it merges only the first <refspec> found into the current branch, after fetching all the remote refs\&. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one\-go by fetching more than one is often useful\&.
.sp .5v
.RE
Some short\-cut notations are also supported\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

tag <tag>
means the same as
refs/tags/<tag>:refs/tags/<tag>; it requests fetching everything up to the given tag\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A parameter <ref> without a colon is equivalent to <ref>: when pulling/fetching, so it merges <ref> into the current branch without storing the remote branch anywhere locally
.RE
.RE
.SH "GIT URLS"
.sp
In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository\&. Depending on the transport protocol, some of this information may be absent\&.
.sp
Git natively supports ssh, git, http, https, ftp, ftps, and rsync protocols\&. The following syntaxes may be used with them:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
http[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ftp[s]://host\&.xz[:port]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rsync://host\&.xz/path/to/repo\&.git/
.RE
.sp
An alternative scp\-like syntax may also be used with the ssh protocol:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:path/to/repo\&.git/
.RE
.sp
The ssh and git protocols additionally support ~username expansion:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ssh://[user@]host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git://host\&.xz[:port]/~[user]/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
[user@]host\&.xz:/~[user]/path/to/repo\&.git/
.RE
.sp
For local repositories, also supported by git natively, the following syntaxes may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/path/to/repo\&.git/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\m[blue]\fBfile:///path/to/repo\&.git/\fR\m[]
.RE
.sp
These two syntaxes are mostly equivalent, except when cloning, when the former implies \-\-local option\&. See \fBgit-clone\fR(1) for details\&.
.sp
When git doesn\(cqt know how to handle a certain transport protocol, it attempts to use the \fIremote\-<transport>\fR remote helper, if one exists\&. To explicitly request a remote helper, the following syntax may be used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
<transport>::<address>
.RE
.sp
where <address> may be a path, a server and path, or an arbitrary URL\-like string recognized by the specific remote helper being invoked\&. See \fBgit-remote-helpers\fR(1) for details\&.
.sp
If there are a large number of similarly\-named remote repositories and you want to use a different format for them (such that the URLs you use will be rewritten into URLs that work), you can create a configuration section of the form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                insteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, with this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "git://git\&.host\&.xz/"]
                insteadOf = host\&.xz:/path/to/
                insteadOf = work:
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "work:repo\&.git" or like "host\&.xz:/path/to/repo\&.git" will be rewritten in any context that takes a URL to be "git://git\&.host\&.xz/repo\&.git"\&.
.sp
If you want to rewrite URLs for push only, you can create a configuration section of the form:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, with this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [url "ssh://example\&.org/"]
                pushInsteadOf = git://example\&.org/
.fi
.if n \{\
.RE
.\}
.sp
.sp
a URL like "git://example\&.org/path/to/repo\&.git" will be rewritten to "ssh://example\&.org/path/to/repo\&.git" for pushes, but pulls will still use the original URL\&.
.SH "REMOTES"
.sp
The name of one of the following can be used instead of a URL as <repository> argument:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a remote in the git configuration file:
$GIT_DIR/config,
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file in the
$GIT_DIR/remotes
directory, or
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a file in the
$GIT_DIR/branches
directory\&.
.RE
.sp
All of these also allow you to omit the refspec from the command line because they each contain a refspec which git will use by default\&.
.SS "Named remote in configuration file"
.sp
You can choose to provide the name of a remote which you had previously configured using \fBgit-remote\fR(1), \fBgit-config\fR(1) or even by a manual edit to the $GIT_DIR/config file\&. The URL of this remote will be used to access the repository\&. The refspec of this remote will be used by default when you do not provide a refspec on the command line\&. The entry in the config file would appear like this:
.sp
.if n \{\
.RS 4
.\}
.nf
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
.fi
.if n \{\
.RE
.\}
.sp
.sp
The <pushurl> is used for pushes only\&. It is optional and defaults to <url>\&.
.SS "Named file in $GIT_DIR/remotes"
.sp
You can choose to provide the name of a file in $GIT_DIR/remotes\&. The URL in this file will be used to access the repository\&. The refspec in this file will be used as default when you do not provide a refspec on the command line\&. This file should have the following format:
.sp
.if n \{\
.RS 4
.\}
.nf
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
.fi
.if n \{\
.RE
.\}
.sp
.sp
Push: lines are used by \fIgit push\fR and Pull: lines are used by \fIgit pull\fR and \fIgit fetch\fR\&. Multiple Push: and Pull: lines may be specified for additional branch mappings\&.
.SS "Named file in $GIT_DIR/branches"
.sp
You can choose to provide the name of a file in $GIT_DIR/branches\&. The URL in this file will be used to access the repository\&. This file should have the following format:
.sp
.if n \{\
.RS 4
.\}
.nf
        <url>#<head>
.fi
.if n \{\
.RE
.\}
.sp
.sp
<url> is required; #<head> is optional\&.
.sp
Depending on the operation, git will use one of the following refspecs, if you don\(cqt provide one on the command line\&. <branch> is the name of this file in $GIT_DIR/branches and <head> defaults to master\&.
.sp
git fetch uses:
.sp
.if n \{\
.RS 4
.\}
.nf
        refs/heads/<head>:refs/heads/<branch>
.fi
.if n \{\
.RE
.\}
.sp
.sp
git push uses:
.sp
.if n \{\
.RS 4
.\}
.nf
        HEAD:refs/heads/<head>
.fi
.if n \{\
.RE
.\}
.sp
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Update the remote\-tracking branches:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch origin
.fi
.if n \{\
.RE
.\}
.sp
The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace, unless the branch\&.<name>\&.fetch option is used to specify a non\-default refspec\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Using refspecs explicitly:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch origin +pu:pu maint:tmp
.fi
.if n \{\
.RE
.\}
.sp
This updates (or creates, as necessary) branches
pu
and
tmp
in the local repository by fetching from the branches (respectively)
pu
and
maint
from the remote repository\&.
.sp
The
pu
branch will be updated even if it is does not fast\-forward, because it is prefixed with a plus sign;
tmp
will not be\&.
.RE
.SH "BUGS"
.sp
Using \-\-recurse\-submodules can only fetch new commits in already checked out submodules right now\&. When e\&.g\&. upstream added a new submodule in the just fetched commits of the superproject the submodule itself can not be fetched, making it impossible to check out that submodule later without having to do a fetch again\&. This is expected to be fixed in a future git version\&.
.SH "SEE ALSO"
.sp
\fBgit-pull\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
