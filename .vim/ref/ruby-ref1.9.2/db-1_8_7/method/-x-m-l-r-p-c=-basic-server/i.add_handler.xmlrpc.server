kind=defined
names=add_handler
visibility=public

--- add_handler( name, signature=nil, help=nil ) { aBlock }

Adds aBlock to the list of handlers, with name as the name of the method.
Parameters signature and help are used by the Introspection method if specified,
where signature is either an Array containing strings each representing a type of it's
signature (the first is the return value) or an Array of Arrays if the method has multiple
signatures. Value type-names are "int, boolean, double, string, dateTime.iso8601, base64, array, struct".

Parameter help is a String with informations about how to call this method etc.

A handler method or code-block can return the types listed at
[[m:XMLRPC::Client#call]].
When a method fails, it can tell it the client by throwing an
XMLRPC::FaultException like in this example:
    s.add_handler("michael.div") do |a,b|
      if b == 0
        raise XMLRPC::FaultException.new(1, "division by zero")
      else
        a / b
      end
    end
The client gets in the case of b==0 an object back of type
XMLRPC::FaultException that has a faultCode and faultString
field.

--- add_handler( prefix, obj )
This is the second form of [[unknown:add_handler|XMLRPC::BasicServer#add_handler]].
To add an object write:
    server.add_handler("michael", MyHandlerClass.new)
All public methods of MyHandlerClass are accessible to
the XML-RPC clients by (('michael."name of method"')). This is
where the class_delim in [[unknown:new|XMLRPC::BasicServer.new]]
has it's role, a XML-RPC method-name is defined by
prefix + class_delim + (('"name of method"')).

--- add_handler( interface, obj )
This is the third form of [[unknown:add_handler|XMLRPC::BasicServer#add_handler]].

Use XMLRPC::interface to generate an ServiceInterface object, which
represents an interface (with signature and help text) for a handler class.

Parameter interface must be of type XMLRPC::ServiceInterface.
Adds all methods of obj which are defined in interface to the
server.

This is the recommended way of adding services to a server!


