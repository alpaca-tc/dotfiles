kind=defined
names=[]
visibility=public

--- [](other) -> Hash

新しいハッシュを生成します。
引数otherと同一のキーと値を持つ新たなハッシュを生成して返します。

引数otherがハッシュではない場合、otherのメソッドto_hashを使って暗黙の変換を試みます。

デフォルト値はコピーしません。生成されたハッシュのデフォルト値は nil です。

引数otherと生成したハッシュは同じオブジェクトを参照することになるので、
一方でキーや値に破壊的操作を行うともう片方にも影響します。

@param other 生成元となるハッシュまたはメソッド to_hash でハッシュに変換できるオブジェクトです。

  h = {1 => "value"}
  h.default = "none"
  
  g = Hash[h]
  p g #=> {1=>"value"}
  
  p h[:no] #=> "none"
  p g[:no] #=> nil
  
  h[:add] = "some"
  p h #=> {1=>"value", :add=>"some"}
  p g #=> {1=>"value"}
  
  h[1] << 'plus' #破壊的操作
  p h #=> {1=>"valueplus", :add=>"some"}
  p g #=> {1=>"valueplus"}

--- [](*key_and_value)  -> Hash

新しいハッシュを生成します。
引数は必ず偶数個指定しなければなりません。奇数番目がキー、偶数番目が値になります。

このメソッドでは生成するハッシュにデフォルト値を指定することはできません。
[[m:Hash.new]]を使うか、[[m:Hash#default=]]で後から指定してください。

@param key_and_value 生成するハッシュのキーと値の組です。必ず偶数個(0を含む)指定しなければいけません。
@raise ArgumentError 奇数個の引数を与えたときに発生します。

以下は配列からハッシュを生成する方法の例です。

(1) [キー, 値, ...] の配列からハッシュへ

  ary = [1,"a", 2,"b", 3,"c"]
  p Hash[*ary]  # => {1=>"a", 2=>"b", 3=>"c"}

(2) キーと値のペアの配列からハッシュへ

  alist = [[1,"a"], [2,"b"], [3,"c"]]
  p Hash[*alist.flatten]  # => {1=>"a", 2=>"b", 3=>"c"}

(3) キーと値の配列のペアからハッシュへ

  keys = [1, 2, 3]
  vals = ["a", "b", "c"]
  alist = keys.zip(vals)   # あるいは alist = [keys,vals].transpose
  p Hash[*alist.flatten]   # => {1=>"a", 2=>"b", 3=>"c"}

(4) キーや値が配列の場合

  alist = [[1,["a"]], [2,["b"]], [3,["c"]], [[4,5], ["a", "b"]]]
  hash = Hash[alist] # => {1=>["a"], 2=>["b"], 3=>["c"], [4, 5]=>["a", "b"]}


