kind=defined
names=new
visibility=public

--- new(data, options = Hash.new) -> CSV

このメソッドは CSV ファイルを読み込んだり、書き出したりするために
[[c:String]] か [[c:IO]] のインスタンスをラップします。

ラップされた文字列の先頭から読み込むことになります。
文字列に追記したい場合は [[m:CSV.generate]] を使用してください。
他の位置から処理したい場合はあらかじめそのように設定した [[c:StringIO]] を渡してください。

@param data [[c:String]] か [[c:IO]] のインスタンスを指定します。
            [[c:String]] のインスタンスを指定した場合、[[m:CSV#string]] を使用して
            後からデータを取り出すことが出来ます。

@param options CSV をパースするためのオプションをハッシュで指定します。
               パフォーマンス上の理由でインスタンスメソッドではオプションを上書きすることが
               出来ないので、上書きしたい場合は必ずここで上書きするようにしてください。

: :col_sep
  フィールドの区切り文字列を指定します。この文字列はパースする前にデータの
  エンコーディングに変換されます。
: :row_sep
  行区切りの文字列を指定します。:auto という特別な値をセットすることができます。
  :auto を指定した場合データから自動的に行区切りの文字列を見つけ出します。このとき
  データの先頭から次の "\r\n", "\n", "\r" の並びまでを読みます。
  A sequence will be selected even if it occurs in a quoted field, assuming that you
  would have the same line endings there.  If none of those sequences is
  found, +data+ is [[c:ARGF]], [[m:Kernel::STDIN]], [[m:Kernel::STDOUT]], or
  [[m:Kernel::STDERR]], or the stream is only  available for output, the default
  [[m:$INPUT_RECORD_SEPARATOR]]  ([[m:$/]]) is used.  Obviously,
  discovery takes a little time.  Set  manually if speed is important.  Also
  note that IO objects should be opened  in binary mode on Windows if this
  feature will be used as the  line-ending translation can cause
  problems with resetting the document  position to where it was before the
  read ahead. This String will be  transcoded into the data's Encoding  before parsing.
: :quote_char
  フィールドをクオートする文字を指定します。長さ 1 の文字列でなければなりません。
  正しいダブルクオートではなく間違ったシングルクオートを使用しているアプリケーション
  で便利です。
  CSV will always consider a double  sequence this character to be an
  escaped quote.
  この文字列はパースする前にデータのエンコーディングに変換されます。
: :field_size_limit
  This is a maximum size CSV will read  ahead looking for the closing quote
  for a field.  (In truth, it reads to  the first line ending beyond this
  size.)  If a quote cannot be found  within the limit CSV will raise a
  MalformedCSVError, assuming the data  is faulty.  You can use this limit to
  prevent what are effectively DoS  attacks on the parser.  However, this
  limit can cause a legitimate parse to  fail and thus is set to +nil+, or off,
  by default.
: :converters
  [[m:CSV::Converters]] から取り出した名前の配列です。変換器が一つだけ
  の場合は配列に格納する必要はありません。
  全ての組み込みの変換器は、値を変換する前に UTF-8 にエンコーディング変
  換を試みます。エンコーディング変換に失敗した場合はフィールドは変換さ
  れません。
: :unconverted_fields
  真をセットすると [[m:CSV::Row#unconverted_fields]] という変換前のフィー
  ルドを返すメソッドを全ての行に追加します。headers オプションによって
  追加したヘッダはフィールドではないので
  [[m:CSV::Row#unconverted_fields]] は空の配列を返します。
: :headers
  :first_row というシンボルか真を指定すると、CSV ファイルの一行目をヘッダとして扱います。
  配列を指定するとそれをヘッダとして扱います。文字列を指定すると [[m:CSV.parse_line]] を
  使用してパースした結果をヘッダとして扱います。このとき、:col_sep, :row_sep, :quote_char
  はこのインスタンスと同じものを使用します。この設定は [[m:CSV#shift]]
  の返り値を配列のかわりに [[c:CSV::Row]] のインスタンスに変更します。
  [[m:CSV#read]] の返り値を配列の配列のかわりに [[c:CSV::Table]] のイン
  スタンスに変更します。
: :return_headers
  偽を指定すると、ヘッダ行を無視します。真を指定すると、ヘッダ行を
  ヘッダと値が同一の [[c:CSV::Row]] のインスタンスとして返します。
: :write_headers
  真を指定して :headers にも値をセットすると、ヘッダを出力します。
: :header_converters
  :converters オプションに似ていますが、ヘッダ専用の変換器を定義します。
  全ての組み込みの変換器は、値を変換する前に UTF-8 にエンコーディング変
  換を試みます。エンコーディング変換に失敗した場合はヘッダは変換されま
  せん。
: :skip_blanks
  真を指定すると、空行を読み飛ばします。
: :force_quotes
  真を指定すると、全てのフィールドを作成時にクオートします。

@raise CSV::MalformedCSVError 不正な CSV をパースしようとしたときに発生します。

@see [[m:CSV::DEFAULT_OPTIONS]], [[m:CSV.open]]

