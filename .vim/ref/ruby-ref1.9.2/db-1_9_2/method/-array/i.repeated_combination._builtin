kind=defined
names=repeated_combination
visibility=public

--- repeated_combination(n) { |c| block } -> Array
--- repeated_combination(n)               -> Enumerator

When invoked with a block, yields all repeated combinations of
length <i>n</i> of elements from <i>ary</i> and then returns
<i>ary</i> itself.
The implementation makes no guarantees about the order in which
the repeated combinations are yielded.

When invoked without a block, returns an enumerator object instead.

Examples:

    a = [1, 2, 3]
    a.repeated_combination(1).to_a  #=> [[1], [2], [3]]
    a.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]
    a.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],
                                    #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]
    a.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],
                                    #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],
                                    #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]
    a.repeated_combination(0).to_a  #=> [[]] # one combination of length 0

@see [[m:Array#repeated_permutation]], [[m:Array#combination]]
