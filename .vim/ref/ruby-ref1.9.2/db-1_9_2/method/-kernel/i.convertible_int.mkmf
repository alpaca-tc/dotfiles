kind=added
names=convertible_int
visibility=private 

--- convertible_int(type, headers = nil, opts = nil)
--- convertible_int(type, headers = nil, opts = nil){ ... }

 Returns the convertible integer type of the given +type+.  You may
 optionally specify additional +headers+ to search in for the +type+.
 _Convertible_ means actually same type, or typedefed from same type.
 
 If the +type+ is a integer type and _convertible_ type is found,
 following macros are passed as preprocessor constants to the
 compiler using the +type+ name, in uppercase.
 
 * 'TYPEOF_', followed by the +type+ name, followed by '=X' where 'X'
   is the found _convertible_ type name.  * 'TYP2NUM' and 'NUM2TYP,
   where 'TYP' is the +type+ name in uppercase with replacing '_t'
   suffix with 'T', followed by '=X' where 'X' is the macro name to
   convert +type+ to +Integer+ object, and vice versa.
 
 For example, if foobar_t is defined as unsigned long, then
 convertible_int("foobar_t") would return "unsigned long", and define
 macros:
 
   #define TYPEOF_FOOBAR_T unsigned long
   #define FOOBART2NUM ULONG2NUM
   #define NUM2FOOBART NUM2ULONG



