--- Dir[pattern]
--- Dir.glob(pattern)
--- Dir.glob(pattern) {|file| ...}
--- Dir.glob(pattern[, flags])                  ruby 1.7 feature
--- Dir.glob(pattern[, flags]) {|file| ...}     ruby 1.7 feature

    ワイルドカードの展開を行った結果を文字列の配列として返します。
    ブロックが与えられたときはワイルドカードにマッチしたファイルを
    引数にそのブロックを 1 つずつ評価して nil を返します

    パターンを空白(スペース、タブ、改行)あるいは "\0" で区切って 1 度
    に複数のパターンを指定することもできます。

        p Dir.glob("f* b*")
        => ["foo", "bar"]

    ワイルドカードには以下のものがあります。

    * *

      空文字列を含む任意の文字列と一致します。
    * ?

      任意の一文字と一致します。
    * [ ]

      鈎括弧内のいずれかの文字と一致します。- でつな
      がれた文字は範囲を表します。鈎括弧の中の最初の文字が
      ^ である時には含まれない文字と一致します。
      (^ の代わりに ! も同じ意味で使えます。)

    * { }

      コンマで区切られた文字列の組合せに展開します。例えば、
      foo{a,b,c}はfooa, foob,
      foocに展開されそれぞれに対してマッチ判定を行います。

      括弧は入れ子にすることができます。例えば、
      {foo,bar{foo,bar}} は foo, barfoo, barbar
      のそれぞれにマッチします。

    * **/

      ワイルドカード */ の0回以上の繰り返しを意味し、
      ディレクトリを再帰的にたどってマッチを行います。
      例えば,
      foo/**/bar は foo/bar, foo/*/bar,
      foo/*/*/bar ... (以下無限に続く)に対してそれぞれ
      マッチ判定を行います。

    ruby 1.7 feature:
    ワイルドカードはバックスラッシュによりエスケープすることがで
    きます。(ダブルクォートの文字列中では 2 重にエスケープする必要がある
    ことに注意してください)
    また、空白類に特殊な意味はなくなりました("\0"の効果は残っています)。
    1.6と同様の処理を期待する場合は、不要な空白はString#chompなどで
    適切に除去するか、gsub(/[ \t\n]/, "\0")で変換しておく必要が
    あります。

    ruby 1.7 feature:
    省略可能な第二引数には File.fnmatch に指定できるフラグ
    と同様のフラグを指定できます。このフラグを指定することでマッチの挙
    動を変更することができます。

