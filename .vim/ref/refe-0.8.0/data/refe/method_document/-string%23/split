--- split([sep[, limit]])

    文字列を sep で指定されたパターンによって分割して配列に格納
    します。sep が 1 バイトの文字列ならその文字を区切りとして分
    割します。2 バイト以上の文字列なら正規表現にコンパイルされます。
    sep が nil であるか、引数を省略した場合には変数
    $; の値を区切り文字として使用します。

    sep が 1 つの空白(' ')の時、または $; が使用され
    る場合でその値が nil の時には先頭の空白を除いて空白で分割を行
    います。

      p "   a \t  b \n  c".split(/\s+/) # => ["", "a", "b", "c"]
      p "   a \t  b \n  c".split        # => ["a", "b", "c"] ($;のデフォルト値はnilです)
      p "   a \t  b \n  c".split(' ')   # => ["a", "b", "c"]

    limit が省略された時(または 0 の時)には配列末尾の空文字列は
    取り除かれます。
    limit が指定されて、その値が負でない時には最大 limit 
    個のフィールドに分割します。
    limit の値が負の時には無限に大きい limit が指定された
    かのように分割します。

      # limit 省略時は、0 を指定したのと同じ。配列末尾の空文字列は取り除かれる
      p "a,b,c,,,".split(/,/)      # => ["a", "b", "c"]
      p "a,b,c,,,".split(/,/, 0)   # => ["a", "b", "c"]

      # limit が 最大のフィールド数に満たない場合は最後の要素に残りすべてが入る
      p "a,b,c,,,".split(/,/, 3)   # => ["a", "b", "c,,,"]

      # limit が -1 や最大のフィールド数以上の場合は最大のフィールド数を指定したのと同じ
      p "a,b,c,,,".split(/,/, 6)     # => ["a", "b", "c", "", "", ""]
      p "a,b,c,,,".split(/,/, -1)    # => ["a", "b", "c", "", "", ""]
      p "a,b,c,,,".split(/,/, 100)   # => ["a", "b", "c", "", "", ""]

    sep で指定されたパターンが空文字列とマッチする場合は文字列が 
    1 文字ずつに分割されます($KCODE が適切に設定されて
    いれば漢字を認識して文字単位で分割します)。例えば:

      p 'hi there'.split(/ */).join(':')
      # => "h:i:t:h:e:r:e"

    sep で指定されたパターンに括弧が含まれている場合には、各括弧
    のパターンにマッチした文字列も配列に含まれます。括弧が複数ある場合
    は、マッチしたものだけが配列に含まれます。例えば:

      p '1-10,20'.split(/([-,])/)   # => ["1", "-", "10", ",", "20"]
      p '1-10,20'.split(/(-)|(,)/)  # => ["1", "-", "10", ",", "20"]

    ruby 1.7 feature: 1.6 以前は、sep が 2 文字以上の文字
    列の場合、その文字列を正規表現にコンパイルしていました。1.7 以降は、
    その文字列そのものがパターンになります。

