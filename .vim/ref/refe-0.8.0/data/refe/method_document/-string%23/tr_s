--- tr_s(search, replace)
--- tr_s!(search, replace)

    文字列の中に search 文字列に含まれる文字が存在したら、
    replace 文字列の対応する文字に置き換えます。さらに、
    置換した部分内に同一の文字の並びがあったらそれを 1 文字に圧縮します。

    search の形式は tr(1) [manual page] と同じです。つまり、
    `a-c' は a から c を意味し、"^0-9" のように
    文字列の先頭が `^' の場合は指定文字以外が置換の対象になります。

    replace に対しても `-' による範囲指定が可能です。

        p "foo".tr_s('a-z', 'A-Z')
        => "FO"

    `-' は文字列の両端にない場合にだけ範囲指定の意味になります。
    同様に、`^' もその効果は文字列の先頭にあるときだけです。また、
    `-', `^', `\' はバックスラッシュ(`\')によ
    りエスケープすることができます。

    replace の範囲が search の範囲よりも小さい場合、
    replace の最後の文字が無限に続くものとして扱われます。

    tr_s は置換後の文字列を生成して返します。
    tr_s! は self を変更して返しますが、置換が起こら
    なかった場合は nil を返します。

    ((*注意*)): このメソッドと tr(search, replace).squeeze(replace)
    とでは挙動が異なります。tr と squeeze の組みあわせが置換後の文字列全体を
    squeeze の対象にするのに対して、tr_s は((*置換された部分だけ*))を
    squeeze の対象とします。

              p "foo".tr_s("o", "f")              # => "ff"
              p "foo".tr("o", "f").squeeze("f")   # => "f"

