--- self[nth]

    nth 番目のバイトを整数(文字コード)で返します(逆に文字コード
    から文字列を得るには Integer#chr [Integer/chr] を使います)。
    nth が負の場合は文字列の末尾から数えます。

    nth が範囲外を指す場合は nil を返します。

    例:
        p 'bar'[2]        # => 114
        p 'bar'[2] == ?r  # => true
        p 'bar'[-1]       # => 114

        p 'bar'[3]        # => nil
        p 'bar'[-4]       # => nil

--- self[nth, len]

    nth バイト番目から長さ len バイトの部分文字列を返しま
    す。nth が負の場合は文字列の末尾から数えます。

    nth が範囲外を指す場合は nil を返します。

--- self[substr]

    self が substr を含む場合、一致した文字列を生成して
    返します。
    substr を含まなければ nil を返します。

        substr = "bar"
        result = "foobar"[substr]
        p result                  # => "bar"
        p substr.equal? result    # => true (ruby 1.7 feature:1.7.2 以降は false)

--- self[regexp]
--- self[regexp, nth]   ruby 1.7 feature

    regexp にマッチする最初の部分文字列を返します。組み込み変数 
    $~ にマッチに関する情報が設定されます。

    regexp にマッチしない場合 nil を返します。

       p "foobar"[/bar/]  # => "bar"
       p $~.begin(0)      # => 3

    ruby 1.7 feature:
    引数 nth を指定した場合は、regexp の、nth 番目の
    括弧にマッチする最初の部分文字列を返します。nth が 0 の場合
    は、マッチした部分文字列全体を返します。マッチしなかった場合や 
    nth に対応する括弧がなければ nil を返します。

       p "foobar"[/bar/]   # => "bar"
       p $~.begin(0)       # => 3

       p "def getcnt(line)"[ /def\s*(\w+)/, 1 ]   # => "getcnt"

--- self[first..last]

    インデックス first から last までのバイトを含む
    新しい文字列を作成して返します。

        .
          0   1   2   3   4   5   (インデックス)
         -6  -5  -4  -3  -2  -1   (負のインデックス)
        | a | b | c | d | e | f |
        |<--------->|                'abcdef'[0..2]  # => 'abc'
                        |<----->|    'abcdef'[4..5]  # => 'ef'
                |<--------->|        'abcdef'[2..4]  # => 'cde'

    last が文字列の長さ以上のときは(文字列の長さ - 1)を指定
    したものとみなされます。

    first が 0 より小さいか文字列の長さより大きいとき、
    および first > last + 1 であるときは nil を
    返します。ただし first および last のどちらか
    または両方が負の数のときは一度だけ文字列の長さを足して
    再試行します。

    例:
        'abcd'[ 2 ..  1] # => ""
        'abcd'[ 2 ..  2] # => "c"
        'abcd'[ 2 ..  3] # => "cd"
        'abcd'[ 2 ..  4] # => "cd"

        'abcd'[ 2 .. -1] # => "cd"   # str[f..-1] は「f 文字目から
        'abcd'[ 2 .. -2] # => "c"    # 文字列の最後まで」を表す慣用句

        'abcd'[ 1 ..  2] # => "bc"
        'abcd'[ 2 ..  2] # =>  "c"
        'abcd'[ 3 ..  2] # =>   ""
        'abcd'[ 4 ..  2] # =>  nil

        'abcd'[-3 ..  2] # =>  "bc"
        'abcd'[-4 ..  2] # => "abc"
        'abcd'[-5 ..  2] # =>  nil

--- self[first...last]

    文字列先頭を 0 番目の隙間、末尾を self.length 番目の隙間として、
    first 番目の隙間から last 番目の隙間までに含まれる
    バイト列を含んだ新しい文字列を作成して返します。

        文字列と「隙間」の模式図

         0   1   2   3   4   5   6  (隙間番号)
        -6  -5  -4  -3  -2  -1      (負の隙間番号)
         | a | b | c | d | e | f |
         |<--------->|                'abcdef'[0...3]  # => 'abc'
                         |<----->|    'abcdef'[4...6]  # => 'ef'
                 |<--------->|        'abcdef'[2...5]  # => 'cde'

    last が文字列の長さよりも大きいときは文字列の長さを
    指定したものとみなされます。

    first が 0 より小さいか文字列の長さより大きいとき、
    および first > last であるときは nil を返します。
    ただし first と last のどちらかまたは両方が負の数
    であるときは一度だけ文字列の長さを足して再試行します。

    例:
        'abcd'[ 2 ... 3] # => "c"
        'abcd'[ 2 ... 4] # => "cd"
        'abcd'[ 2 ... 5] # => "cd"

        'abcd'[ 1 ... 2] # => "b"
        'abcd'[ 2 ... 2] # => ""
        'abcd'[ 3 ... 2] # => nil

        'abcd'[-3 ... 2] # => "b"
        'abcd'[-4 ... 2] # => "ab"
        'abcd'[-5 ... 2] # => nil

