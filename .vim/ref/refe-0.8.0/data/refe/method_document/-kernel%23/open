--- open(file[, mode[, perm]])
--- open(file[, mode[, perm]]) {|io| ... }

    file をオープンして、File オブジェクトを返します。
    mode は、以下の文字列か整数(File::Constants モジュール
    の定数の論理和)を指定します。省略時は "r" が指定されたもの
    とみなします。

    * "r", RDONLY: ファイルを読み込みモードでオープンします。

    * "w", WRONLY|CREAT|TRUNC: ファイルを書き込みモードでオー
      プンします。オープン時にファイルがすでに存在していれば
      その内容を空にします。

    * "a", WRONLY|CREAT|APPEND: ファイルを書き込みモードでオー
      プンします。出力は((*常に*))ファイルの末尾に追加されま
      す
      

    "+" があれば、ファイルは読み書き両用モード(RDWR)でオープ
    ンされます。

    * "r+": ファイルの読み書き位置は先頭にセットされます。

    * "w+": "r+" と同じですが、オープン時にファイルがすでに
      存在していればその内容を空にします。

    * "a+": "r+" と同じですが、オープン時にファイルがすでに
      存在していれば読み書き位置がファイルの末尾にセットされ
      ます。

    これらのいずれに対しても "b" フラグを("r+b"のように)つけることがで
    きます(整数なら File::BINARY)。この場合、バイナリモードでオープン
    します(ただし、システムがテキスト／バイナリでファイルを区別する場
    合に限ります)

    第 3 引数 perm は open(2) [manual page] の第 3 引数と同
    じく、CREAT 時のファイルのアクセス権を整数で指定します。
    この引数は、第 2 引数が数値形式でなければ無視されます。
    デフォルトは 0666 です。

    ファイル名が `|' で始まる時には続く文字列をコマンドとして起
    動し、コマンドの標準入出力に対してパイプラインを生成します

    ファイル名が "|-" である時、open は Ruby の子プロセス
    を生成し、その子プロセスとの間のパイプ(IOオブジェクト)を返し
    ます。(このときの動作は、IO.popen と同じです。
    File.open にはパイプラインを生成する機能はありません)。

    ((*注意*)): Perlと異なりコマンドは常に `|' で始まります。

    open がブロックとともに呼び出された時、open はファイル
    をオープンしてブロックを実行し、ブロックの実行が終了するとファイル
    をクローズします。この場合はブロックを評価した結果を返します。つま
    り、以下のようになります。

      open(path, mode) do |f|
         ...
      end

      # 上記とほぼ同じコード
      f = open(path, mode)
      begin
         ...
      ensure
        f.close
      end

