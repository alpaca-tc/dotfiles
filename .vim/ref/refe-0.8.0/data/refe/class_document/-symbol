* sym = Symbol.new(addr, type = nil, name = nil)
#   * creates the Symbol object sym with the type type if type is not nil. addr
#     is the address where the function is allocated. If type is nil, it returns
#     a DataPtr object.

  * type が nil でないなら 型 type の Symbol オブジェクト sym を作成する。
    関数が割り当てられているなら addr はそのアドレス。type が nil なら
    DataPtr オブジェクトを返す。

* Symbol::char2type(char)
#   * takes a character char that represents a type and returns the type
#     specifier of the C language.
  * 型に相当する文字 char を取り、C 言語の型修飾を返す。

* str = Symbol#proto()
#   * returns the function prototype.
  * 関数のプロトタイプを返す。

* str = Symbol#name()
#   * Returns the function name.
  * 関数名を返す。

* str = Symbol#cproto(),
  str = Symbol#to_s()
#   * returns the prototype of the C language.
  * C 言語形式のプロトタイプを返す。

* str = Symbol#inspect()
#   * returns the inspectable string.
  * 人間が読みやすい形式の文字列を返す(訳注:意訳)。

* r,rs = Symbol#call(arg1,arg2,...,argN),
  r,rs = Symbol#[](arg1,arg2,...,argN)
#   * calls the function with parameters arg1, arg2, ..., argN. and the result
#     consists of the return value r and parameters rs. rs is an array.
  * パラメータ arg1, arg2, ... argN で関数を呼び出す。結果は、戻り値 r 
    やパラメータrs からなる。rs は配列。

* ptr = Symbol#to_ptr
#   * returns the corresponding PtrData object ptr.
  * 対応する PtrData オブジェクト ptr を返す。