* handle = Handle.new(lib){|handle| ... }
#   * opens a library lib and returns a Handle object handle. if a block is
#     given, the handle is automatically closed as the block ends.

  * ライブラリ lib をオープンし、Handle オブジェクト handle を返す。ブ
    ロックを指定すれば、(訳注: オープンしたハンドルをブロック引数に渡
    してブロックを実行する)ハンドルはブロックの終りで自動的にクローズ
    される。

* Handle#close
#   * closes the handle opened by the above Handle.new(lib).

  * 上記の Handle.new(lib) によってオープンされたハンドルをクローズする。

* sym = Handle#sym(func, prototype = "0"),
  sym = Handle#[func, prototype = nil]

#   * obtains the pointer to a function called func and returns a Symbol object
#     or a DataPtr object. prototype is a string which consists of type
#     specifiers, it indicates the function's prototype. see also the section
#     `Type specifiers'.

  * 関数 func (訳注:やグローバル変数？)へのポインタを取得し、Symbol オ
    ブジェクトや DataPtr オブジェクトを返す。prototype は型修飾からな
    る文字列で関数のプロトタイプを示す。Type specifiers も
    参照。