執筆者募集



スレッドの同期機構の一つである状態変数を実現するクラス。
ConditionVariable オブジェクトはスレッドが待ち合わせを行う条
件をオブジェクト化したものです。

    mutex = Mutex.new
    cv = ConditionVariable.new

    Thread.start {
        mutex.synchronize {
          ...
          while (条件が満たされない)
            cv.wait(m)
          end
          ...
        }
    }
あるスレッドで上のように条件が満たされるまで wait メソッドで
スレッドを止めて、他のスレッドで

    Thread.start {
        mutex.synchronize {
          # 上の条件を満たすための操作
          cv.signal
        }
    }

として、signal メソッドで wait を実行しているスレッドに対し
て条件が成立したことを通知するのが典型的な使用例です。
以下は 「Pthread プログラミング」にあった ConditionVariable 
の例をRuby で書いてみた。なぜか最後にデッドロックする。
  require 'thread'

  count_lock = Mutex.new
  count_hit_threshold = ConditionVariable.new
  count = 0
  COUNT_THRESHOLD = 10

  inc_count = proc {
    loop {
      count_lock.synchronize {
          count += 1
          p [Thread.current, count]
          if count >= COUNT_THRESHOLD
            count_hit_threshold.signal
            Thread.exit
          end
      }
    }
  }

  ths = []
  ths << Thread.new(&inc_count)
  ths << Thread.new(&inc_count)
  ths << Thread.new {
    loop {
      count_lock.synchronize {
          if count > 0
            count -= 1
          end
          p [Thread.current, count]
      }
    }
  }
  ths << Thread.new {
    cond_lock.synchronize {
      while (count < COUNT_THRESHOLD)
        count_hit_threshold.wait(count_lock)
        p [Thread.current, count, 'wait']
      end
    }
  }

  ths.each {|t|
    t.join
  }