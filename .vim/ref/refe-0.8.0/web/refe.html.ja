<h1>ReFe</h1>

<p>$Id: refe.html.ja,v 1.4 2003/08/05 13:29:15 aamine Exp $</p>

<table summary="package descriptor.">
<tr><th>最新版</th><td>0.7.2</td></tr>
<tr><th>種別</th><td>リファレンスマニュアル検索ツール</td></tr>
<tr><th>形式</th><td>Rubyプログラム</td></tr>
<tr><th>必要環境</th><td>ruby (&gt;=1.6)</td></tr>
<tr><th>ライセンス</th><td>LGPL</td></tr>
</table>
<ul>
<li><a href="/archive/refe/refe-0.7.2-withdocsrc.tar.gz">基本セット + リファレンス + Rubyソースコード (800KB)</a></li>
<li><a href="/archive/refe/refe-0.7.2-withdoc.tar.gz">基本セット + リファレンス (400KB)</a></li>
<li><a href="/archive/refe/refe-0.7.2.tar.gz">基本セット (100KB)</a></li>
<li><a href="/archive/refe/">旧バージョンのリスト</a></li>
</ul>
<p>
クラス名とメソッド名から Ruby のリファレンスマニュアルのエントリを引く、
コマンドライン用のツールです。読みは「りふぇ」。
<a href="http://www.ruby-lang.org/en/raa-list.rhtml?name=ri">ri</a>
をパクって日本語・RD に対応させたものです。
</p>
<pre>
# 最も簡単な例

~ % refe String concat
String#concat
--- self &lt;&lt; other
--- concat(other)

    文字列 other の内容を self に連結します。
    other が 0 から 255 の範囲の Fixnum である場合は
    その 1 バイトを末尾に追加します。

    self を返します。

</pre>
<p>
クラス名やメソッド名の補完機能があるので長いメソッド名を
全部入力する必要がありません。
例えば String#gsub! なら refe s gsu で検索できます。
</p>
<p>
またオプションとして、Ruby の拡張ライブラリ API リファレンスや
ruby の関数を引くこともできます。たとえば refe -e data get で
Data_Get_Struct のマニュアルを見ることができます。
</p>

<h2>実行例</h2>

<pre>
### メソッドのドキュメントを検索
$ refe String          String のメソッド一覧を表示
$ refe each_with_index Enumerable#each_with_index の説明を表示
$ refe String#index    String#index の説明を表示
$ refe s#ind           String#index の説明を表示
$ refe inde            Array#index String#index など、一致する候補を表示
$ refe s ind           String#index の説明を表示
$ refe st g!           String#gsub! の説明を表示

### Ruby C API のドキュメントを検索
$ refe -e r d class          rb_define_class() の説明を表示
$ refe -e _s args            rb_scan_args() の説明を表示

### メソッドの実体の関数を検索 (メソッド名から)
$ refe -c s g!               rb_str_gsub_bang() の内容を表示

### メソッドの実体の関数を検索 (関数名から)
$ refe -C rb_str_gsub_bang   rb_str_gsub_bang() の内容を表示
$ refe -C r e s w            下線でくぎられた単語ごとに補完可能！
			     → rb_eval_string_wrap()
$ refe -C r eval             最後の単語が完全一致したら残りは切り捨て
			     → rb_eval()

### sprintf フォーマットなども検索できる
$ refe man.sprintf
</pre>
