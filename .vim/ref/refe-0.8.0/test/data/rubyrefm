= Object

全てのクラスのスーパークラス。
オブジェクトの一般的な振舞いを定義します。

== インクルードしているモジュール:

* ((<Kernel>))

== メソッド:

--- m -- obsolete

    obsolete method

--- getstr  ->  String

    with type

--- - self

    unary minus

--- self - other

    binary minus

--- self == other

    (({self})) と ((|other|)) が等しいかどうか判定します。
    デフォルトでは (({equal?})) と同じ効果です。

    このメソッドは各クラスの性質に合わせて再定義するべきです。

--- self =~ other

    古いタイプの正規表現比較 (({obj =~ /RE/})) をサポートす
    るためのメソッドです。デフォルトは 
    ((<Object#==|Object/==>)) と同じ働きをします。
    ((-あらい 2002-01-13: 本当は違う ((<ruby-bugs-ja:PR#178>))-))

--- self === other

    このメソッドは ((<制御構造/case>)) 
    文での比較に用いられます。デフォルトは
    ((<Object#==|Object/==>)) と同じ働きをしますが、
    この挙動はサブクラスで所属性のチェックを実現するため
    適宜再定義されます。

--- become(obj)         ((<ruby 1.7 feature>))

    (({self})) の内容を ((|obj|)) ですり替えます。((|obj|)) は、
    (({self})) と同じクラスのインスタンスである必要があります。そうで
    なければ例外 ((<TypeError>)) が発生します。

        class Foo
        end

        p obj = Foo.new
        obj.instance_eval { @v = 1 }
        p obj.become(Foo.new)
        obj.instance_eval { p @v }

        => ruby 1.7.3 (2002-08-30) [i586-linux]
           #<Foo:0x401a8910>
           -:6: [BUG] Segmentation fault
           ruby 1.7.3 (2002-08-30) [i586-linux]

    (({self})) を返します。

--- class
--- type

    レシーバのクラスを返します。

    ((<ruby 1.7 feature>)): type は、version 1.7 では、((<obsolete>)) 
    となりました。

--- clone
--- dup

    オブジェクトの複製を作ります。
    (({clone})) は (({freeze}))、(({taint}))、特異メソッドなどの情報も
    含めた完全な複製を、(({dup})) はオブジェクトの内容のみの複製を
    作ります。

    (({clone})) や (({dup})) は「浅い(shallow)」コピーであることに注意
    してください。オブジェクト自身を複製するだけで、オブジェクトの指し
    ている先(たとえば配列の要素など)までは複製しません。

    また複製したオブジェクトに対して

      obj.equal?(obj.clone)

    は一般に成立しませんが
    ((-version 1.6 では、0.equal?(0.clone) が成立してしまいます-))、

      obj == obj.clone

    は多くの場合に成立します。

    (({true})), (({false})), (({nil})), ((<Symbol>)) オブジェクトなど
    を複製しようとすると例外 ((<TypeError>)) が発生します。

    ((<ruby 1.7 feature>)):
    version 1.7 では、((<Numeric>)) オブジェクトなど immutable(内容不
    変)であるオブジェクトを複製しようとすると例外 ((<TypeError>)) が発
    生します。

--- display([out=$defout])

    オブジェクトを ((|out|)) に出力します。以下のように定義できます。

      class Object
        def display(out=$defout)
          out.print to_s
        end
      end

--- eql?(other)

    二つのオブジェクトが等しいかどうかを判定します。このメソッドは 
    ((<Hash>)) でふたつのキーが等しいかどうかを判定するのに使われます。
    このメソッドを再定義した時には ((<Object#hash|Object/hash>)) メソッ
    ドも再定義しなければなりません。

    (({eql?})) のデフォルトの定義は (({equal?})) と同じくオブジェクト
    の同一性判定になっています。

--- eql?(other)

    (({other})) が (({self})) 自身の時、真を返します。
    このメソッドを再定義してはいけません。

--- frozen?

    オブジェクトの内容の変更が禁止されているときに真を返します。

--- hash

    オブジェクトのハッシュ値を返します。((<Hash>)) クラスで
    オブジェクトを格納するのに用いられています。(({A.eql?(B)})) が
    成立する時は必ず (({A.hash == B.hash})) も成立しなければ
    いけません。(({eql?}))を再定義した時には必ずこちらも合わせて
    再定義してください。

    デフォルトでは、((<Object#id|Object/id>)) と同じ値をハッシュ値とし
    ます。ただし、((<Fixnum>)), ((<Symbol>)), ((<String>)) だけは組込
    みのハッシュ関数が使用されます(これを変えることはできません)。

    hash を定義する場合は、一様に分布する任意の整数を返すようにします
    (現在の実装では、返り値の内部表現を 65439 (1.7 なら 536870917)
    ((-あらい 2002-01-13: 素数じゃなくていいのかな？-))
    で割った余りをハッシュ値とします((-あらい 2002-01-13: 本当はこれを
    更に内部のテーブルサイズで割った余りが使用されます。
    あらい 2002-02-24: これは素数になりました((<rubyist:1020>))-))。

== プライベートメソッド:

--- initialize

    ユーザ定義クラスのオブジェクト初期化メソッド。このメソッドは 
    ((<Class#new|Class/new>)) から新しく生成されたオブジェクトの初期化
    のために呼び出されます。デフォルトの動作ではなにもしません。サブク
    ラスではこのメソッドを必要に応じて再定義されることが期待されていま
    す。(({initialize})) には ((<Class#new|Class/new>)) に与えられた引
    数がそのまま渡されます。

    また (({initialize})) という名前を持つメソッドは自動的に private に
    設定されます。

