" Δ~~~~Δ
" ξ・ェ・ξ  < I am @alpaca-tc
" ξ     ξ
" ξ     ξ
" ξ     “~～~～~〜〇
" ξ                ξ
" ξ ξξ~～~~〜~ξ ξ
" ξ_ξξ_ξξ_ξξ_ξ  =з =з =з
augroup MyAutoCmd
  autocmd!
augroup END

" ----------------------------------------
" Utils {{{
function! s:current_git() "{{{
  let vital = s:get_vital()

  if empty(vital)
    return ''
  else
    return vital.import('Prelude').path2project_directory(getcwd())
  endif
endfunction"}}}

function! s:get_vital() "{{{
  if !exists('s:V')
    let s:V = vital#dotfiles#new()
  endif

  return s:V
endfunction"}}}

function! s:filetype() "{{{
  return get(split(&filetype, '\.'), 0, '')
endfunction"}}}
function! s:complement_delimiter_of_directory(path) "{{{
  return isdirectory(a:path) ? a:path . '/' : a:path
endfunction"}}}
function! s:on_init() "{{{
  return has('vim_starting') || !exists('s:loaded_vimrc')
endfunction"}}}
function! ToUpperCamel(string) "{{{
  let new_name = []
  for str in split(a:string, '_')
    let str = substitute(str, '^[a-z]\|_\zs[a-z]\C', '\=toupper(submatch(0))', 'g')
    call add(new_name, str)
  endfor

  return join(new_name, '')
endfunction"}}}
"}}}

" ----------------------------------------
" initialize "{{{
let g:my = {}

" user information
let g:my.conf = {
      \ 'initialize': 0
      \ }
let g:my.info = {
      \ 'author':  'Ishii Hiroyuki',
      \ 'email':   'alpaca-tc@alpaca.tc',
      \ 'github':  'alpaca-tc',
      \ 'twitter': 'alpaca_tc'
      \ }

let g:my.bin = {
      \ 'git' : executable('hub') ? 'hub' : 'git',
      \ }

let g:my.dir = {
      \ 'dein':        expand('~/.cache/dein'),
      \ 'ctrlp':       expand('~/.vim.trash/ctrlp'),
      \ 'memolist':    expand('~/.memolist'),
      \ 'snippets':    expand('~/.vim/snippet'),
      \ 'swap_dir':    expand('~/.cache/vim/vimswap'),
      \ 'trash_dir':   expand('~/.cache/vim/'),
      \ 'viminfo':     expand('~/.cache/vim/viminfo'),
      \ 'undodir':     expand('~/.cache/vim/undodir'),
      \ 'unite':       expand('~/.cache/vim/unite'),
      \ 'vimref':      expand('~/.cache/vim/vim-ref'),
      \ 'vimfiler':    expand('~/.cache/vim/vimfiler'),
      \ 'vimshell':    expand('~/.cache/vim/vimshell'),
      \ 'neocomplete': expand('~/.cache/vim/neocomplete'),
      \ 'vim-session': expand('~/.cache/vim/vimsession'),
      \ 'evernote':    expand('~/.cache/vim/evernote'),
      \ 'trash':       expand('~/.Trash'),
      \ }

let g:my.ft = {
      \ 'ruby_files':      ['ruby', 'Gemfile', 'haml', 'eruby', 'yaml', 'ruby.rspec', 'slim'],
      \ 'js_files':        ['javascript', 'coffeescript', 'node', 'typescript', 'vue'],
      \ 'python_files':    ['python', 'python*'],
      \ 'scala_files':     ['scala'],
      \ 'sh_files':        ['sh'],
      \ 'php_files':       ['php', 'phtml'],
      \ 'c_files':         ['c', 'cpp'],
      \ 'style_files':     ['css', 'scss', 'sass'],
      \ 'markup_files':    ['html', 'haml', 'eruby', 'php', 'xhtml', 'liquid', 'slim'],
      \ 'english_files':   ['markdown', 'help', 'text'],
      \ 'program_files':   ['ruby', 'php', 'python', 'eruby', 'vim', 'javascript', 'coffee', 'scala', 'java', 'go', 'cpp', 'haml', 'rust', 'c', 'slim', 'go'],
      \ 'ignore_patterns': ['vimfiler', 'unite'],
      \ }
" }}}

" ----------------------------------------
" basic settings "{{{
set nocompatible
let &directory = g:my.dir.swap_dir
set backspace=indent,eol,start
set clipboard+=unnamed
set formatoptions+=lcqmM
set modelines=1
set signcolumn=no

if !has('nvim')
  " set ttymouse=xterm2
endif
execute 'set viminfo+=n' . g:my.dir.viminfo . '/.viminfo'
" set nomore
" set nobackup
set nowritebackup
" set norestorescreen
" set noshowmode
" set viminfo='1000,<800,s300,\"1000,f1,:1000,/1000
set visualbell t_vb=
" set helplang=en
set timeout timeoutlen=400 ttimeoutlen=70 updatetime=600
set langmenu=en_us.UTF-8
language en_US.UTF-8

set undofile
let &undodir = g:my.dir.undodir

nnoremap <Space><Space>s :<C-U>source ~/.vim/vimrc<CR>
nnoremap <Space><Space>v :<C-U>tabnew ~/.vim/vimrc<CR>

if filereadable($HOME . '/.secret.vim')
  source $HOME/.secret.vim
endif
"}}}

" ----------------------------------------
" dein.vim {{{
let s:dein_repo_dir = g:my.dir.dein . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(g:my.dir.dein)
    execute '!git clone https://github.com/Shougo/dein.vim' g:my.dir.dein
  endif
  execute 'set runtimepath^=' . fnamemodify(g:my.dir.dein, ':p')
endif

let s:lazy_toml = '~/.vim/dein/dein_lazy.toml'

let s:vimproc_dir = $HOME . "/.cache/dein/repos/github.com/Shougo/vimproc"
if isdirectory(s:vimproc_dir)
  execute 'set runtimepath+=' . s:vimproc_dir
endif

execute 'set runtimepath+=' . $HOME . '/.vim'

if dein#load_state(s:lazy_toml)
  call dein#begin(g:my.dir.dein)
  call dein#load_toml(s:lazy_toml, { 'lazy': 1 })

  call dein#end()
  call dein#save_state()
endif

" if dein#check_install()
"   call dein#install()
" endif
"}}}

" ----------------------------------------
" Editing"{{{
set autoread
set nostartofline
set hidden
set nrformats-=octal
set nrformats+=alpha
set textwidth=0
" set gdefault
" set splitright
" set splitbelow
set previewheight=10
set helpheight=14
set matchtime=1
set winheight=5

if has('multi_byte_ime')
  set iminsert=0 imsearch=0
endif

function! s:join_sentence() abort range
  let firstline = a:firstline
  let lastline = a:lastline

  let lines = getline(firstline, lastline)
  let new_lines = []
  let is_prev_sentence = v:false

  for i in range(0, len(lines) - 1)
    let line = lines[i]
    let without_break = substitute(line, "[\r\n\t]", "", "g")
    let is_sentence = matchstr(without_break, "\S") != ''

    if is_prev_sentence
      let last_line = new_lines[len(new_lines) - 1]
      let last_line .= substitute(without_break, "^ *", "", "g")
      let new_lines[len(new_lines) - 1] = last_line
    else
      if len(new_lines) != 0
        call add(new_lines, "")
      endif

      call add(new_lines, line)
    endif

    let is_prev_sentence = is_sentence
  endfor

  let delete_command = firstline . ',' . lastline . 'delete'
  silent execute delete_command

  silent! call append(firstline - 1, new_lines)
endfunction

xnoremap < <gv
xnoremap m :sort<CR>
xnoremap > >gv
xnoremap gj :call <SID>join_sentence()<CR>

nnoremap <silent><Space><Space><Space>q :qall!<CR>
nnoremap <silent><Space><Space>w :wall<CR>
nnoremap <silent><Space><Space>q :qall<CR>
nnoremap <silent><Space>q :q<CR>
nnoremap <silent><Space>w :wq<CR>

nnoremap <silent><C-L> :call <SID>redraw_and_doautocmd()<CR>
function! s:redraw_and_doautocmd() "{{{
  silent doautocmd CursorHoldI <buffer>
  checktime
  redraw!
  checktime
endfunction"}}}

nnoremap ,f :setfiletype<Space>
cnoremap <C-L> <Right>

xnoremap H <Nop>
inoremap <C-@> <Nop>

augroup MyAutoCmd
  autocmd BufEnter * execute ':silent! lcd! ' . fnameescape(expand('%:p:h'))
augroup END
"}}}

" ----------------------------------------
" Searching {{{
set hlsearch
set ignorecase
set incsearch
set smartcase
set wrapscan

nnoremap <silent> n nvv
nnoremap <silent> N Nvv
"}}}

" ----------------------------------------
" Moving {{{
set whichwrap=b,s,h,l,~,<,>,[,]
set virtualedit+=block

inoremap <silent><C-A> <End>
inoremap <silent><C-L> <Right>
inoremap jj <Esc>
nnoremap $ g_
xnoremap $ g_
nnoremap <silent><Down> gj
nnoremap <silent><Up>   gk
nnoremap <silent>j gj
nnoremap <silent>k gk
nnoremap <silent>gj j
nnoremap <silent>gk k
nnoremap <silent>Y y$

augroup MyAutoCmd
  autocmd FileType qf wincmd J
augroup END
"}}}

" ----------------------------------------
" Tab {{{
nnoremap <silent>to  <C-W>T

for i in range(0, 9)
  execute 'nnoremap <silent>t'.i.'  :tabnext '.i'<CR>'
  execute 'nnoremap <silent>tm'.i.'  :tabmove '.i'<CR>'
endfor
unlet i
"}}}

" ----------------------------------------
" Encoding {{{
set ambiwidth=double
set encoding=utf-8
set fileencodings=utf-8,sjis,shift-jis,euc-jp,utf-16,ascii,ucs-bom,cp932,iso-2022-jp
set fileformat=unix
set fileformats=unix,dos,mac
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set termencoding=utf8
" }}}

" ----------------------------------------
" Indent {{{
set autoindent
set expandtab
set smartindent
set smarttab
set softtabstop=2
set shiftwidth=2
set tabstop=2
filetype indent on
"}}}

" ----------------------------------------
" Display {{{
" set noequalalways
" set cursorline
" set titlelen=95
set termguicolors
set pumheight=20
set breakat=\\;:,!?
set cdpath+=~
set cmdheight=2
set equalalways
set laststatus=2
set lazyredraw
set browsedir=buffer
set list
set listchars=tab:␣.,trail:›,extends:>,precedes:<
set fillchars=stl:\ ,stlnc:\ ,fold:\ ,diff:-
set matchpairs+=<:>
set number
set scrolloff=8
set noshowcmd
set showmatch
set showtabline=1
set spelllang=en,cjk
set nospell
set t_Co=256
set title
set ttyfast
set shortmess=aTI

set nofoldenable
set foldmethod=marker
set foldlevelstart=0
set foldminlines=2
set foldnestmax=2

highlight ColorColumn guibg=#012345

augroup MyAutoCmd
  autocmd BufEnter * set conceallevel=2 concealcursor=incv colorcolumn=81
augroup END

colorscheme iceberg
filetype plugin on
syntax on
"}}}

" ----------------------------------------
" Dictionary {{{
function! s:set_dictionary_automatically() "{{{
  let filetype = &filetype

  if empty(filetype) || count(g:my.ft.ignore_patterns, filetype) > 0
    return
  endif

  let dict_name = split(filetype, '\.')

  setl dictionary=

  let filetypes = []
  for ft in dict_name
    call add(filetypes, ft)

    let dict_path = '~/.vim/dict/'. join(filetypes, '.') .'.dict'
    execute 'setl dictionary+=' . expand(dict_path)

    if exists(':NeoSnippetSource')
      let snippet_path = expand('~/.vim/snippet/'. join(filetypes, '.') .'.snip')
      if filereadable(snippet_path)
        execute 'NeoSnippetSource '. snippet_path
      endif
    endif
  endfor
endfunc"}}}

augroup MyAutoCmd
  autocmd FileType * call <SID>set_dictionary_automatically()
augroup END
"}}}

" ----------------------------------------
" History {{{
set complete=.,w,b,u,U,s,i,d,t
set completeopt=menu,menuone
set history=1000
set infercase
set wildchar=<tab>
set wildmenu
set wildoptions=tagfile
set wildmode=longest:full,full

" Complement command in command-line like zsh
cnoremap <C-P> <UP>
cnoremap <C-N> <Down>
"}}}

" ----------------------------------------
" Plugin settings {{{
noremap [plug] <Nop>
nmap <C-H> [plug]

" ------------------------------------
function! s:new_memolist()
  let date = strftime('%Y-%m-%d')
  let input = input('Filename: ', date . '-') . '.md'
  tabnew `=g:my.dir.memolist . '/' . input`
endfunction

nnoremap <silent><Space>mn :call <SID>new_memolist()<CR>
nnoremap <silent><Space>ml :execute 'VimFilerExplorer ' . g:my.dir.memolist . ' -horizontal'<CR>

" ------------------------------------
function! s:define_rails_autocmd() "{{{
  let s:rails_snippets = {
        \ '.view*':                 ['ruby.rails.view'],
        \ '.view.haml':             ['haml.rails.view'],
        \ '.view.erb':              ['eruby.rails.view'],
        \ '.model*':                 ['ruby.rails.model'],
        \ '.controller':            ['ruby.rails.controller'],
        \ '.db.migration':          ['ruby.rails.migrate'],
        \ '/config/environment.rb': ['ruby.rails.environment'],
        \ '/config/routes.rb':      ['ruby.rails.route'],
        \ '.fixtures.replacement':  ['ruby.factory_girl'],
        \ '.spec.controller':       ['ruby.rspec.controller'],
        \ '.spec.model':            ['ruby.rspec.model'],
        \ '.spec.helper':           ['ruby.rspec.helper'],
        \ '.spec.feature':          ['ruby.capybara'],
        \ '.spec.routing':          ['ruby.rspec.routing']
        \ }

  augroup MyRailsSetting
    autocmd!

    for [type_or_path, snippets] in items(s:rails_snippets)
      for snippet in snippets
        let snippet_file = expand('~/.vim/snippet/' . snippet . '.snip')
        if filereadable(snippet_file)
          let prefix = 'autocmd User Rails' . type_or_path
          execute prefix . ' NeoSnippetSource ' . snippet_file
          execute prefix . ' nnoremap <buffer><Space>e :<C-U>tabnew ' . snippet_file . '<CR>'
        endif
      endfor
    endfor
  augroup END
 endfunction"}}}

function! s:detect_rails()
  let root_dir = s:current_git()
  return !empty(root_dir) && filereadable(root_dir . '/config/application.rb')
endfunction

function! s:load_vim_rails() "{{{
  if exists('s:loaded_vim_rails')
    return
  endif

  if s:detect_rails()
    let s:loaded_vim_rails = 1
    let root_dir = s:current_git()

    autocmd! LoadVimRails
    augroup! LoadVimRails

    let b:rails_root = root_dir
    call dein#source('vim-rails')
    call s:define_rails_autocmd()

    silent doautocmd User BufEnterRails
    silent doautocmd User Rails

    augroup DetectVimRails
      autocmd!
      autocmd BufNew,BufNewFile *.rb silent doautocmd User Rails
    augroup END
  endif
endfunction"}}}

if s:on_init() && !exists('s:loaded_vim_rails')
  augroup LoadVimRails
    autocmd!
    autocmd VimEnter,BufNewFile,BufRead * call <SID>load_vim_rails()
  augroup END
endif

" ------------------------------------
" vim-endwise
" ------------------------------------
let g:endwise_no_mappings = 1

" ------------------------------------
let g:vinarise_objdump_command = 'gobjdump'

" ------------------------------------
nnoremap ! :Switch<CR>

" ----------------------------------------
" unite.vim"{{{
" keymappings
nmap [unite] <Nop>
nmap <C-J> [unite]

function! s:ddu_start_rg(input)
  let root_dir = s:current_git()
  let options = #{
        \   name: 'rg',
        \   sources: [
        \     #{
        \       name: 'rg',
        \       params: #{
        \         path: root_dir,
        \         input: a:input
        \       },
        \       options: #{
        \         matchers: ['converter_display_word']
        \       }
        \     }
        \   ],
        \   input: a:input,
        \   ui: 'ff',
        \   volatile: !a:input,
        \   uiParams: #{
        \     autoResize: v:false
        \   }
        \ }

  call ddu#start(options)
endfunction

nnoremap <silent>[unite]j :call ddu#start(#{ name: 'mr', sources: [#{ name: 'mr' }], uiParams: #{ ff: #{ startFilter: v:false } } })<CR>
nnoremap <silent>g/       :call ddu#start(#{ name: 'line', sources: [#{ name: 'line' }] })<CR>
nnoremap <silent>gr       :call <SID>ddu_start_rg(expand('<cword>'))<CR>
nnoremap <silent>gR       :call <SID>ddu_start_rg('')<CR>

function! s:parse_git_root_option(input) "{{{
  let reg_multi =  '\*\*/'
  let reg_bad_pattern =  '\v(\*\*[^/])'
  let reg_single = '[^/*]\{,1}\*[^*]'

  let input = a:input
  if input =~ reg_bad_pattern
    next
  elseif input =~ reg_multi
    let input = substitute(input, '.*/\([^/]\+\)$', '\1', 'g')
  elseif input =~ reg_single
    let input = '^' . input
  endif

  return input
endfunction"}}}

function! s:unite_git_root(...) "{{{
  let git_root = s:current_git()
  let root_path = s:complement_delimiter_of_directory(git_root)

  let argument = empty(a:000) ? '' : a:1
  let [args, context] = unite#helper#parse_options_args(argument)
  let full_path = get(unite#helper#get_source_names(args), 0, '')
  let wild_sep = split(full_path, '\*')
  let relative_path = get(wild_sep, 0, '')
  let absolute_path = root_path . relative_path

  let prefilter = len(wild_sep) > 1 ? '*' . join(wild_sep[1:-1], '*') : ''
  let prefilter = s:parse_git_root_option(prefilter)
  let context.source__prefilters = [prefilter]
  let context.source__absolute_path = absolute_path
  let context.source__project_root_path = git_root

  if isdirectory(absolute_path)
    lcd `=absolute_path`
    call unite#start([['file_rec', absolute_path]], context)
  elseif filereadable(absolute_path)
    edit `=absolute_path`
  else
    echomsg absolute_path . ' is not exists!'
  endif
endfunction"}}}

function! s:unite_git_complete(arg_lead, cmd_line, cursor_pos) "{{{
  let git_root = s:complement_delimiter_of_directory(s:current_git())
  let files = globpath(git_root, a:arg_lead . '*')
  let file_list = split(files, '\n')
  let file_list = map(file_list, 's:complement_delimiter_of_directory(v:val)')
  let file_list = map(file_list, "substitute(v:val, git_root, '', 'g')")

  return file_list
endfunction "}}}

command! -nargs=? -complete=customlist,s:unite_git_complete UniteGit call <SID>unite_git_root(<f-args>)

" ddu-source-git
nnoremap <silent>gl :call ddu#start(#{ name: 'git_log', sources: [#{ name: 'git_log' }], uiParams: #{ ff: #{ startFilter: v:false } } })<CR>
nnoremap <silent>gs :call ddu#start(#{ name: 'git_status', sources: [#{ name: 'git_status' }], uiParams: #{ ff: #{ startFilter: v:false } } })<CR>
nnoremap <silent>gh :call ddu#start(#{ name: 'git_branch', sources: [#{ name: 'git_branch', params: #{ args: ['-a'] } }] })<CR>
"}}}
"}}}

set hidden
" ----------------------------------------
command! UnwatchBuffer setlocal buftype=nofile nobuflisted noswapfile bufhidden=hide
command! CleanSwap call alpaca#system_bg('rm -rf ' . g:my.dir.swap_dir . '/*')
command! CleanAll call alpaca#system_bg('rm -rf ' . g:my.dir.trash_dir . '*')
"}}}
" }}}

function! s:copy_current_path() "{{{
  let @* = expand('%:p')
  echo 'Copy current path: ' . @*
endfunction "}}}

function! s:copy_current_path_from_root() "{{{
  if empty(s:current_git())
    return
  else
    call s:copy_current_path()
    let @* = substitute(@*, s:current_git() . '/', '', 'g')
    echo 'Copy current path: ' . @*
  endif
endfunction "}}}

augroup MyAutoCmd
  autocmd WinEnter <buffer> checktime
augroup END

nmap cp :call <SID>copy_current_path()<CR>
nmap cpr :call <SID>copy_current_path_from_root()<CR>

command! OpenLocale call rails_locale#open_locale_file_from_path(expand('%:p'))

" Installation check.
let s:loaded_vimrc = 1
set secure
