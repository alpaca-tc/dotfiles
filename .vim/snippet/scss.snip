# 標準構文#{{{
snippet     for
    @for $i from ${1} through ${2} {
      ${3:${i}}
    }

snippet     r
abbr        return
    @return
#}}}
# 拡張関数#{{{
snippet     ex
abbr        extend
    @extend ${1}

snippet     d
abbr        darken
    darken( ${1:#fff}, ${2:14%} )

snippet     if
abbr        if
    @if ${1:$flg > 0} {
        ${2}
    }
#}}}
# include#{{{
snippet     icf
abbr        clearfix
prev_word    '^'
    @include clearfix;

snippet     ibr
abbr        abbr
prev_word    '^'
    @include border-radius(${1});


#}}}
# mixin#{{{
snippet     mclearfix
  @mixin cf {
    /* For modern browsers */
    &:before,
    &:after {
      content:"";
      display:table;
    }

    &:after {
      clear:both;
    }

    /* For IE 6/7 (trigger hasLayout) */
    & {
      zoom:1;
    }
  }

  @mixin clearfix {
    @include cf;
  }

snippet     mabsolute
  @mixin absolute($x, $y) {// {{{
    display: block;
    left: $x;
    position: absolute;
    top: $y;
  }// }}}
#}}}

# CSS & SASS Snippets for VIM's Snipmate
# Author: Chris Batchelor, Firegoby Design
# Install: -
#   Put in your SnipMate's snippets/ dir
#   :set filetype=scss
#      or
#   'filetype on' in your .vimrc
# Notes: -
#   most used features use single letter abbreviations
#   standard CSS declarations use two letters (occasionally three)
#   SASS functions use the first three letters of the function (occ. four)
# element#{{{
snippet e
    ${1:element} {
        ${2}
    }
# class
snippet c
    .${1:class} {
        ${2}
    }
# id
snippet i
    #${1:id} {
        ${2}
    }
# Define a variable
snippet v
    $${1:name}: ${2:value};
# @mixin - Define a mixin
snippet mix
    @mixin ${1:name} {
        ${2}
    }
# @include - Use a mixin
snippet inc
    @include ${1:mixin};

# Standard CSS Declarations
# positioning
snippet di
    display: ${1:none};
snippet po
    position: ${1:relative};
snippet poa
    position: ${1:absolute};
snippet fl
    float: ${1:left};
snippet cl
    clear: ${1:left};
snippet top
    top: ${1:0};
snippet bot
    bottom: ${1:0};
snippet lef
    left: ${1:0};
snippet rig
    right: ${1:0};
# sizing
snippet hi
    height: ${1:100%};
snippet wi
    width: ${1:80%};
snippet maw
    max-width: ${1:80%};
snippet miw
    min-width: ${1:25%};
# margins
snippet m
    margin: ${1:0} ${2:auto};
snippet mt
    margin-top: ${1:0};
snippet mb
    margin-bottom: ${1:0};
snippet ml
    margin-left: ${1:0};
snippet mr
    margin-right: ${1:0};
# padding
snippet p
    padding: ${1:0} ${2:0};
snippet pt
    padding-top: ${1:0};
snippet pb
    padding-bottom: ${1:0};
snippet pl
    padding-left: ${1:0};
snippet pr
    padding-right: ${1:0};
#borders
snippet b
    border: ${1:1px} ${2:solid} ${3:#000};
snippet bt
    border-top: ${1:1px} ${2:solid} ${3:#000};
snippet bb
    border-bottom: ${1:1px} ${2:solid} ${3:#000};
snippet bl
    border-left: ${1:1px} ${2:solid} ${3:#000};
snippet br
    border-right: ${1:1px} ${2:solid} ${3:#000};
# backgrounds
snippet ba
    background: ${1:#fff} ${2:url} ${3:repeat} ${4:left} ${5:top};
snippet bc
    background-color: ${1:#fff};
snippet bi
    background-image: url('${1}');
snippet bp
    background-position: ${1:left} ${2:top};
# fonts
snippet f
    font: ${1:size}em/${2:1.5} ${3:"Helvetica Neue", Helvetica, Arial, sans-serif};
snippet font
    font: ${1:weight} ${2:style} ${3:variant} ${4:size}/${5:line-height} ${6:family};
snippet fs
    font-size: ${1:1.2em};
snippet fst
    font-style: ${1:italic};
snippet fv
    font-variant: ${1:small-caps};
snippet fw
    font-weight: ${1:bold};
snippet @ff
    @font-face {
        font-family: ${1:name};
        src: ${2:url};
    }
# text- & lettering
snippet co
    color: ${1:#000};
snippet ta
    text-align: ${1:center};
snippet td
    text-decoration: ${1:none};
snippet ti
    text-indent: ${1:length};
snippet to
    text-overflow: ${1:ellipsis};
snippet tr
    text-rendering: ${1:optimizeLegibility};
snippet ts
    text-shadow: ${1:color} ${2:x} ${3:y} ${4:blur};
snippet tt
    text-transform: ${1:uppercase};
snippet lh
    line-height: ${1:1.5em};
snippet ls
    letter-spacing: ${1:0.025em};
# SASS RGB Functions
# Converts an rgb(red, green, blue) triplet into a color.
snippet rgb
    rgb(${1:red}, ${2:green}, ${3:blue})
# Converts an rgba(red, green, blue, alpha) quadruplet into a color.
snippet rgba
    rgba(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})
# Adds an alpha layer to any color value.
snippet rgbc
    rgba(${1:color}, ${2:alpha})
# Gets the red component of a color.
snippet red
    red(${1:color})
# Gets the green component of a color.
snippet gre
    green(${1:color})
# Gets the blue component of a color.
snippet blu
    blue(${1:color})
# Mixes two colors together.
snippet mixc
    mix(${1:color1}, ${2:color2})
# Mixes two colors together (weighted)
snippet mixcw
    mix(${1:color1}, ${2:color2}, ${3:weight})
# SASS HSL Functions
# Converts an hsl(hue, saturation, lightness) triplet into a color.
snippet hsl
    hsl(${1:hue}, ${2:saturation}, ${3:lightness})
# Converts an hsla(hue, saturation, lightness, alpha) quadruplet into a color.
snippet hsla
    hsla(${1:hue}, ${2:saturation}, ${3:lightness}, ${4:alpha})
# Gets the hue component of a color.
snippet hue
    hue(${1:color})
# Gets the saturation component of a color.
snippet satc
    saturation(${1:color})
# Gets the lightness component of a color.
snippet ligc
    lightness(${1:color})
# Changes the hue of a color.
snippet adj
    adjust-hue(${1:color}, ${2:degrees})
# Makes a color lighter.
snippet lig
    lighten(${1:color}, ${2:amount})
# Makes a color darker.
snippet dar
    darken(${1:color}, ${2:amount})
# Makes a color more saturated.
snippet sat
    saturate(${1:color}, ${2:amount})
# Makes a color less saturated.
snippet des
    desaturate(${1:color}, ${2:amount})
# Converts a color to grayscale.
snippet gra
    grayscale(${1:color})
# Returns the complement of a color.
snippet com
    complement(${1:color})
# Returns the inverse of a color.
snippet inv
    invert(${1:color})
# SASS Opacity Functions
# Gets the alpha component (opacity) of a color.
snippet alp
    alpha(${1:color})
# Add or change an alpha layer for any color value.
# - already defined, see 'rgbc'
# Makes a color more opaque.
snippet opa
    opacify(${1:color}, ${2:amount})
# Makes a color more transparent.
snippet tra
    transparentize(${1:color}, ${2:amount})
# SASS Number Functions
# Converts a unitless number to a percentage.
snippet per
    percentage(${1:value})
# Rounds a number to the nearest whole number.
snippet rou
    round(${1:value})
# Rounds a number up to the nearest whole number.
snippet cei
    ceil(${1:value})
# Rounds a number down to the nearest whole number.
snippet flo
    floor(${1:value})
# Returns the absolute value of a number.
snippet abs
    abs(${1:value})
snippet     imp
    @import "${1:compass/css3}"

snippet     utf8
  @charset "UTF-8";


snippet     @mreset
  @mixin reset {
    border-collapse:collapse;
    border-spacing:0;
    border:0;
    color:#000;
    background:#FFF;
    content:'';
    font-size:100%;
    font-style:normal;
    font-variant:normal;
    font-weight:normal;
    list-style:none;
    margin:0;
    padding:0;
    text-align:left;
    vertical-align:text-bottom;
  }

snippet     fadehover
  .fadehover {
    -webkit-transition: 0.3s;
    -moz-transition: 0.3s;
    -ms-transition: 0.3s;
    transition: 0.3s;
  }
  .fadehover:hover {
    opacity: 0.8;
  }

#}}}
## font lists{{{
snippet ff
    font-family: Verdana,Arial,"メイリオ",Meiryo,"ヒラギノ角ゴPro W3","Hiragino Kaku Gothic Pro","ＭＳ Ｐゴシック","MS PGothic",sans-serif;
    font-weight:normal;
    color:${1:#CCC};

snippet ffhira
  font-family:"ヒラギノ明朝 Pro W6", "HiraMinPro-W6";

snippet ffosaka
  font-family:"Osaka";
  font-weight:bold

snippet     ffhiramarug
  font-family:"ヒラギノ丸ゴシックPro W4", "Hiragino Maru Gothic Pro";font-weight:bold

snippet     ffhirakakug
  font-family:"ヒラギノ角ゴシック Std W8", "Hiragino Kaku Gothic Std"

snippet     ffonts
  http://nov.azarea.jp/fonts.html
##}}}
