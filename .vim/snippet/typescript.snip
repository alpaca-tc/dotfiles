snippet interface
abbr    interface {}
options word
  interface ${1} {
    ${2}
  }

snippet type
abbr    type = {}
options word
  type ${1} = {
    ${2}
  }

snippet import
abbr    import
options word
  import ${2} from "${1}"

snippet eslint-disable
abbr    eslint-disable ...
options word
  /* eslint-disable ${1} */

snippet useEffectDebugger
abbr    useEffectDebugger
options word
  const usePrevious = (value: React.DependencyList, initialValue: React.DependencyList) => {
    const ref = useRef(initialValue)

    useEffect(() => {
      ref.current = value
    });

    return ref.current
  };

  const useEffectDebugger = (effectHook: React.EffectCallback, deps: React.DependencyList) => {
    const previousDeps = usePrevious(deps, ([] as React.DependencyList))

    const changedDeps = deps.reduce((accum, dependency, index) => {
      if (dependency !== previousDeps[index]) {
        const keyName = index
        return {
          ...(accum as React.DependencyList),
          [keyName]: {
            before: previousDeps[index],
            after: dependency
          }
        };
      }

      return accum;
    }, {}) as React.DependencyList

    if (Object.keys(changedDeps).length) {
      console.log('[use-effect-debugger] ', changedDeps);
    }

    useEffect(effectHook, deps);
  };


snippet .reduce
abbr    .reduce
regexp  '\.reduce'
options word
  .reduce((result, current) => ${2}, ${1})
