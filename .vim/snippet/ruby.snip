# Magic code#{{{
snippet   utf
abbr      utf-8 magick
prev_word '^'
  # coding: utf-8

snippet   #!
abbr      #!/usr/local/bin/ruby
prev_word '^'
  #!/usr/local/bin/ruby
#}}}

# Class / Module#{{{
snippet module
abbr    module Name ... end
options word
  module ${1:module_name}
    ${2}
  end

snippet alias
abbr    alias :new_name :old_name
options word
  alias :${1:new_name} :${2:old_name}

snippet autoload
abbr    autoload :Name, 'path/to/file'
options word
  autoload :${1:Name}, '${2:path/to/file}'

snippet ini
abbr    def initialize end
  def initialize${1}
    ${2}
  end

snippet const_set
abbr    const_set(name, value)
options word
  const_set(:${1:name}, ${2:value})
#}}}

# Keyword for method#{{{
snippet lam
alias   lambda
abbr    lambda do end
  lambda do |${1}|
    ${2}
  end

snippet ->
abbr    ->
options word
  -> { |${1}| ${2} }

snippet def
abbr    def
options word
  def ${1:method_name}
    ${2}
  end
#}}}

# Branch on condition#{{{
snippet if
abbr    if
options word
  if ${1:condition}
    ${2}
  end

snippet ife
abbr    if ... else ... end
options word
  if ${1:condition}
    ${2}
  else
    ${3}
  end

snippet elsif
abbr    elsif ...
options word
  elsif ${1:condition}
    ${2}

snippet unless
abbr    unless ...
options word
  unless ${1:condition}

snippet while
abbr    while end
options word
  while ${1} do
    ${2}
  end

snippet until
abbr    until ...
options word
  until ${1:condition}
    ${2}
  end

snippet class
abbr    class ... end
options word
  class ${1:className}
    ${2}
  end

snippet case
abbr    case
options word
  case ${1:object}
  when ${2:condition}
    ${3}
  end

snippet when
abbr    when
options word
  when ${1:condition}
    ${2}


snippet begin
abbr    begin rescue end
options word
  begin
    ${1}
  rescue => e
    ${2}
  end

snippet begine
abbr    begin rescue end
options word
  begine
  begin
    ${1}
  rescue => e
    ${2}
  ensure
    ${3}
  end
#}}}

# Method {{{
snippet each
abbr    each { ... }
options word
regexp  '.\+\.'
  each do |${1}|
    ${2}
  end

snippet reject
abbr    reject { |v| ... }
options word
regexp  '.\+\.'
  reject { |v| ${1} }

snippet reject!
abbr    reject! { |v| ... }
options word
regexp  '.\+\.'
  reject! { |v| ${1} }

snippet map
abbr    map { |v| ... }
options word
regexp  '.\+\.'
  map { |v| ${1} }

snippet map!
abbr    map! { |v| ... }!
options word
regexp  '.\+\.'
  map! { |v| ${1} }

#}}}

# Kernel / Module Method#{{{
snippet require
abbr    require
alias   req
options word
  require '${1}'

snippet alias_method
abbr    alias_method
options word
  alias_method ${1:to}, ${2:from}

snippet define_method
abbr    define_method
options word
  define_method :${1:method_name} do |${2:*args}|
    ${3}
  end

snippet method_missing
abbr    method_missing
options word
  def method_missing(action, *args)
    if action.to_s =~ ${1:regexp}
      ${2}
    end
  end
#}}}

# ruby_custom {{{
snippet     Hash[]
abbr        Hash.new { |h,k| h[k] = [] }
options     word
  Hash.new { |h,k| h[k] = [] }

snippet     Hash{}
  Hash.new { |h,k| h[k] = Hash.new(&h.default_proc) }

snippet require_relational
abbr    require File.expand_path(File.dirname(__FILE__) + '...')
options word
  require File.expand_path(File.dirname(__FILE__) + '${1}')

snippet Rational
abbr    Rational
options word
  Rational(${1}, ${2})
#}}}

# Matching#{{{
snippet     match_japanese
abbr        match_japanese
options     word
  /[ぁ-んァ-ヴ一-龠亜-煕]/u
#}}}

# Gem#{{{
snippet     binding
abbr        binding
alias       pry
options     word
  binding.pry;

snippet     concern
abbr        extend ActiveSupport::Concern
options     word
  extend ActiveSupport::Concern
#}}}

# Snippet#{{{
snippet Stub_get
abbr    Stub_get
options word
  module Stub
    def gets
      @count = -1 unless @count
      @count += 1
      [
        ${1}
      ][@count]
    end
  end
  extend Stub

snippet benchmark
abbr    benchmark
options word
  require 'benchmark'
  puts Benchmark::CAPTION
  puts Benchmark.measure {
    ${1}
  }
#}}}
