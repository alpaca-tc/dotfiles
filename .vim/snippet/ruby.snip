include ruby.standard_library.snip
include ruby.rdoc.snip
include ruby.yard.snip

# Magic code#{{{
snippet   utf
abbr      utf-8 magick
prev_word '^'
  # coding: utf-8

snippet   #!
abbr      #!/usr/local/bin/ruby
prev_word '^'
  #!/usr/local/bin/ruby
#}}}

# Class / Module#{{{
snippet module
abbr    module Name ... end
options word
  module ${1:module_name}
    ${2}
  end

snippet alias
abbr    alias :new_name :old_name
options word
  alias :${1:new_name} :${2:old_name}

snippet autoload
abbr    autoload :Name, 'path/to/file'
options word
  autoload :${1:Name}, '${2:path/to/file}'

snippet ini
abbr    def initialize end
  def initialize${1}
    ${2}
  end

snippet const_set
abbr    const_set(name, value)
options word
  const_set(:${1:name}, ${2:value})
#}}}

# Keyword for method#{{{
snippet lam
alias   lambda
abbr    lambda do end
  lambda do |${1}|
    ${2}
  end

snippet ->
abbr    ->
options word
  ->${1: (${2\})} { ${3} }

snippet def
abbr    def
options word
  def ${1:method_name}
    ${2}
  end
#}}}

# Branch on condition#{{{
snippet if
abbr    if
options word
  if ${1:condition}
    ${2}
  end

snippet ife
abbr    if ... else ... end
options word
  if ${1:condition}
    ${2}
  else
    ${3}
  end

snippet elsif
abbr    elsif ...
options word
  elsif ${1:condition}
    ${2}

snippet unless
abbr    unless ...
options word
  unless ${1:condition}

snippet while
abbr    while end
options word
  while ${1} do
    ${2}
  end

snippet loop
abbr    loop do ... end
options word
  loop do
    ${1}
  end

snippet until
abbr    until ...
options word
  until ${1:condition}
    ${2}
  end

snippet class
abbr    class ... end
options word
  class ${1:className}
    ${2}
  end

snippet case
abbr    case
options word
  case ${1:object}
  when ${2:condition}
    ${3}
  end

snippet when
abbr    when
options word
  when ${1:condition}
    ${2}


snippet begin
abbr    begin rescue end
options word
  begin
    ${1}
  rescue => e
    ${2}
  end

snippet begine
abbr    begin rescue end
options word
  begine
  begin
    ${1}
  rescue => e
    ${2}
  ensure
    ${3}
  end
#}}}

# Enumerable {{{
snippet all?
abbr    all? { |v| ... } #=> bool
options word
regexp  '\.'
  all? { |${1:v}| ${2} }

snippet any?
abbr    any? { |v| ... } #=> bool
options word
regexp  '\.'
  any? { |${1:v}| ${2} }

snippet chunk
abbr    chunk { |v| ... } #=> enum
options word
regexp  '\.'
  chunk { |${1:v}| ${2} }

snippet map
alias   collect
abbr    map { |v| ... } #=> array
options word
regexp  '\.'
  map { |${1:v}| ${2} }

snippet collect_concat
abbr    collect_concat { |v| ... } #=> array
options word
regexp  '\.'
  collect_concat { |${1:v}| ${2} }

snippet flat_map
abbr    flat_map { |v| ... } #=> array
options word
regexp  '\.'
  flat_map { |${1:v}| ${2} }

snippet countd
abbr    count { |v| ... } #=> int
options word
regexp  '\.'
  count { |${1:v}| ${2} }

snippet count
abbr    count(v) #=> int
options word
regexp  '\.'
  count(${1})

snippet cycle
abbr    cycle { |v| ... } #=> nil
options word
regexp  '\.'
  cycle { |${1:v}| ${2} }

snippet cycled
abbr    cycle(v) #=> enum
options word
regexp  '\.'
  cycle(${1:count})

snippet detect
abbr    detect { |v| ... } #=> obj or nil
options word
alias   find
regexp  '\.'
  detect { |${1:v}| ${2} }

snippet drop
abbr    drop(index) #=> array
options word
regexp  '\.'
  drop(${1:index})

snippet drop_while
abbr    drop_while { |v| ... } #=> array
options word
regexp  '\.'
  drop_while { |${1:v}| ${2} }

snippet each_consd
abbr    each_cons { |v| ... } #=> nil
options word
regexp  '\.'
  each_cons(${1:count}) { |${2:v}| ${3} }

snippet each_cons
abbr    each_cons(v) #=> enum
options word
regexp  '\.'
  each_cons(${1:v})

snippet each_entry
abbr    each_entry { |v| ... } #=> enum
options word
regexp  '\.'
  each_entry { |${1:v}| ${2} }

snippet each_slice
abbr    each_slice(n) { |v| ... } #=> nil
options word
regexp  '\.'
  each_slice(${1:count}) { |${2:v}| ${3} }

snippet each_with_index
abbr    each_with_index { |v| ... } #=> enum
options word
regexp  '\.'
  each_with_index { |${1}, index| ${2} }

snippet each_with_object
abbr    each_with_object { |v| ... } #=> obj
options word
regexp  '\.'
  each_with_object(${1}) { |${2:v}, memo| ${3} }

snippet select
abbr    select { |v| ... } #=> array
options word
alias   find_all
regexp  '\.'
  select { |${1:v}| ${2} }

snippet find_indexd
abbr    find_index { |v| ... } #=> int or nil
options word
regexp  '\.'
  find_index { |${1:v}| ${2} }

snippet find_index
abbr    find_index(n) #=> enum
options word
regexp  '\.'
  find_index(${1:value})

snippet first
abbr    first(n) #=> array
options word
regexp  '\.'
  first(${1:n})

snippet grep
abbr    grep(pat) { |v| ... }
options word
regexp  '\.'
  grep(${1:pat}) ${2:{ |v| ${3\} \}}

snippet group_by
abbr    group_by { |v| ... } #=> hash
options word
regexp  '\.'
  group_by { |${1:v}| ${2} }

snippet include?
abbr    include?(obj) #=> bool
options word
regexp  '\.'
  include?(${1})

snippet injectd
abbr    inject(init) { |memo, v| ... } #=> obj
options word
regexp  '\.'
  inject { |memo, ${1:v}| ${2} }

snippet inject
abbr    inject(:sym) #=> obj
alias   reduce
options word
regexp  '\.'
  inject(:${1:+})

snippet map!
abbr    map! { |v| ... } #=> array
options word
regexp  '\.'
  map! { |${1:v}| ${2} }

snippet max
abbr    max { |a, b| ... }
options word
regexp  '\.'
  max { |a, b| ${2} <=> $2${3} }

snippet member?
abbr    member?(obj)
options word
regexp  '\.'
  member?(${1:obj})

snippet min
abbr    min { |a, b| ... }
options word
regexp  '\.'
  min { |a, b| ${2} <=> $2${3} }

snippet min_by
abbr    min_by { |v| ... }
options word
regexp  '\.'
  min_by { |${1:v}| ${2} }

snippet minmax
abbr    minmax { |a, b| ... } #=> [min, max]
options word
regexp  '\.'
  minmax { |a, b| ${2} }

snippet minmax_by
abbr    minmax_by { |v| ... } #=> [min, max]
options word
regexp  '\.'
  minmax_by { |${1:v}| ${2} }

snippet none?
abbr    none? #=> bool
options word
regexp  '\.'
  none?

snippet one?
abbr    one? #=> bool
options word
regexp  '\.'
  one?

snippet one?d
abbr    one? { |v| ... } #=> bool
options word
regexp  '\.'
  one? { |${1:v}| ${2} }

snippet partition
abbr    partition { |v| ... } #=> [true_a, false_a]
options word
regexp  '\.'
  partition { |${1:v}| ${2:condition} }

snippet reverse_each
abbr    reverse_each { |v| ... } #=> enum
options word
regexp  '\.'
  reverse_each { |${1:v}| ${2} }

#snippet slice_before
#abbr    slice_before { |v| ... } #=> enum
#options word
#regexp  '\.'
#  slice_before { |${1:v}| ${2} }

snippet sort
abbr    sort { |v| ... } #=> array
options word
regexp  '\.'
  sort { |a, b| ${1} <=> $1${2} }

snippet sort_by
abbr    sort_by { |v| ... } #=> array
options word
regexp  '\.'
  sort_by { |${1}| ${2} }

snippet take
abbr    take(n)
options word
regexp  '\.'
  take(${1:n})

snippet take_while
abbr    take_while { |arr| ... } #=> array
options word
regexp  '\.'
  take_while { |${1}| ${2} }

snippet zip
abbr    zip(*args) #=> array_of_array
options word
regexp  '\.'
  zip(${1:*args})

snippet each
abbr    each { ... }
regexp  '\.'
  each do |${1}|
    ${2}
  end

snippet reject
abbr    reject { |v| ... } #=> array
options word
regexp  '\.'
  reject { |${1:v}| ${2} }

snippet reject!
abbr    reject! { |v| ... }
options word
regexp  '\.'
  reject! { |${1:v}| ${2} }


#}}}

# Kernel / Module Method {{{
snippet require
abbr    require
alias   req
options word
  require '${1}'

snippet alias_method
abbr    alias_method
options word
  alias_method ${1:to}, ${2:from}

snippet define_method
abbr    define_method
options word
  define_method :${1:method_name} do |${2:*args}|
    ${3}
  end

snippet method_missing
abbr    method_missing
options word
  def method_missing(action, *args)
    if action.to_s =~ ${1:regexp}
      ${2}
    end
  end
#}}}

# ruby_custom {{{
snippet     Hash.new
abbr        Hash.new { |h,k| h[k] = ... }
options     word
  Hash.new { |h,k| h[k] = ${1} }

snippet     Hash0
abbr        Hash.new { |h,k| h[k] = 0 }
options     word
  Hash.new { |h,k| h[k] = [] }

snippet     Hash[]
abbr        Hash.new { |h,k| h[k] = [] }
options     word
  Hash.new { |h,k| h[k] = [] }

snippet     Hash{}
  Hash.new { |h,k| h[k] = Hash.new(&h.default_proc) }

snippet require_relational
abbr    require File.expand_path(File.dirname(__FILE__) + '...')
options word
  require File.expand_path(File.dirname(__FILE__) + '${1}')

snippet Rational
abbr    Rational
options word
  Rational(${1}, ${2})
#}}}

# Matching#{{{
snippet     match_japanese
abbr        match_japanese
options     word
  /[ぁ-んァ-ヴ一-龠亜-煕]/u
#}}}

# Gem#{{{
snippet     binding
abbr        binding
alias       pry
options     word
  binding.pry;

snippet     concern
abbr        extend ActiveSupport::Concern
options     word
  extend ActiveSupport::Concern
#}}}

# Snippet#{{{
snippet Stub_get
abbr    Stub_get
options word
  module Stub
    def gets
      @count = -1 unless @count
      @count += 1
      [
        ${1}
      ][@count]
    end
  end
  extend Stub

snippet benchmark
abbr    benchmark
options word
  require 'benchmark'
  puts Benchmark::CAPTION
  puts Benchmark.measure {
    ${1}
  }

snippet parent_directory
abbr    parent_directory
options word
  parent_directory = File.expand_path('..', ${1:Dir.pwd})

#}}}

snippet auto_name
abbr    Get autoload function name
options word
  `join(map(split(substitute(expand("%:p"), '.*/lib/\(.*\).rb$', '\1', 'g'), '/'), 'ToUpperCamel(v:val)'), '::')`
