# rspec#{{{
snippet     con
abbr        context "..." do
  context "${1}" do
    ${2}
  end

snippet     bef
abbr        before do ... end
  before do
    ${1}
  end

snippet     itd
abbr        it ... do
  it "${1}" do
    ${2}
  end

snippet     it
abbr        it { ... }
  it { ${1} }

snippet     des
abbr        describe do
  describe "${1}" do
      ${2}
  end

snippet     sub
abbr        subject
  subject { ${1} }

snippet     share
abbr        shared_examples_for
  shared_examples_for "${1:name}" do
    end

snippet     behave
  it_should_behave_like "${1:name}"

snippet     let
abbr        let(:name) {}
  let(:${1:symbol}) { ${2} }

snippet     reqs
abbr        require rspec
  require File.expand_path(File.dirname(__FILE__) + "/../spec_helper")

snippet     its
  its(${1}) { ${2} }
#}}}

# shoulda-matchers {{{
snippet     belong
abbr        belong_to(...)
options     word
  belong_to(${1:table})

snippet     have_many
abbr        have_many(...)
options     word
  have_many(${1:table})

snippet     have_manyt
abbr        have_many(...).through(...)
options     word
  have_many(${1:table}).through(${2:table})

snippet     uniq
abbr        validate_uniqueness_of(...)
options     word
  validate_uniqueness_of(${1:column})

snippet     presence
abbr        validate_presence_of(...)
options     word
  validate_presence_of(${1:column})

snippet     presencew
abbr        validate_presence_of(...).with_message(...)
options     word
  validate_presence_of(${1:column}).with_message(${2:regexp})

snippet     numericality
abbr        validate_numericality_of(...)
options     word
  validate_numericality_of(${1:column})

snippet     allow_v
abbr        allow_value(...).for(...)
options     word
  allow_value(${1:value}).for(${2:column})

snippet     inclusion
abbr        ensure_inclusion_of(...).in_range(...)
options     word
  ensure_inclusion_of(${1:column}).in_range(${1:1..100})

snippet     allow_m
abbr        allow_mass_assignment_of(...)
options     word
  allow_mass_assignment_of(${1:column})

snippet     assign
abbr        assign_to(...)
options     word
  assign_to(${1:column})

snippet     respond
abbr        respond_with
options     word
  respond_with(:success)

snippet     render
abbr        render_template(...)
options     word
  render_template(${1:templete})

snippet     flash
abbr        set_the_flash
options     word
  set_the_flash

snippet     kind_of
abbr        be_a_kind_of(...)
options     word
  be_a_kind_of(${1:Klass})

snippet     instance_of
abbr        be_an_instance_of(...)
options     word
  be_an_instance_of(${1:Klass})

snippet     have_key
abbr        have_key(...)
options     word
  have_key(${1:key})

# shoulda-matchers
snippet     belong
abbr        belong_to(...)
options     word
  belong_to(${1:table})

snippet     have_many
options     word
abbr        have_many(...)
  have_many(${1:table})

snippet     have_manyt
abbr        have_many(...).through(...)
options     word
  have_many(${1:table}).through(${2:table})

snippet     uniq
abbr        validate_uniqueness_of(...)
options     word
  validate_uniqueness_of(${1:column})

snippet     presence
abbr        validate_presence_of(...)
options     word
  validate_presence_of(${1:column})

snippet     presencew
abbr        validate_presence_of(...).with_message(...)
options     word
  validate_presence_of(${1:column}).with_message(${2:regexp})

snippet     numericality
abbr        validate_numericality_of(...)
options     word
  validate_numericality_of(${1:column})

snippet     allow_v
abbr        allow_value(...).for(...)
options     word
  allow_value(${1:value}).for(${2:column})

snippet     length
abbr ensure_length_of(...).is_at_least(...)
options     word
  ensure_length_of(${1:column})${2:.is_at_least(${3\}})${4:.is_at_most(${5\}})${6:.with_short_message(/${7:regext\}/) }

snippet     acceptance
abbr validate_acceptance_of(...)
options     word
  validate_acceptance_of(${1:column})

snippet     confirmation
abbr        validate_confirmation_of(...)
options     word
  validate_confirmation_of(${1:column})

snippet     exclusion
abbr        ensure_exclusion_of(...)
options     word
  ensure_exclusion_of(${1:column})
    ${2:.in_range(${3:10..20\})}

snippet     inclusion
abbr        ensure_inclusion_of(...).in_range(...)
options     word
  ensure_inclusion_of(${1:column}).in_range(${1:1..100})

snippet     format_of
abbr validate_format_of(...)
options     word
  validate_format_of(${1:column}).with(${2:message})

snippet     allow_m
abbr        allow_mass_assignment_of(...)
options     word
  allow_mass_assignment_of(${1:column})

snippet     assign
abbr        assign_to(...)
options     word
  assign_to(${1:column})

snippet     respond
abbr        respond_with
options     word
  respond_with(:success)

snippet     render
abbr        render_template(...)
options     word
  render_template(${1:templete})

snippet     flash
abbr        set_the_flash
options     word
  set_the_flash

snippet     kind_of
abbr        be_a_kind_of(...)
options     word
  be_a_kind_of(${1:Klass})

snippet     instance_of
abbr        be_an_instance_of(...)
options     word
  be_an_instance_of(${1:Klass})

snippet     have_key
abbr        have_key(...)
options     word
  have_key(${1:key})
#}}}

# shoulda#{{{
snippet samao
    should_allow_mass_assignment_of :${1:field}

snippet savf
    should_allow_values_for :${1:field}, "${2:value}"

snippet sbt
    should_belong_to :${1:association}

snippet selal
    should_ensure_length_at_least :${1:field}, ${2:min_length}

snippet seli
    should_ensure_length_is :${1:field}, ${2:length}

snippet selir
    should_ensure_length_in_range :${1:field}, ${2:start}..${3:end}

snippet setup
    setup do
        ${1}
    end

snippet sevir
    should_ensure_value_in_range :${1:field}, ${2:start}..${3:end}

snippet shabtm
    should_have_and_belong_to_many :${1:association}

snippet shcm
    should_have_class_methods :${1:method}

snippet shdc
    should_have_db_columns :${1:field}

snippet shi
    should_have_indices :${1:field}

snippet shim
    should_have_instance_methods :${1:method}

snippet shm
    should_have_many :${1:association}

snippet shns
    should_have_named_scope :${1:scope}, :conditions => {${2:conditions}}

snippet sho
    should_have_one :${1:association}

snippet shroa
    should_have_read_only_attributes :${1:field}

snippet snamao
    should_not_allow_mass_assignment_of :${1:field}

snippet snavf
    should_not_allow_values_for :${1:field}, "${2:value}"

snippet svao
    should_validate_acceptance_of :${1:field}

snippet svno
    should_validate_numericality_of :${1:field}

snippet svpo
    should_validate_presence_of :${1:field}

snippet svuo
    should_validate_uniqueness_of :${1:field}, :scoped_to => ${2:arrayofnames}
#}}}

# capybara
# basic {{{

# node actions {{{
snippet     click_link_or_button
abbr        click_link_or_button(locator)
options     word
  click_link_or_button(${1:locator})

snippet     click_link
abbr        click_link(locator)
options     word
  click_link("${1:locator}")

snippet     click_button
abbr        click_button(locator)
options     word
  click_button("${1:locator}")

snippet     fill_in
abbr        fill_in(locator, options={})
options     word
  fill_in("${1:locator}", with: ${2:input_text})

snippet     choose
abbr        choose(locator)
options     word
  choose("${1:locator}")

snippet     check
abbr        check(locator)
options     word
  check("${1:locator}")

snippet     uncheck
abbr        uncheck(locator)
options     word
  uncheck("${1:locator}")

snippet     visit
abbr        visit ...
options     word
  visit ${1}

snippet     select
abbr        select(value, options={})
options     word
  select("${1:value}", from: "${2:string}")

snippet     unselect
abbr        unselect(value, options={})
options     word
  unselect(${1:value}, from: ${2:string})

snippet     attach_file
abbr        attach_file(locator, path)
options     word
  attach_file(${1:locator}, ${1:path})
#}}}

snippet     click_on
abbr        click_on("...") link or button
options     word
  click_on("${1}")

# have {{{
snippet     have_selector
abbr        have_selector(*args)
options     word
  have_selector("${1:locator}")

snippet     have_selectorx
abbr        have_selector(:xpath, options={})
options     word
  have_selector(:xpath, "${1:locator}")

snippet     have_xpath
abbr        have_xpath(xpath, options={})
options     word
  have_xpath("${1}"${2:, ${3:options\}})

snippet     have_css
abbr        have_css(css, options={})
options     word
  have_css("${1}"${2:, ${3:options\}})


snippet     have_content
abbr        have_content(text)
options     word
  have_content("${1:text}")

snippet     have_text
abbr        have_text(text)
options     word
  have_text(${1})

snippet     have_link
abbr        have_link(locator, options={})
options     word
  have_link(${1:locator}${2:, ${3:options\}})

snippet     have_button
abbr        have_button(locator)
options     word
  have_button(${1:locator})

snippet     have_field
abbr        have_field(locator, options={})
options     word
  have_field(${1:locator}${2:, ${3:options\}})

snippet     have_checked_field
abbr        have_checked_field(locator)
options     word
  have_checked_field(${1:locator})

snippet     have_unchecked_field
abbr        have_unchecked_field(locator)
options     word
  have_unchecked_field(${1:locator})

snippet     have_select
abbr        have_select(locator, options={})
options     word
  have_select(${1:locator}${2:, ${3:options\}})

snippet     have_table
abbr        have_table(locator, options={})
options     word
  have_table(${1:locator}${2:, ${3:options\}})

#}}}
# has#{{{
snippet     has_selector?
alias       selector?
options     word
abbr        has_selector?(*args)
  has_selector?("${1}")

snippet     has_no_selector?
alias       no_selector?
options     word
abbr        has_no_selector?(*args)
  has_no_selector?("${1}")

snippet     has_selector?x
alias       selectorx?
options     word
abbr        has_selector?(:xpath, "...")
  has_selector?(:xpath, "${1}")

snippet     assert_selector
abbr        assert_selector(*args)
options     word
  assert_selector(${1})

snippet     assert_no_selector
abbr        assert_no_selector(*args)
options     word
  assert_no_selector(${1})

snippet     has_xpath?
abbr        has_xpath?(path, options={})
options     word
  has_xpath?(${1:path}${2:, ${3:options\}})

snippet     has_no_xpath?
abbr        has_no_xpath?
options     word
  has_no_xpath?(${1:path}${2:, ${3:options\}})

snippet     has_css?
options     word
abbr        has_css?(path, options={})
  has_css?(${1:path}${2:, ${3:options\}})

snippet     has_no_css?
options     word
abbr        has_no_css?(path, options={})
  has_no_css?(${1:path}${2:, ${3:options\}})

snippet     has_text?
abbr        has_text?(content)
options     word
  has_text?(${1:string})

snippet     has_no_text?
abbr        has_no_text?(content)
options     word
  has_no_text?(${1:string})

snippet     has_link?
abbr        has_link?(locator, options={})
options     word
  has_link?(${1:locator}${2:, ${3:options\}})

snippet     has_no_link?
abbr        has_no_link?(locator, options={})
options     word
  has_no_link?(${1:locator}${2:, ${3:options\}})

snippet     has_button?
abbr        has_button?(locator)
options     word
  has_button?(${1:locator})

snippet     has_no_button?
abbr        has_no_button?(locator)
options     word
  has_no_button?(${1:locator})

snippet     has_field?
abbr        has_field?(locator, options={})
options     word
  has_field?(${1:locator}${2:, ${3:with: "...", type: :email\}})

snippet     has_no_field?
abbr        has_no_field?(locator, options={})
options     word
  has_no_field?(${1:locator}${2:, ${3:with: "...", type: :email\}})

snippet     has_checked_field?
abbr        has_checked_field?(locator)
options     word
  has_checked_field?(${1:locator})

snippet     has_no_checked_field?
abbr        has_no_checked_field?(locator)
options     word
  has_no_checked_field?(${1:locator})

snippet     has_unchecked_field?
abbr        has_unchecked_field?(locator)
options     word
  has_unchecked_field?(${1:locator})

snippet     has_no_unchecked_field?
abbr        has_no_unchecked_field?(locator)
options     word
  has_no_unchecked_field?(${1:locator})

snippet     has_select?
abbr        has_select?(locator, options={})
options     word
  has_select?(${1:locator}${2:, ${3:options\}})

snippet     has_no_select?
abbr        has_no_select?(locator, options={})
options     word
  has_no_select?(${1:locator}${2:, ${3:options\}})

snippet     has_table?
abbr        has_table?(locator, options={})
options     word
  has_table?(${1:locator}${2:, ${3:options\}})

snippet     has_no_table?
abbr        has_no_table?(locator, options={})
options     word
  has_no_table?(${1:locator}${2:, ${3:options\}})

snippet     has_content?
alias       content?
options     word
abbr        has_content?("...")
  has_content?(${1})
#}}}

# find {{{
snippet     find
abbr        find(*args)
options     word
  find(${1})

snippet     find_field
abbr        find_field(locator)
options     word
  find_field(${1:locator})

snippet     find_link
abbr        find_link(locator)
options     word
  find_link(${1:locator})

snippet     find_button
abbr        find_button(locator)
options     word
  find_button(${1:locator})

snippet     find_by_id
abbr        find_by_id(id)
options     word
  find_by_id(${1:id})

snippet     findx
abbr        find(:xpath, "...")
options     word
  find(:xpath, "${1}")

snippet     all
abbr        all(*args)
options     word
  all(${1})

snippet     first
abbr        first(*args)
options     word
  first(${1})
#}}}

# with {{{
snippet     within
abbr        within("...") do ... end
options     word
  within "${1}" do
    ${2}
  end

snippet     withinx
abbr        within :xpath, "..." do ... end
options     word
  within :xpath, "${1}" do
    ${2}
  end

snippet     withinf
abbr        within_fieldset "..." do ... end
options     word
  within_fieldset ${1} do
    ${2}
  end
#}}}

# js {{{
snippet     execute_script
abbr        page.execute_script("...")
options     word
alias       script_ex
  execute_script(${1})

snippet     evaluate_script
alias       script_ev
options     word
abbr        evaluate_script("...")
  page.evaluate_script(${1})
#}}}

# debug {{{
snippet     save_and_open_page
options     word
  save_and_open_page

snippet     print
options     word
  print ${1:page.html}

snippet     save_screenshot
options     word
  page.save_screenshot("${1:name.png}")
#}}}

#}}}

