include ruby.snip
include ruby.shoulda.snip
include ruby.factory-girl.snip

snippet reqs
abbr    require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')
options head
  require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

snippet req
abbr    require 'spec_helper'
options head
  require 'spec_helper'

# basic#{{{
snippet described_class
abbr    described_class
options word
  described_class

snippet context
abbr    context 'message' do ... end
alias   con
options head
  context ${1} do
    ${2}
  end

snippet before
alias   bef
abbr    before do ... end
options head
  before do
    ${1}
  end

snippet after
abbr    after do ... end
options head
  after do
    ${1}
  end

snippet itd
abbr    it 'message' do ... end
options head
  it '${1}' do
    ${2}
  end

snippet it
abbr    it { ... }
options head
  it { ${1} }

snippet describe
abbr    describe 'message' do ... end
alias   des
options head
  describe ${1} do
      ${2}
  end

snippet example
abbr    example { ... }
options word
  example { ${1} }

snippet sub
abbr    subject { ... }
alias   subject
options head
  subject { ${1} }

snippet shared_examples_for
abbr    shared_examples_for 'noun' do ... end
alias   shared
options head
  shared_examples_for '${1:noun}' do ${2:#:|args|}
    ${3}
  end

snippet shared_context
abbr    shared_context 'noun' do ... end
alias   shared
options head
  shared_context '${1:noun}' do ${2:#:|args|}
    ${3}
  end

snippet pending
abbr    pending '...'
alias   pend
options head
  pending '${1}'

snippet expect
abbr    expect(...).to
options word
  expect(${1}).to ${2}

snippet expectd
abbr    expect { ... }.to
options word
  expect { ${1} }.to ${2}

snippet it_behaves_like
abbr    it_behaves_like 'noun' do ... end
alias   behaves
options head
  it_behaves_like '${1:noun}'

snippet include_context
abbr    include_context 'noun' do ... end
options head
  include_context '${1:noun}'

snippet include_examples
abbr    include_examples 'noun' do ... end
options head
  include_examples '${1:noun}'

# snippet it_has_behavior
# abbr    it_has_behavior 'adjective' do ... end
# alias   behavior
# options head
#   it_has_behavior '${1:adjective}' ${2:#:do}

snippet it_should_behave_like
abbr    it_should_behave_like 'noun'
alias   behave
options head
  it_should_behave_like '${1:noun}' ${2:#:do}

snippet let
abbr    let(:name) {}
options head
  let(:${1:symbol}) { ${2} }

snippet let!
abbr    let!(:name) {}
options head
  let!(:${1:symbol}) { ${2} }

snippet its
abbr    its(:method) { ... }
options head
  its(:${1}) { ${2} }
#}}}

# stub#{{{
snippet .stub
abbr    .stub(:method).with(...) { value }
regexp  '\.[stub]*$'
options word
  .stub(:${1:method})${2:.with(${3\})} { ${4:value} }

snippet .unstab
abbr    .unstab(:method_name)
regexp  '\.[unstab]*$'
options word
  .unstab(${1:method_name})

snippet .and_return
abbr    .and_return(...)
regexp  '\.[and_return]*$'
options word
  .and_return(${1})

snippet .stub_hash
abbr    .stub(message: :value).with(...)
regexp  '\.[stub_hash]*$'
options word
  .stub(${1:method}: ${2:value})${3:.with(${4\})}

snippet .stub_method
abbr    .stub(:method) { ... }
regexp  '\.[stub_method]*$'
options word
  .stub(${1:method})${2:.with(${3\})} { ${4} }

snippet .stubd
abbr    .stub(:method).with(...) do |arg| ... end
regexp  '\.[stubd]*$'
options word
  .stub(${1:method})${2:.with(${3\})} do |${4:arg}|
    ${4}
  end

snippet stub_chain
abbr    stub_chain(...) { value }
alias   .chain
regexp  '\.[stub_chain]*$'
options word
  stub_chain(${1::one, :two}) { ${2:value} }

snippet receive_message_chain
abbr    receive_message_chain(*symbols).and_return(...)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
alias   chain
options word
  receive_message_chain(${1:*sym}).
    and_return { ${2} }

snippet allow_any_instance_of
abbr    allow_any_instance_of().to receive(:method).and_return(value)
alias   any_instance
options head
  allow_any_instance_of(${1}).to receive${2}

snippet .unstub
abbr    .unstub(:method)
regexp  '\.[unstub]*$'
options word
  .unstub(:${1:method})

snippet stub_const
abbr    stub_const('Klass', var)
alias   stub_klass const_stub
options head
  stub_const('${1:Klass::Const}', ${2:value})

snippet hide_const
abbr    hide_const('Klass')
alias   hide_klass const_hide
options head
  hide_const('${1:Klass::Const}')

snippet .as_null_object
abbr    .as_null_object
regexp  '\.[as_null_object]*$'
options word
  .as_null_object
#}}}

# Message expectations#{{{
snippet .and_call_original
abbr    .and_call_original
alias   original
regexp  '\.[and_call_original]*$'
options word
  .and_call_original

snippet receive
abbr    receive
options word
  receive(:${1:method})${2:.with(${3:args\})}${4}

# Deplicated!

# snippet should_receive_exactly
# abbr    should_receive(:method).exactly(n).times
# regexp  '\.[should_receive_exactly]*$'
# options word
#   should_receive(:${1:method}).exactly(${2:n}).times
#
# snippet should_receive_at_least
# abbr    should_receive(:method).at_least(n).times
# regexp  '\.[should_receive_at_least]*$'
# options word
#   should_receive(:${1:method}).at_least(${2:n}).times
#
# snippet should_receive_at_most
# abbr    should_receive(:method).at_most(n).times
# regexp  '\.[should_receive_at_most]*$'
# options word
#   should_receive(${1:method}).at_most(${2:n}).times
#
# snippet .should_receive
# abbr    .should_receive(:method).with(:args).and_return(value)
# regexp  '\.[should_receive]*$'
# options word
#   .should_receive(:${1:method})${2:.with(${3:args\})} { ${4:value} }
#
# snippet .should_received
# abbr    .should_receive(:method) do |args| ... end
# regexp  '\.[should_received]*$'
# options word
#   should_receive(:${1:method}) do |${2:args}|
#     ${3}
#   end

snippet .once
abbr    .once
options word
regexp  '\.[once]*$'
  .once

snippet .twice
abbr    .twice
options word
regexp  '\.[twice]*$'
  .twice

snippet .exactly
abbr    .exactly(n)
alias   .count
options word
regexp  '\.[exactlycount]*$'
  .exactly(${1::once, :twice, n})

snippet .at_most
abbr    .at_most(n)
options word
regexp  '\.[at_most]*$'
  .at_most(${1::once, :twice, n})

snippet .at_least
abbr    .at_least(n)
regexp  '\.[at_least]*$'
options word
  .at_least(${1::once, :twice, n})

snippet .ordered
abbr    .ordered
regexp  '\.[ordered]*$'
options word
  .ordered
#}}}

# filter {{{
# describeの後に続けて書くと、テストを飛ばしてくれる(spec_helperに設定必要)
snippet focus
abbr    focus: true
alias   '\v(context|describe|specific|example)\s*'
options word
  focus: ${1:true}

snippet broken
abbr    broken: true
alias   '\v(context|describe|specific|example)\s*'
options word
  broken: ${1:true}

snippet issue
abbr    issue: true
alias   '\v(context|describe|specific|example)\s*'
options word
  issue: ${1:number}

snippet slow
abbr    slow: true
alias   '\v(context|describe|specific|example)\s*'
options word
  slow: true
#}}}

snippet when
abbr    context 'when ...' do ... end
options head
  context 'when ${1}' do
    ${2}
  end

snippet given
abbr    context 'given ...' do ... end
options word
  context 'given ${1}' do
    ${2}
  end

snippet with
abbr    context 'with ...' do ... end
options head
  context 'with ${1}' do
    ${2}
  end

# Matchers {{{
snippet respond_to
abbr    respond_to(*methods).with(n).arguments
alias   respond_to
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  respond_to(:${1:*methods})${2:.with(${3:n\}).argument${4:s\}}

snippet be_a
abbr    be_a(Klass)
alias   be_an
options word
  be_a ${1:Klass}

snippet be_nil
abbr    be_nil
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_nil

snippet be_empty
abbr    be_empty
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_empty

snippet be_zero
abbr    be_zero
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_zero

snippet stisfy
abbr    stisfy { |v| ... }
alias   give_block
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  stisfy { |v| ${1} }

snippet raise_error
abbr    raise_error(ErrorKlass)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  raise_error(${1:NameError})

snippet change
abbr    change {}.from().to()
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  change { ${1} }.from(${2}).to(${3})

snippet change_by
abbr    change_by
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  change_by { ${1} }.by(${2})

snippet eq
abbr    eq(...)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  eq ${1}

snippet eql
abbr    eql(...)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  eql ${1}

snippet be
abbr    be < ...
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be ${1:<} ${2}

snippet match_array
abbr    match_array(...)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
alias   array_match contain_exactly
options word
  match_array ${1:array}

snippet kind_of
abbr    be_a_kind_of(...)
alias   be_a_kind_of
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_a_kind_of ${1:Klass}

snippet instance_of
abbr    be_an_instance_of(...)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_an_instance_of ${1:Klass}

snippet throw_symbol
abbr    throw_symbol(:symbol)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  throw_symbol(${1:#::symbol: value})

snippet have_key
abbr    have_key(:key)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  have_key :${1:keys}

snippet include
abbr    include(Module)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  include ${1:Module}

snippet be_cover
abbr    be_cover(n)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_cover ${1:n}

snippet be_within
abbr    be_within(start).of(end)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_within(${1:start}).of(${2:end})

snippet exist
abbr    exist
alias   exists
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  exist

snippet match
abbr    match /.../
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  match ${1:str_or_regexp}

snippet yield_control
abbr    yield_control.once
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  yield_control${1:#:.once}

snippet yield_with_args
abbr    yield_with_args(*args)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  yield_with_args(${1:*args})

snippet yield_with_no_args
abbr    yield_with_no_args
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  yield_with_no_args

snippet yield_succesive_args
abbr    yield_succesive_args(*args)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  yield_succesive_args(${1:*args})

snippet end_with
abbr    end_with('...')
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  end_with(${1:'str' or *values for array})

snippet start_with
abbr    start_with('...')
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  start_with(${1:'str' or *values for array})


# Rspec 3
snippet be_truthy
abbr    be_truthy
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_truthy

snippet be_falsy
abbr    be_falsy
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  be_falsy
#}}}

# rspec.rails? {{{
snippet allow
abbr    allow
options word
  allow(${1}).to receive${2}

snippet assings
abbr    assings
options word
  expect(assigns(:${1:name})).to ${2}

snippet stub_model
abbr    stub_model(...)
options word
  stub_model(${1})
# }}}

# Rspec::Matchers... {{{
snippet RSpec::Matchers.define
abbr    RSpec::Matchers.define :name do ... end
alias   my_matcher_define
options word
  RSpec::Matchers.define :${1:method_name} do |expected|
    match do |actual|
      ${2}
    end

    chain :but_smaller_than do |second|
      @second = second
    end

    description do
      "a user named '#{expected}'"
    end

    ${4:#:diffable}
  end

snippet my_matcher_create
abbr    class MyMatcher < RSpec::Matchers::BuiltIn::BaseMatcher ...
alias   Matcher
options head
  class ${1:My}Matcher < RSpec::Matchers::BuiltIn::BaseMatcher
    def initialize(*args)
      ${3}
    end

    def matches?(list_or_block)
      # return boolean
    end

    def failure_message
      <<-MESSAGE.gsub(/^\s*/, '')
      expected to detect ...
      expected: '...'
      got: '...'
      MESSAGE
    end

    def failure_message_when_negated
      <<-MESSAGE.gsub(/^\s*/, '')
      expected not to detect ...
      expected: '...'
      got: '...'
      MESSAGE
    end
  end
<<<<<<< HEAD
#}}}

# Matcher {{{
snippet be_respond_to
abbr    be_respond_to(:method_name)
options word
  be_respond_to(:${1:method})

snippet be_const_defined
abbr    be_const_defined(:Name)
options word
  be_const_defined(:${1:Name})
# }}}
=======

  def ${2:be_instance_of}(*args)
    $1Matcher.new(self, *args)
  end
# }}}

# rspec-expectations {{{
snippet .or
abbr    eql(...).or (...)
regexp  '\v((to|should|to_not|should_not)\s|\.$)'
options word
  .or ${1}

# }}}

# -----
snippet singular_name
  singular_name

snippet plural_name
abbr    plural_name
options word
  plural_name


snippet build_instance
abbr    build_instance
options word
  build_instance

snippet create_instance
abbr    create_instance
options word
  <`3`>create_instance

>>>>>>> 63f681a56dc6492bf556992b232081cb16254e1b
