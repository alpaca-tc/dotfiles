# rspec#{{{
# basic#{{{
snippet     con
abbr        context "..." do
  context "${1}" do
    ${2}
  end

snippet     bef
abbr        before do ... end
  before do
    ${1}
  end

snippet     itd
abbr        it ... do
  it "${1}" do
    ${2}
  end

snippet     it
abbr        it { ... }
  it { ${1} }

snippet     des
abbr        describe do
  describe "${1}" do
      ${2}
  end

snippet     sub
abbr        subject
  subject { ${1} }

snippet     share
abbr        shared_examples_for
  shared_examples_for "${1:name}" do
    ${2}
  end

snippet     behave
abbr        it_should_behave_like "..."
options     word
  it_should_behave_like "${1:name}"

snippet     behaves
abbr        it_behaves_like "..."
options     word
  it_behaves_like "${1:name}"

snippet     let
abbr        let(:name) {}
  let(:${1:symbol}) { ${2} }

snippet     reqs
abbr        require rspec
  require File.expand_path(File.dirname(__FILE__) + "/../spec_helper")

snippet     its
  its(${1}) { ${2} }

snippet     raise_error
abbr        raise_error(ErrorKlass)
options     word
  raise_error(${1:NameError})
#}}}
# controller#{{{
snippet     controller.class.skip_before_filter
abbr        controller.class.skip_before_filter :method
options     word
  controller.class.skip_before_filter :${1:method}

snippet     controller
abbr        controller do ... end
options     word
  controller do
    ${1}
  end
#}}}

# stub#{{{
snippet     stub
abbr        .stub(:method).and_return(value)
options     word
  stub(:${1:method})${2:.with(${3\})}.and_return(${4:value})

snippet     and_return
abbr        and_return
options     word
  and_return(${1})

snippet     stub_hash
abbr        stub(message: :value)
options     word
  stub(${1:method}: ${2:value})${3:.with(${4\})}

snippet     stub_method
abbr        stub(:method) { ... }
options     word
  stub(${1:method})${2:.with(${3\})} { ${4} }

snippet     stub_do
abbr        stub(:method) do |arg| ... end
options     word
  stub(${1:method}) do |${2:arg}|
    ${3}
  end

snippet     stub_chain
abbr        stub_chain(...).and_return(value)
alias       chain
options     word
  stub_chain(${1::one, :two}).and_return(${2:value})

snippet     stub_any_instance
abbr        any_instance.stub(:method).and_return(value)
options     word
  any_instance.stub(:${1:method})${2:.with(${3:args\})}.and_return(${4})

snippet     stub_any_instanceh
abbr        any_instance.stub(...)
options     word
  any_instance.stub(:${1:{ method: value }})

snippet     unstub
abbr        unstub(:method)
options     word
  unstub(:${1:method})

snippet     stub_const
abbr        stub_const("Klass", var) クラスを偽装
alias       stub_klass
options     word
  stub_const("${1:Klass}", ${2:alias})

snippet     hide_const
abbr        hide_const("Klass") クラスを隠す
options     word
  hide_const("${1:Klass}")

snippet     as_null_object
abbr        as_null_object
options     word
  as_null_object
#}}}
# Message expectations#{{{
snippet     should_receive
abbr        should_receive(:method).with(:args).and_return(value)
options     word
  should_receive(:${1:method})${2:.with(${3:args\})}.and_return(${4:value})

snippet     should_receivedo
abbr        should_receive(:method) do |args| ... end
options     word
  should_receive(:${1:method}) do |${2:args}|
    ${3}
  end

snippet     and_call_original
abbr        and_call_original
alias       original
options     word
  and_call_original

snippet     should_receive_exactly
abbr        should_receive(:method).exactly(n).times ぴったり
options     word
  should_receive(:${1:method}).exactly(${2:value}).times

snippet     should_receive_at_least
abbr        should_receive(:method).at_least(n).times
options     word
  should_receive(:${1:method}).at_least(${2:n}).times

snippet     should_receive_at_most
abbr        should_receive(:method).at_most(n).times
options     word
  should_receive(${1:method}).at_most(${2:n}).times
#}}}

# filter {{{
# describeの後に続けて書くと、テストを飛ばしてくれる(spec_helperに設定必要)
snippet     focus
abbr        focus: ...
options     word
  focus: ${1:true}

snippet     broken
abbr        broken: ...
options     word
  broken: ${1:true}

snippet     issue
abbr        issue: ...
options     word
  issue: ${1:number}

snippet     slow
abbr        slow: true
options     word
  slow: true
#}}}
#}}}

# shoulda-matchers {{{
# other#{{{
snippet     named_scope
abbr        named_scope(scope, conditions: ...)
options     word
  have_named_scope(${1:scope}, conditions: ${2})

snippet     instance_method
abbr        instance_method(method_name)
options     word
  instance_method(${1:method_name})

snippet     have_class_methods
abbr        have_class_methods(method)
options     word
  have_class_methods(${1:method})

snippet     have_indices
abbr        have_indices(field)
options     word
  have_indices(${1:field})
#}}}

# common#{{{
snippet     kind_of
abbr        be_a_kind_of(...)
options     word
  be_a_kind_of(${1:Klass})

snippet     instance_of
abbr        be_an_instance_of(...)
options     word
  be_an_instance_of(${1:Klass})

snippet     have_key
abbr        have_key(...)
options     word
  have_key(${1:key})
#}}}

# Module: Shoulda::ActiveRecord::Matchers#{{{
# validation#{{{
snippet     .with_message
abbr        .with_message(regexp)
options     word
  .with_message(${1})

snippet     allow_m
abbr        allow_mass_assignment_of(value)
options     word
  allow_mass_assignment_of(${1:value})

snippet     allow_v
abbr        allow_value(value).for(column)
options     word
  allow_value(${1:value}).for(:${2:column})

snippet     inclusion
abbr        ensure_inclusion_of(attr).in_range(...)
options     word
  ensure_inclusion_of(${1:column}).in_range(${2:1..100})${3:.with_low_message(${4:message\})}${5:.with_high_message${6:message\}}

snippet     exclusion
abbr        ensure_exclusion_of(...)
options     word
  ensure_exclusion_of(${1:column})
    ${2:.in_range(${3:10..20\})}

snippet     confirmation
abbr        validate_confirmation_of(...)
options     word
  validate_confirmation_of(${1:column})

snippet     length
abbr ensure_length_of(...).is_at_least(...)
options     word
  ensure_length_of(${1:column})${2:.is_at_least(${3\}})${4:.is_at_most(${5\}})${6:.with_short_message(/${7:regext\}/) }

snippet     acceptance
abbr validate_acceptance_of(...)
options     word
  validate_acceptance_of(${1:column})

snippet     format_of
abbr validate_format_of(...)
options     word
  validate_format_of(${1:column}).with(${2:message})

snippet     numericality
abbr        validate_numericality_of(...)
options     word
  validate_numericality_of(${1:column})

snippet     presence
abbr        validate_presence_of(...)
options     word
  validate_presence_of(${1:column})

snippet     uniq
abbr        validate_uniqueness_of(...)
options     word
  validate_uniqueness_of(${1:column})${2:.scoped_to: ${3:scope_name\}}${4:.case_insensitive}
#}}}
# db common#{{{
snippet     have_db_index
abbr        have_db_index(columns)
options     word
  have_db_index(${1:columns})${2:.unique(true)}

snippet     have_db_indexc
abbr        have_db_index([name, column])
options     word
  have_db_index([${1:name}, ${2:column}])

snippet read_only_attributes
abbr        have_readonly_attributes(field)
  have_read_only_attributes(:${1:field})
#}}}
# association#{{{
snippet     belong
abbr        belong_to(...)
options     word
  belong_to(${1:table})

snippet     have_many
abbr        have_many(...)
options     word
  have_many(${1:table})${2:.dependent(${3::destroy\})}

snippet     have_one
abbr        have_one(...)
options     word
  have_one(${1:table})${2:.dependent(${3::destroy\})}

snippet     have_manyt
abbr        have_many(...).through(...)
options     word
  have_many(${1:table}).through(${2:table})${3:.dependent(${4::destroy\})}

snippet     have_and_belong_to_many
abbr        have_and_belong_to_many(association)
options     word
  have_and_belong_to_many(${1:table})
#}}}
#}}}
# Module: Shoulda::Matchers::ActiveRecord#{{{
snippet     accept_nested_attributes_for
abbr        accept_nested_attributes_for(field)
options     word
  accept_nested_attributes_for(${1:field})${2:.allow_destroy(true)}${3:.limit(${4\})}${5:.update_only}

snippet     have_db_columns
abbr        have_db_columns(field)
options     word
  should_have_db_columns(${1:field})

snippet     query_the_database
abbr        query_the_database(time=nil)
options     word
  query_the_database(${1:4}.times)${2:.or_less}${3:.when_calling(${4:method_name\})}${5:.with(${6:parameter\})}

snippet     serialize
abbr        serialize(name)
options     word
  serialize(${1:name})${2:.as(${3:Hash\})}
#}}}
#Module: Shoulda::Matchers::ActionMailer#{{{
snippet     have_sent_email
abbr        have_sent_email...
options     word
  have_sent_email${1:.with_subject(${2\})}
    ${3:.from(${4\})}
    ${5:with_body(${6\})}
    ${7:to(${8\})}
    ${9:with_part('text/html', /${10:regexp\}/)}
    ${11:reply_to(${12\})}
#}}}
#Module: Shoulda::Matchers::ActionController#{{{
snippet     assign
abbr        assign_to(variable)
options     word
  assign_to(${1:column})${2:with(${3\})}${3:.with_kind_of(${4:Class\})}

snippet     filter_param
abbr        filter_param(key)
options     word
  filter_param(${1:key})

snippet     render_template
abbr        render_template(options={}, message=nil)
options     word
  render_template(${1:templete})

snippet     render_with_layout
abbr        render_with_layout(name)
options     word
  render_with_layout${1:(${name\})}

snippet     respond_with
abbr        respond_with(status)
options     word
  respond_with(${1::success|:redirect|:missing|:error|404})

snippet     resopnd_with_content_type
abbr        resopnd_with_content_type(content_type)
options     word
  resopnd_with_content_type(${1::text|:csv|/json/|'application/rss'})

snippet     route
abbr        route(method, path).to(...)
options     word
  route(${1:method}, ${2:path}).to(action: ${3:action_name}, ${4:id: 4}})

snippet     flash
abbr        set_the_flash.to(message)
options     word
  set_the_flash${1:.to(${2:message})}
#}}}
#}}}

# capybara
# basic {{{

# node actions {{{
snippet     click_link_or_button
abbr        click_link_or_button(locator)
options     word
  click_link_or_button(${1:locator})

snippet     click_link
abbr        click_link(locator)
options     word
  click_link("${1:locator}")

snippet     click_button
abbr        click_button(locator)
options     word
  click_button("${1:locator}")

snippet     fill_in
abbr        fill_in(locator, options={})
options     word
  fill_in("${1:locator}", with: ${2:input_text})

snippet     choose
abbr        choose(locator)
options     word
  choose("${1:locator}")

snippet     check
abbr        check(locator)
options     word
  check("${1:locator}")

snippet     uncheck
abbr        uncheck(locator)
options     word
  uncheck("${1:locator}")

snippet     visit
abbr        visit ...
options     word
  visit ${1}

snippet     select
abbr        select(value, options={})
options     word
  select("${1:value}", from: "${2:string}")

snippet     unselect
abbr        unselect(value, options={})
options     word
  unselect(${1:value}, from: ${2:string})

snippet     attach_file
abbr        attach_file(locator, path)
options     word
  attach_file(${1:locator}, ${1:path})
#}}}

snippet     click_on
abbr        click_on("...") link or button
options     word
  click_on("${1}")

# have {{{
snippet     have_selector
abbr        have_selector(*args)
options     word
  have_selector("${1:locator}")

snippet     have_selectorx
abbr        have_selector(:xpath, options={})
options     word
  have_selector(:xpath, "${1:locator}")

snippet     have_xpath
abbr        have_xpath(xpath, options={})
options     word
  have_xpath("${1}"${2:, ${3:options\}})

snippet     have_css
abbr        have_css(css, options={})
options     word
  have_css("${1}"${2:, ${3:options\}})


snippet     have_content
abbr        have_content(text)
options     word
  have_content("${1:text}")

snippet     have_text
abbr        have_text(text)
options     word
  have_text(${1})

snippet     have_link
abbr        have_link(locator, options={})
options     word
  have_link(${1:locator}${2:, ${3:options\}})

snippet     have_button
abbr        have_button(locator)
options     word
  have_button(${1:locator})

snippet     have_field
abbr        have_field(locator, options={})
options     word
  have_field(${1:locator}${2:, ${3:options\}})

snippet     have_checked_field
abbr        have_checked_field(locator)
options     word
  have_checked_field(${1:locator})

snippet     have_unchecked_field
abbr        have_unchecked_field(locator)
options     word
  have_unchecked_field(${1:locator})

snippet     have_select
abbr        have_select(locator, options={})
options     word
  have_select(${1:locator}${2:, ${3:options\}})

snippet     have_table
abbr        have_table(locator, options={})
options     word
  have_table(${1:locator}${2:, ${3:options\}})

#}}}
# has#{{{
snippet     has_selector?
alias       selector?
options     word
abbr        has_selector?(*args)
  has_selector?("${1}")

snippet     has_no_selector?
alias       no_selector?
options     word
abbr        has_no_selector?(*args)
  has_no_selector?("${1}")

snippet     has_selector?x
alias       selectorx?
options     word
abbr        has_selector?(:xpath, "...")
  has_selector?(:xpath, "${1}")

snippet     assert_selector
abbr        assert_selector(*args)
options     word
  assert_selector(${1})

snippet     assert_no_selector
abbr        assert_no_selector(*args)
options     word
  assert_no_selector(${1})

snippet     has_xpath?
abbr        has_xpath?(path, options={})
options     word
  has_xpath?(${1:path}${2:, ${3:options\}})

snippet     has_no_xpath?
abbr        has_no_xpath?
options     word
  has_no_xpath?(${1:path}${2:, ${3:options\}})

snippet     has_css?
options     word
abbr        has_css?(path, options={})
  has_css?(${1:path}${2:, ${3:options\}})

snippet     has_no_css?
options     word
abbr        has_no_css?(path, options={})
  has_no_css?(${1:path}${2:, ${3:options\}})

snippet     has_text?
abbr        has_text?(content)
options     word
  has_text?(${1:string})

snippet     has_no_text?
abbr        has_no_text?(content)
options     word
  has_no_text?(${1:string})

snippet     has_link?
abbr        has_link?(locator, options={})
options     word
  has_link?(${1:locator}${2:, ${3:options\}})

snippet     has_no_link?
abbr        has_no_link?(locator, options={})
options     word
  has_no_link?(${1:locator}${2:, ${3:options\}})

snippet     has_button?
abbr        has_button?(locator)
options     word
  has_button?(${1:locator})

snippet     has_no_button?
abbr        has_no_button?(locator)
options     word
  has_no_button?(${1:locator})

snippet     has_field?
abbr        has_field?(locator, options={})
options     word
  has_field?(${1:locator}${2:, ${3:with: "...", type: :email\}})

snippet     has_no_field?
abbr        has_no_field?(locator, options={})
options     word
  has_no_field?(${1:locator}${2:, ${3:with: "...", type: :email\}})

snippet     has_checked_field?
abbr        has_checked_field?(locator)
options     word
  has_checked_field?(${1:locator})

snippet     has_no_checked_field?
abbr        has_no_checked_field?(locator)
options     word
  has_no_checked_field?(${1:locator})

snippet     has_unchecked_field?
abbr        has_unchecked_field?(locator)
options     word
  has_unchecked_field?(${1:locator})

snippet     has_no_unchecked_field?
abbr        has_no_unchecked_field?(locator)
options     word
  has_no_unchecked_field?(${1:locator})

snippet     has_select?
abbr        has_select?(locator, options={})
options     word
  has_select?(${1:locator}${2:, ${3:options\}})

snippet     has_no_select?
abbr        has_no_select?(locator, options={})
options     word
  has_no_select?(${1:locator}${2:, ${3:options\}})

snippet     has_table?
abbr        has_table?(locator, options={})
options     word
  has_table?(${1:locator}${2:, ${3:options\}})

snippet     has_no_table?
abbr        has_no_table?(locator, options={})
options     word
  has_no_table?(${1:locator}${2:, ${3:options\}})

snippet     has_content?
alias       content?
options     word
abbr        has_content?("...")
  has_content?(${1})
#}}}

# find {{{
snippet     find
abbr        find(*args)
options     word
  find(${1})

snippet     find_field
abbr        find_field(locator)
options     word
  find_field(${1:locator})

snippet     find_link
abbr        find_link(locator)
options     word
  find_link(${1:locator})

snippet     find_button
abbr        find_button(locator)
options     word
  find_button(${1:locator})

snippet     find_by_id
abbr        find_by_id(id)
options     word
  find_by_id(${1:id})

snippet     findx
abbr        find(:xpath, "...")
options     word
  find(:xpath, "${1}")

snippet     all
abbr        all(*args)
options     word
  all(${1})

snippet     first
abbr        first(*args)
options     word
  first(${1})
#}}}

# with {{{
snippet     within
abbr        within("...") do ... end
options     word
  within "${1}" do
    ${2}
  end

snippet     withinx
abbr        within :xpath, "..." do ... end
options     word
  within :xpath, "${1}" do
    ${2}
  end

snippet     withinf
abbr        within_fieldset "..." do ... end
options     word
  within_fieldset ${1} do
    ${2}
  end
#}}}

# js {{{
snippet     execute_script
abbr        page.execute_script("...")
options     word
alias       script_ex
  execute_script(${1})

snippet     evaluate_script
alias       script_ev
options     word
abbr        evaluate_script("...")
  page.evaluate_script(${1})
#}}}

# debug {{{
snippet     save_and_open_page
options     word
  save_and_open_page

snippet     print
options     word
  print ${1:page.html}

snippet     save_screenshot
options     word
  page.save_screenshot("${1:name.png}")
#}}}

#}}}

