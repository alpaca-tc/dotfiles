# Backbone.Events# {{{
snippet .on
abbr    Backbone.Events.on(event, callback, [context])
regexp  '\.[onbind_?]*$'
alias   .bind
options word
  .on('${1:event}', ${2:fn}${3:, ${4:@\}})

snippet .off
abbr    Backbone.Events.off([event], [callback], [context])
regexp  '\.[unbindoff_?]*$'
alias   unbind
options word
  .off(${1:'event'}${2:, ${3:fn\}}${4:, ${5:context\}})

snippet .trigger
abbr    Backbone.Events.trigger(event, *args)
regexp  '\.[trigger_?]*$'
options word
  .trigger(${1:event}${2:, ${3:*args\}})

snippet .once
abbr    Backbone.Events.once(event, callback, [context])
regexp  '\.[once_?]*$'
options word
  .once('${1:event}', ${2:fn}${3:, ${4:@\}})

snippet .listenTo
abbr    Backbone.Events.listenTo(other, event, callback)
regexp  '\.[listenTo_?]*$'
options word
  .listenTo(${1:other_object}, '${2:event}', ${3:callback})

snippet .listenToOnce
abbr    Backbone.Events.listenToOnce(other, event, callback)
regexp  '\.[listenToOnce_?]*$'
options word
  .listenToOnce(${1:other_object}, '${2:event}', ${3:callback})

snippet .stopListening
abbr    Backbone.Events.stopListening([other], [event], [callback])
regexp  '\.[stopListening_?]*$'
options word
  .stopListening(${1:other}${2:, ${3:'event'\}}${4:, ${5:callback\}})

snippet eventList
abbr    Backbone.Events.eventList "add" ..., "remove" ...,
regexp  '[eventList_?]*$'
options head
  "add" (model, collection, options) — when a model is added to a collection.
  "remove" (model, collection, options) — when a model is removed from a collection.
  "reset" (collection, options) — when the collection's entire contents have been replaced.
  "sort" (collection, options) — when the collection has been re-sorted.
  "change" (model, options) — when a model's attributes have changed.
  "change:[attribute]" (model, value, options) — when a specific attribute has been updated.
  "destroy" (model, collection, options) — when a model is destroyed.
  "request" (model_or_collection, xhr, options) — when a model or collection has started a request to the server.
  "sync" (model_or_collection, resp, options) — when a model or collection has been successfully synced with the server.
  "error" (model_or_collection, resp, options) — when model's or collection's request to remote server has failed.
  "invalid" (model, error, options) — when a model's validation fails on the client.
  "route:[name]" (params) — Fired by the router when a specific route is matched.
  "route" (route, params) — Fired by the router when any route has been matched.
  "route" (router, route, params) — Fired by history when any route has been matched.
  "all" — this special event fires for any triggered event, passing the event name as the first argument.
# }}}

# Backbone.Model# {{{
snippet Backbone.Model
abbr    class Model extends Backbone.Model
options head
  class ${1:Model} extends Backbone.Model
    urlRoot: ''
    initialize: ->
      console?.log('initialize Backbone.Model: $1')

    defaults:
      ${1:name: 'value'}

snippet Backbone.Modelfull
abbr    class Model extends Backbone.Model
options head
  class ${1:Model} extends Backbone.Model
    urlRoot: ''
    initialize: ->
      console?.log('initialize Backbone.Model: $1')

    defaults:
      name: 'value'

    idAttribute: '_id' # use it instead of id

  $1.attributes #=> returns attributes
  $1.changed #=> returns changed attributes

snippet .get
abbr    Backbone.Model#get(attribute)
regexp  '\.[get_?]*$'
options word
  .get('${1:attribute}')

snippet .set
abbr    Backbone.Model#set(attributes, value)
regexp  '\.[set_?]*$'
options word
  .set(${1:attributes}: ${2:value})

snippet .escape
abbr    Backbone.Model#escape(attribute)
regexp  '\.[escape_?]*$'
options word
  .escape(${1:attribute})

snippet .has
abbr    Backbone.Model#has(attribute)
regexp  '\.[has_?]*$'
options word
  .has(${1:attribute})

snippet .unset
abbr    Backbone.Model#unset(attributes, [options])
regexp  '\.[unset_?]*$'
options word
  .unset('${1:attribute}'${2:,  silent: true})

snippet .clear
abbr    Backbone.Model#clear
regexp  '\.[clear_?]*$'
options word
  .clear(${1:silent: true})

snippet .id
abbr    Backbone.Model#id
regexp  '\.[id_?]*$'
options word
  .id

snippet .toJSON
abbr    Backbone.Model#toJSON
regexp  '\.[toJSON_?]*$'
options word
  JSON.stringify(${1})

snippet .sync
abbr    Backbone.Model#sync(method, model, [options])
regexp  '\.[sync_?]*$'
options word
  .sync('${1:create|read|update|delete}')

snippet .fetch
abbr    Backbone.Model#fetch([options])
regexp  '\.[fetch_?]*$'
options word
  .fetch
    data: {}
    dataType: 'json',
    success: ${1:fn}
    error: ${2:fn}

snippet .save
abbr    Backbone.Model#save
regexp  '\.[save_?]*$'
options word
  .save(${1:attributes})

snippet .save_full
abbr    Backbone.save([attributes], [options])
regexp  '\.[savefull_?]*$'
options word
  .save
    {
      ${1:attr: value}
    },
    {
      patch: true,
      wait: true,
      error: fn,
      success: fn,
    }

snippet .destroy
abbr    Backbone.Model#destroy([options])
regexp  '\.[destroy_?]*$'
options word
  .destroy(${1:success: fn})

snippet .keys
abbr    _#keys()
regexp  '\.[keys_?]*$'
options word
  .keys()

snippet .values
abbr    _#values()
regexp  '\.[values_?]*$'
options word
  .values()

snippet .pairs()
abbr    _#pairs
regexp  '\.[pairs_?]*$'
options word
  .pairs(${1})

snippet .invert
abbr    _#invert()
regexp  '\.[invert_?]*$'
options word
  .invert(${1})

snippet .pick
abbr    _#pick()
regexp  '\.[pick_?]*$'
options word
  .pick(${1})

snippet .omit
abbr    _#omit()
regexp  '\.[omit_?]*$'
options word
  .omit(${1})

snippet validate_func
abbr    Backbone.validate: (attr, options) -> ...
regexp  '[validate_func_?]*$'
options word
  validate: (attrs, options) ->
    ${1:return 'errorMessage'}

snippet .isValid
abbr    Backbone.Model#isValid()
regexp  '\.[isValid_?]*$'
options word
  .isValid()

snippet .url
abbr    Backbone.Model#url()
regexp  '\.[url_?]*$'
options word
  .url()

snippet .clone
abbr    Backbone.Model#clone()
regexp  '\.[clone_?]*$'
options word
  .clone()

snippet .hasChanged
abbr    Backbone.Model#hasChanged([attribute])
regexp  '\.[hasChanged_?]*$'
options word
  .hasChanged(${1:attribute_name})

snippet .changedAttributes
abbr    Backbone.Model#changedAttributes([attributes])
regexp  '\.[changedAttributes_?]*$'
options word
  .changedAttributes(${1:attributes})

snippet .previous
abbr    Backbone.Model#previous(attribute)
regexp  '\.[previous_?]*$'
options word
  .previous(${1:attribute})

snippet .previousAttributes
abbr    Backbone.Model#previousAttributes()
regexp  '\.[previousAttributes_?]*$'
options word
  .previousAttributes()
# }}}

# Backbone.Collection {{{
snippet Backbone.Colleaction
abbr    Backbone.Colleaction
options head
  class ${1}s extends Backbone.Collection
    model: $1
    url: '${3}'
# }}}

# Backbone.View {{{
snippet Backbone.View
abbr    Backbone.View
options head
  class ${1} extends Backbone.View
    id: ''
    el: ''
    template: _.template($('#template_name').html())
    tagName: ''
    className: ''
    events:
      'click body': 'onClickBody'

    initialize: ->
      # this.listenTo(@model, 'change', @render)

    render: ->
      @.$el.html(@template(@model.attributes))
      @

    onClickBody: ->
      console?.log('on click body')
# }}}

# Backbone
snippet .ajax=
abbr    Backbone.ajax = function(reqest) { ... }
regexp  '\.[ajax_?]*$'
options word
  .ajax = ${1}
