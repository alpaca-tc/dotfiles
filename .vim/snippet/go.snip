snippet     helloworld
abbr        package main\nimport fmt...
options     head
  package main

  import (
    "fmt"
  )

  func main() {
    fmt.Printf("Hello, world\n")
  }

snippet     func
abbr        func ...() { ... }
options     head
  func ${1:fname}(${2}) ${3} {
    ${0}
  }

snippet     import
options     head
  import (
    "${1:fmt}"
  )

snippet     package
options     head
  package ${1:main}

# snippet     printf
# options     word
#   fmt.Printf("${1}\n"${2:})
#
# snippet     println
# options     word
#   fmt.Println(${0:TARGET})

snippet     struct
options     head
  type ${1} struct {
    ${0:TARGET}
  }

snippet     interface
options     head
  type ${1} interface {
    ${0:TARGET}
  }

snippet for
abbr    for i := 0; i < 10; i++ { ... }
options head
  for ${1:i} := 0; $1 < ${2}; $1++ {
    ${3}
  }

snippet loop
abbr    for { ... }
options word
  for {
    ${1}
  }

snippet if
abbr    if ... { }
options word
  if ${1} {
    ${2}
  }

snippet ife
abbr    if err != nli { }
options word
  if err != nil {
    ${1: return err}
  }

snippet switch
abbr    switch {}
options word
  switch ${1:#:v} {
  case ${2:#:condition}:
    ${0:TARGET}
  }

snippet     select
abbr        select {}
options     head
  select {
  case ${1:#:condition}:
    ${0:TARGET}
  }

snippet     case
options     head
  case ${1:#:condition}:
    ${2:TARGET}

snippet for_list
abbr    for e := list.Front(); e != nil; e = e.Next() { }
options head
  for e := ${1}.Front(); e != nil; e = e.Next() {
    ${2}
  }

snippet forrange
abbr    for e := range ... {}
options head
  for ${1} range ${2} {
    ${3}
  }

snippet fn
abbr    func Method(...) {}
options word
  func ${1}(${2}) {
    ${3}
  }

snippet funcc
abbr    func (...) Method(...) error {}
options word
  func (${1:`alpaca#go#prevStructVariableName()`} *`alpaca#go#prevStruct()`) ${2:Method}(${3}) ${4:error} {
    ${5}
  }
