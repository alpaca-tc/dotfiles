# 基礎
# js
snippet     js
    JSON.stringify(${1})
snippet     jp
    JSON.parse(${1})

snippet     con
    constructor : (${1})->
      ${2}

# coffee
snippet     cons
    console.debug(${1})

# jquery
snippet     ajax
    $.ajax({
      url: ${1:http://..}
      async: ${2:true/false}
      dataType: ${3:'json' }
    })
snippet     getj
    $.ajaxSetup({ cache: false, async:${1} }); # IE hack
    _json = $.getJSON(
      "${2:https://graph.facebook.com/#{ id }}",
      (data, status)->
        ${3}
      'jsonp'
    )
snippet     ready
    $(document).ready(
      ->
        ${1}
    )

snippet     it
  it "${1}", ->
    ${2}

snippet     expect
  expect(${1}).toBe(${2})

# Describe
snippet d [des] describe "...". -> ...
    describe "${1:description}", ->
        ${2}

snippet des
    describe "${1:description}", ->
        ${2}

# Describe with beforeEach and it
snippet d [desc] describe("...". function() { beforeEach()... it...})
    describe '${1:when...}', ->
        beforeEach ->
            ${2}

        it '${3:should...}', ->
            expect(${4:condition}).toEqual(${5})

snippet desc
    describe '${1:when...}', ->
        beforeEach ->
            ${2}

        it '${3:should...}', ->
            expect(${4:condition}).toEqual(${5})

# It
snippet i it "...", -> ... ...
    it "${1:description}", ->
        ${2}

snippet it it "...", -> ... ...
    it "${1:description}", ->
        ${2}

# Any
snippet any
    jasmine.any(${1})

# Before Each
snippet b [bef, before] beforeEach -> ...
    beforeEach ->
        ${1}

snippet bef
    beforeEach ->
        ${1}

snippet before
    beforeEach ->
        ${1}

# After Each
snippet a [aft, after] afterEach -> ...
    afterEach ->
        ${1}

snippet aft
    afterEach ->
        ${1}

snippet after
    afterEach ->
        ${1}

# Expect
snippet e [ex] expect(...)...
    expect(${1:target})${2}

snippet ex
    expect(${1:target})${2}

# Expect not to be defined
snippet e [notd] expect(...).not.toBeDefined()...
    expect(${1:target}).not.toBeDefined()${2}

snippet notd
    expect(${1:target}).not.toBeDefined()${2}

# Expect not to be falsy
snippet e [notf] expect(...).to.toBeFalsy()...
    expect(${1:target}).not.toBeFalsy()${2}

snippet notf
    expect(${1:target}).not.toBeFalsy()${2}

# Expect not to be null
snippet e [notn] expect(...).not.toBeNull()...
    expect(${1:target}).not.toBeNull()${2}

snippet notn
    expect(${1:target}).not.toBeNull()${2}

# Expect to be truthy
snippet e [nott] expect(...).not.toBeTruthy()...
    expect(${1:target}).not.toBeTruthy()${2}
snippet nott
    expect(${1:target}).not.toBeTruthy()${2}

# Expect not to contain
snippet e [notc] expect(...).not.toContain(...)...
    expect(${1:target}).not.toContain(${2:value})${3}
snippet notc
    expect(${1:target}).not.toContain(${2:value})${3}

# Expect not to equal
snippet e [note] expect(...}).not.toEqual(...)...
    expect(${1:target}).not.toEqual(${2:value})${3}
snippet note
    expect(${1:target}).not.toEqual(${2:value})${3}

# Expect not to match
snippet e [notm] expect(...).not.toBeDefined()...
    expect(${1:target}).not.toBeDefined()${2}
snippet notm
    expect(${1:target}).not.toBeDefined()${2}

# Expect not
snippet e [notx] expect(...).not...
    expect(${1:target}).not${2}
snippet notx
    expect(${1:target}).not${2}

# Expect to be defined
snippet e [ed] expect(...).toBeDefined()...
    expect(${1:target}).toBeDefined()${2}
snippet ed
    expect(${1:target}).toBeDefined()${2}

# Expect to be falsy
snippet e [ef] expect(...).toBeFalsy()...
    expect(${1:target}).toBeFalsy()${2}
snippet ef
    expect(${1:target}).toBeFalsy()${2}

# Expect to be null
snippet e [en] expect(...).toBeNull()...
    expect(${1:target}).toBeNull()${2}
snippet en
    expect(${1:target}).toBeNull()${2}

# Expect to be truthy
snippet e [et] expect(...).toBeTruthy()...
    expect(${1:target}).toBeTruthy()${2}
snippet et
    expect(${1:target}).toBeTruthy()${2}

# Expect to contain
snippet e [ec] expect(...).toContain(...)...
    expect(${1:target}).toContain(${2:value})${3}
snippet ec
    expect(${1:target}).toContain(${2:value})${3}

# Expect to equal
snippet e [ee] expect(...).toEqual(...)...
    expect(${1:target}).toEqual(${2:value})${3}
snippet ee
    expect(${1:target}).toEqual(${2:value})${3}

# Expect to match
snippet e [em] expect(...).toMatch(...)...
    expect(${1:target}).toMatch(${2:pattern})${3}
snippet em
    expect(${1:target}).toMatch(${2:pattern})${3}

# Expect was called with
snippet e [escw] expect(...).wasCalledWith(...)...
    expect(${1:target}).wasCalledWith(${2:arguments})${3}
snippet escw
    expect(${1:target}).wasCalledWith(${2:arguments})${3}

# Expect was called
snippet e [esc] expect(...).wasCalled()...
    expect(${1:target}).wasCalled()${2}
snippet esc
    expect(${1:target}).wasCalled()${2}

# Expect was not called with
snippet e [notscw] expect(...).wasNotCalledWith(...)...
    expect(${1:target}).wasNotCalledWith(${2:arguments})${3}
snippet notscw
    expect(${1:target}).wasNotCalledWith(${2:arguments})${3}

# Expect was not called
snippet e [notsc] expect(...).wasNotCalled()...
    expect(${1:target}).wasNotCalled()${3}
snippet notsc
    expect(${1:target}).wasNotCalled()${3}

# Spy on
#snippet s [spy] spyOn(..., "...")...
#    spyOn(${1:object}, "${2:method}")${3}
#snippet s [spy] spyOn(..., "...")
#    spyOn(${1:object}, "${2:method}")${3}
snippet spy
    spyOn(${1:object}, '${2:method}')

# Spy on and call fake
snippet s [scf] spyOn(..., "...").andCallFake(...)...
    spyOn(${1:object}, "${2:method}").andCallFake(${3:function})${4}
snippet scf
    spyOn(${1:object}, "${2:method}").andCallFake(${3:function})${4}

# Spy on and call through
snippet s [sct] spyOn(..., "...").andCallThrough()...
    spyOn(${1:object}, "${2:method}").andCallThrough()${3}
snippet sct
    spyOn(${1:object}, "${2:method}").andCallThrough()${3}

# Spy on and return
snippet s [sr] spyOn(..., "...").andReturn(...)...
    spyOn(${1:object}, "${2:method}").andReturn(${3:arguments})${4}
snippet sr
    spyOn(${1:object}, "${2:method}").andReturn(${3:arguments})${4}

# Spy on and throw
snippet s [st] spyOn(..., "...").andThrow(...)...
    spyOn(${1:object}, "${2:method}").andThrow(${3:exception})${4}
snippet st
    spyOn(${1:object}, "${2:method}").andThrow(${3:exception})${4}

# Matcher
snippet m [matcher] to...: -> [init] ... return ...
    to${1}: ->
        var summary = this.actual
        this.actual = summary.clone().wrap('<div>').parent().html()

        ${2}

        ${3:false}
snippet matcher
    to${1}: ->
        var summary = this.actual
        this.actual = summary.clone().wrap('<div>').parent().html()

        ${2}

        ${3:false}

#Helper
snippet h [helper] beforeEach -> @addMatchers [matcher]
    beforeEach ->
        @addMatchers
            to${1}: ->
                var summary = this.actual
                this.actual = summary.clone().wrap('<div>').parent().html()

                ${2}

                ${3:false}
snippet helper
    beforeEach ->
        @addMatchers
            to${1}: ->
                var summary = this.actual
                this.actual = summary.clone().wrap('<div>').parent().html()

                ${2}

                ${3:false}

# Runs
snippet r [ru] runs -> ...
    runs ->
        ${1}
snippet ru
    runs ->
        ${1}

# Waits
snippet w [wa] waits(...)...
    waits(${1})${2}
snippet wa
    waits(${1})${2}

# jasmine jquery
snippet e [c] expect(...).toBeChecked()...
    expect(${1:target}).toBeChecked()${2}
snippet e [nc] expect(...).not.toBeChecked()...
    expect(${1:target}).not.toBeChecked()${2}

snippet e [en] expect(...).toBeEmpty()...
    expect(${1:target}).toBeEmpty()${2}
snippet e [nen] expect(...).not.toBeEmpty()...
    expect(${1:target}).not.toBeEmpty()${2}

snippet e [eh] expect(...).toBeHidden()...
    expect(${1:target}).toBeHidden()${2}
snippet e [neh] expect(...).not.toBeHidden()...
    expect(${1:target}).not.toBeHidden()${2}

snippet e [hc] expect(...).toHaveCss()...
    expect(${1:target}).toHaveCss(${2:{color : #000} })${3}
snippet e [nhc] expect(...).not.toHaveCss()...
    expect(${1:target}).not.toHaveCss(${2:{color : #000} })${3}

snippet e [hs] expect(...).toBeSelected()...
    expect(${1:target}).toBeSelected()${2}
snippet e [nhs] expect(...).not.toBeSelected()...
    expect(${1:target}).not.toBeSelected()${2}

snippet e [v] expect(...).toBeVisible()...
    expect(${1:target}).toBeVisible()${2}
snippet e [nv] expect(...).not.toBeVisible()...
    expect(${1:target}).not.toBeVisible()${2}

snippet e [c] expect(...).toContain()...
    expect(${1:target}).toContain(${2:jquerySelector})${3}
snippet e [nc] expect(...).not.toContain()...
    expect(${1:target}).not.toContain(${2:jquerySelector})${3}

snippet e [ex] expect(...).toExist()...
    expect(${1:target}).toExist()${2}
snippet e [nex] expect(...).not.toExist()...
    expect(${1:target}).not.toExist()${2}

snippet e [ha] expect(...).toHaveAttr()...
    expect(${1:target}).toHaveAttr(${2: attributeName }, ${3:attributeValue})${4}
snippet e [nha] expect(...).not.toHaveAttr()...
    expect(${1:target}).not.toHaveAttr(${2: attributeName }, ${3:attributeValue})${4}

snippet e [hp] expect(...).toHaveProp()...
    expect(${1:target}).toHaveProp(${2: attributeName }, ${3:attributeValue})${4}
snippet e [nhp] expect(...).not.toHaveProp()...
    expect(${1:target}).not.toHaveProp(${2: attributeName }, ${3:attributeValue})${4}

snippet e [hc] expect(...).toHaveClass()...
    expect(${1:target}).toHaveClass(${2:classname})${3}
snippet e [nhc] expect(...).not.toHaveClass()...
    expect(${1:target}).not.toHaveClass(${2:classname})${3}

snippet e [hd] expect(...).toHaveData()...
    expect(${1:target}).toHaveData(${2: key }, ${3: value })${4}
snippet e [nhd] expect(...).not.toHaveData()...
    expect(${1:target}).not.toHaveData(${2: key }, ${3: value })${4}

snippet e [hs] expect(...).toHaveText()...
    expect(${1:target}).toHaveText(${2: string })${3}
snippet e [nhs] expect(...).not.toHaveText()...
    expect(${1:target}).not.toHaveText(${2: string })${3}

snippet e [hi] expect(...).toHaveId()...
    expect(${1:target}).toHaveId(${2: string })${3}
snippet e [nhi] expect(...).not.toHaveId()...
    expect(${1:target}).not.toHaveId(${2: string })${3}

snippet e [hv] expect(...).toHaveValue()...
    expect(${1:target}).toHaveValue(${2: string })${3}
snippet e [nhv] expect(...).not.toHaveValue()...
    expect(${1:target}).not.toHaveValue(${2: string })${3}

snippet e [bto] expect(...).toBeenTriggeredOn()...
    expect(${1:target}).toBeenTriggeredOn()${2}
snippet e [nbto] expect(...).not.toBeenTriggeredOn()...
    expect(${1:target}).not.toBeenTriggeredOn()${2}

snippet e [bto] expect(...).toBeenTriggered()...
    expect(${1:target}).toBeenTriggered()${2}
snippet e [nbto] expect(...).not.toBeenTriggered()...
    expect(${1:target}).not.toBeenTriggered()${2}

snippet e [bpo] expect(...).toBeenPreventedOn()...
    expect(${1:target}).toBeenPreventedOn()${2}
snippet e [npto] expect(...).not.toBeenPreventedOn()...
    expect(${1:target}).not.toBeenPreventedOn()${2}

snippet e [bpo] expect(...).toBeenPrevented()...
    expect(${1:target}).toBeenPrevented()${2}
snippet e [npto] expect(...).not.toBeenPrevented()...
    expect(${1:target}).not.toBeenPrevented()${2}

snippet e [bpo] expect(...).toBeDisabled()...
    expect(${1:target}).toBeDisabled()${2}
snippet e [npto] expect(...).not.toBeDisabled()...
    expect(${1:target}).not.toBeDisabled()${2}

snippet e [bpo] expect(...).toBeFocused()...
    expect(${1:target}).toBeFocused()${2}
snippet e [npto] expect(...).not.toBeFocused()...
    expect(${1:target}).not.toBeFocused()${2}

snippet e [bh] expect(...).toBeHandle()...
    expect(${1:target}).toBeHandle(${2:eventName})${3}
snippet e [nbh] expect(...).not.toBeHandle()...
    expect(${1:target}).not.toBeHandle(${2:eventName})${3}

snippet e [bh] expect(...).toBeHandleWith()...
    expect(${1:target}).toBeHandleWith(${2:eventName}, ${3:eventHandler})${4}
snippet e [nbh] expect(...).not.toBeHandleWith()...
    expect(${1:target}).not.toBeHandleWith(${2:eventName}, ${3:eventHandler})${4}

snippet e [bh] expect(...).toContainHtml()...
    expect(${1:target}).toContainHtml(${2:string})${3}
snippet e [nbh] expect(...).not.toContainHtml()...
    expect(${1:target}).not.toContainHtml(${2:string})${3}
snippet loadf
    loadFixtures(${1:fixture_name})
