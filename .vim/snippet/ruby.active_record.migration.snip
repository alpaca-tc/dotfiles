# ActiveRecord::ConnectionAdapters::SchemaStatements #{{{
snippet create_table
abbr    create_table(table_name, opts={})
options head
  create_table :${1:table_name}${2:, opts} do |t|
    ${2}
  end

snippet change_table
abbr    change_table(table_name, opts={})
options head
  change_table :${1:table_name}${2:, opts} do |t|
    ${3}
  end

snippet drop_table
abbr    drop_table(table_name)
options head
  drop_table :${1:table_name}

snippet add_column
abbr    add_column(table_name, column_name, type, opts={})
options word
  add_column :${1:table_name}, ${2:column_name}, ${3:type}${4:, limit: 10, precision}

snippet table_alias_for
abbr    table_alias_for(table_name)
options word
  table_alias_for(:${1:name})

snippet table_exists?
abbr    table_exists?(table_name)
options word
  table_exists?(:${1:table_name})

snippet index_exists?
abbr    index_exists?(table_name, column_name, opts={})
options word
  index_exists?(:${1:table_name}, ${2:column_name}${3:, ${4:opts\}})

snippet column_exists?
abbr    column_exists?(table_name, column_name, type=nil, opts={})
options word
  column_exists?(:${1:table_name}, ${2:column_name}${3:, type${4:, opts\}})

snippet create_opts
abbr    id: 1, primary_key: 2, options: 3, temporary: 4, force: 5
alias   options
options word
  ${1:id: ${2:false\}}${2:, primary_key: ${3:column_name\}}${4:, opts}${5:temporary: ${6:bool\}}${7:, force: true}

snippet remove_column
abbr    remove_column(table_name, *column_names)
alias   remove_columns
options head
  remove_column :${1:table_name}, ${2:*column_names}

snippet change_column
abbr    change_column(table_name, column_name, type, opts={})
options head
  change_column :${1:table_name}, :${2:column_name}, :${3:type}${4:, ${5:opts}}

snippet change_column_default
abbr    change_column_default(table_name, column_name, default)
options head
  change_column_default(:${1:table_name}, :${2:column_name}, ${3:default})

snippet columns
abbr    columns(table_name, name=nil)
options head
  columns(:${1:table_name}${2:, ${3:name=nil\}})

snippet distinct
abbr    distinct(columns, order_by)
options head
  distinct(${1:"table.name"}, ${2:"table.created_at desc"})

snippet add_index
abbr    add_index(table_name, column_name, opts={})
options word
  # add_index :taggings, [:tagger_id, :tagger_type]
  # add_index :taggings, :tag_id, name: 'index_taggings_on_tag_id'
  # add_index :taggings, unique: true
  add_index :${1:table_name}, :${2:column_name}${3:, ${4:opts\}}

snippet add_index_options
abbr    add_index_options(table_name, column_name, opts={})
options word
  add_index_options(:${1:table_name}, :${2:column_name}${3:, ${4:opts\}})

snippet add_timestamps
abbr    add_timestamps(table_name)
options word
  add_timestamps(:${1:table_name})


snippet remove_index
abbr    remove_index(table_name, opts={})
options word
  remove_index(:${1:table_name}${2:, ${3:opts\}})

snippet remove_index!
abbr    remove_index!(table_name, index_name)
options word
  remove_index!(:${1:table_name}, :${2:index_name})

snippet rename_index
abbr    rename_index(table_name, old_name, new_name)
options word
  rename_index(:${1:table_name}, ${2:old_name}, ${3:new_name})

snippet remove_timestamps
abbr    remove_timestamps(table_name)
options word
  remove_timestamps(:${1:table_name})

snippet rename_column
abbr    rename_column(table_name, old_name, new_name)
options word
  rename_column(:${1:table_name}, :${2:old_name}, :${3:new_name})

snippet rename_table
abbr    rename_table(table_name, new_name)
options word
  rename_table(${1:table_name}, ${2:new_name})

snippet structure_dump
abbr    structure_dump
options word
  structure_dump

snippet index_name
abbr    index_name(table_name, opts)
options word
  index_name(${1:table_name}, ${2:opts})

snippet index_name_exists?
abbr    index_name_exists?(table_name, index_name, default)
options word
  index_name_exists?(${1:table_name}, ${2:index_name}, ${3:default})

snippet drop_schema_informantion
abbr    drop_schema_informantion
options word
  drop_schema_informantion

snippet initialize_schema_migrations_table
abbr    initialize_schema_migrations_table
options word
  initialize_schema_migrations_table

snippet assume_migrated_upto_version
abbr    assume_migrated_upto_version(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)
options word
  assume_migrated_upto_version(${1:version}${2:, ${3:migrations_path\}})

#snippet type_to_sql
#abbr    type_to_sql(type, limit=nil, precision=nil, scale)
#options word
#  type_to_sql(${1:type})

snippet native_database_types
abbr    native_database_types
options word
  native_database_types
#}}}

# snip#{{{
snippet     class_migrate
abbr        class_migrate
options     word
  class ${1:AddColumnToTable} < ActiveRecord::Migration
    ${2}
  end
#}}}

# table# {{{
snippet t.string
abbr    t.string :column, default: '', null: false, limit: 1
options word
  t.string :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.text
abbr    t.text :column, default: '', null: false, limit: 1
options word
  t.text :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.integer
abbr    t.integer :column, default: '', null: false, limit: 1
options word
  t.integer :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.float
abbr    t.float :column, default: '', null: false, limit: 1
options word
  t.float :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.decimal
abbr    t.decimal :column, default: '', null: false, limit: 1
options word
  t.decimal :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.datetime
abbr    t.datetime :column, default: '', null: false, limit: 1
options word
  t.datetime :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.timestamp
abbr    t.timestamp :column, default: '', null: false, limit: 1
options word
  t.timestamp :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.time
abbr    t.time :column, default: '', null: false, limit: 1
options word
  t.time :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.date
abbr    t.date :column, default: '', null: false, limit: 1
options word
  t.date :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.binary
abbr    t.binary :column, default: '', null: false, limit: 1
options word
  t.binary :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.boolean
abbr    t.boolean :column, default: '', null: false, limit: 1
options word
  t.boolean :${1:column}${2:, default: '${3}'}${4:, null: ${5:false}}${6:, limit: ${7:1}}

snippet t.references
abbr    t.references :column, index: { name: '' }, polymorphic: true, index: true
alias   t.belongs_to
options word
  t.references :${1}
    ${2:index: true,}
    ${3:polymorphic: true,}
    ${4:polymorphic: { default: 'Photo' \}}

snippet t.remove_references
abbr    t.remove_references(:column, *args)
alias   remove_belongs_to
options word
  t.remove_references :${1:column},
    ${1:index: true,}
    ${2:polymorphic: true,}
    ${3:polymorphic: { default: 'Photo' \}}

snippet t.column
abbr    t.column :column, :type, default: '', null: false, limit: 1
options word
  t.column :${1:column}, :${2:type}${3:, default: '${4}'}${5:, null: ${6:false}}${7:, limit: ${8:1}}

snippet t.index
abbr    t.index(column_name, options = {})
options word
  t.index :${1:[column]}${2:, unique: true}${3:, name: '${4\}'}

snippet t.remove
abbr    t.remove(*columns)
options word
  t.remove(${1:*columns})

snippet t.remove_index
abbr    t.remove_index(opts={})
options word
  t.remove_index(${1:column: [${2\}_id]}${3:name: '${4\}'\}})

snippet t.rename_index
abbr    t.rename_index(old_name, new_name)
options word
  t.rename_index(:${2:old_name}, :${3:new_name})

snippet t.remove_timestamps
abbr    t.remove_timestamps
options word
  t.remove_timestamps

snippet t.rename
abbr    t.rename(old_name, new_name)
options word
  t.rename(:${2:old_name}, :${3:new_name})

snippet t.column_exists?
abbr    t.column_exists?(column_name, type = nil, options = {})
options word
  t.column_exists?(${1:column_name}${2:, type = :${3:string\}})

snippet t.index_exists?
abbr    t.index_exists?(index_name, options = {})
options word
  t.index_exists?(${1:index_name}})

snippet t.change
abbr    t.change(column_name, type, options = {})
options word
  t.change(:${1:column}, :${2:type}${3:, default: '${4}'}${5:, null: ${6:false}}${7:, limit: ${8:1}})

snippet t.change_default
abbr    t.change_default(:column, value)
options word
  t.change_default(:${1:column}, ${2:value})
# }}}

