# basic#{{{
snippet     augroup
abbr        augroup ... augroup END
alias       aug
options     word
  augroup ${1:Name}
    ${2}
  augroup END

snippet     for
abbr        for value in array
options     word
  for ${1:value} in ${2:array}
    ${3}
  endfor

snippet     ford
abbr        for [key, value] in items(array)
options     word
  for [${1:key}, ${2:value}] in items(${3:array})
    ${4}
  endfor
#}}}

# for plugins#{{{
snippet     email
abbr        `g:my.info.email`
options     word
  `g:my.info.email`

snippet     myname
abbr        `g:my.info.author`
options     word
  `g:my.info.author`

snippet     exists?
abbr        if exists('...') | let ... | endif
options     word
  if !exists('${1:valiable}')
    let $1 = ${2}
  endif

snippet     loaded
abbr        if exists('g:...') ${2:|| (v:version < 700)} ...
options     word
  if exists('g:${1:variable}') ${2:|| (v:version < 700)}
    finish
  endif
  let g:$1 = 1

  let s:save_cpo = &cpo
  set cpo&vim

  let &cpo = s:save_cpo
  unlet s:save_cpo

snippet     mit
  "=============================================================================
  " FILE: ${1:file_name}
  " AUTHOR: `g:my.info.author` <`g:my.info.email`>
      " Last Modified: `strftime('%Y-%m-%d')`
  " License: MIT license  {{{
  "     Permission is hereby granted, free of charge, to any person obtaining
  "     a copy of this software and associated documentation files (the
  "     "Software"), to deal in the Software without restriction, including
  "     without limitation the rights to use, copy, modify, merge, publish,
  "     distribute, sublicense, and/or sell copies of the Software, and to
  "     permit persons to whom the Software is furnished to do so, subject to
  "     the following conditions:
  "
  "     The above copyright notice and this permission notice shall be included
  "     in all copies or substantial portions of the Software.
  "
  "     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  "     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  "     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  "     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  "     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  "     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  "     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  " }}}
  "=============================================================================
#}}}

# for .vimrc#{{{
snippet     neol
  NeoBundle ${1}, {
  \ 'depends' : [],
  \ 'build' : {
  \   'unix' : '',
  \   'mac'  : '',
  \ },
  \ 'autoload': {
  \   'mappings' : [],
  \   'commands' : [],
  \   ''
  \ }
  \ }

snippet     neo
    NeoBundle '${1}'

snippet   neobundle#get
  let bundle = neobundle#get('${1}')
  function! bundle.hooks.on_source(bundle)
    ${2}
  endfunction

#}}}

# for syntax#{{{
snippet     keyword
abbr        syntax keyword
options     word
  syntax keyword ${1:group-name} ${2:option} ${3:key[word]} ${4:option}

snippet     match
abbr        syntax match
options     word
  syntax match ${1:group-name} ${2:option} ${3:excludenl} ${4:pattern} ${5:options}

snippet     region
abbr        syntax region
options     word
  syntax region ${1:group-name} ${2:option}
    ${3:matchgroup={group-name}}
    ${4:keepend}
    ${5:extend}
    ${6:excludenl }
    start=${7:start_pattern}
    ${8:skip=${9:skip_pattern\} }
    end=${10:end_pattern}
    ${11:options}

snippet     contains
abbr        contains=groupname
options     word
  contains=${1:groupname}

snippet     containedin
abbr        containedin=groupname
options     word
  containedin=${1:groupname}

snippet     nextgroup
abbr        nextgroup=groupname
options     word
  nextgroup=${1:nextgroup}

snippet     matchgroup
abbr        matchgroup=groupname
options     word
  matchgroup=${1:groupname}

snippet     contained
abbr        contained
options     word
  contained
#}}}

snippet     get
abbr        let ${1:g}:${2:variable_name} = get($1:, '$2', ${3:default_value})
options     word
  let ${1:g}:${2:variable_name} = get($1:, '$2', ${3:default_value})

snippet auto_name
abbr    auto_name
options word
  `join(split(substitute(expand("%:p"), '.*/autoload/\(.*\).vim$', '\1', 'g'), '/'), '#') . '#'`${1}

snippet neobundle_get
abbr    neobundle_get
options word
  let bundle = NeoBundleGet('${1}')
  function! bundle.hooks.on_source(bundle)
    ${2}
  endfunction
  unlet bundle

snippet ft_detect
abbr    augroup MyFt... augroup END
options word
  augroup MyFt`expand('%:r')`
    autocmd!${1}
  augroup END

snippet let_default
abbr    let g:... = get(g:, ..., '')
options word
  let ${1:g:}${2:name} = get($1, '$2', ${3:#:''})

snippet eval_variable
abbr    eval_variable
options word
  function! s:get_script_variables() "{{{
    return s:
  endfunction"}}}

snippet function
alias   func
abbr    function! ...() { }
options word
  function! ${1:`join(split(substitute(expand("%:p"), '.*/autoload/\(.*\).vim$', '\1', 'g'), '/'), '#') . '#'`}${2}(${3})
    ${4}
  endfunction

snippet complete_function
abbr    function ...
options word
  function! auto_name${1}#complete(arg_lead, cmd_line, cursor_pos)
    ${2}
  endfunction
