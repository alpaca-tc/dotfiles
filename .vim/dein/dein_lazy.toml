[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd    = ["Unite", "UniteBookmarkAdd", "UniteClose", "UniteResume", "UniteWithBufferDir", "UniteWithCurrentDir", "UniteWithCursorWord", "UniteWithInput", "UniteWithInputDirectory"]
on_func   = ["unite#util#path2project_directory", 'unite#util#get_vital']
hook_source = '''
  if executable('gmv')
    let rm_command = 'gmv -f --backup=numbered --target-directory ' . g:my.dir.trash . ' $srcs'
    let g:unite_kind_file_delete_file_command = rm_command
    let g:unite_kind_file_delete_directory_command = rm_command
  endif

  let g:unite_winheight = 20
  " let g:unite_marked_icon = "âœ“"
  " let g:unite_source_history_yank_enable = 0

  augroup MyUniteCmd
    autocmd!
    autocmd FileType unite call <SID>unite_my_settings()
  augroup END

  function! s:unite_my_settings() "{{{
    augroup MyUniteBufferCmd
      autocmd! * <buffer>
      autocmd BufEnter <buffer> if winnr('$') == 1 |quit| endif
    augroup END
    call alpaca_window#util#fold_buffer_automatically()

    " setl nolist
    if has('gui')
      setl cursorline
    endif
    highlight link uniteMarkedLine Identifier
    highlight link uniteCandidateInputKeyword Statement

    nmap     <silent><buffer>f <Plug>(unite_toggle_mark_current_candidate)
    xmap     <silent><buffer>f <Plug>(unite_toggle_mark_selected_candidates)
    nnoremap <silent><buffer><expr>,, unite#do_action('vimfiler')
    nnoremap <expr><buffer>re unite#do_action('replace')

    for source in unite#get_current_unite().sources
      let source_name = substitute(source.name, '[-/]', '_', 'g')
      if !empty(source_name) && has_key(s:unite_hooks, source_name)
        call s:unite_hooks[source_name]()
      endif
    endfor
  endfunction"}}}

  " ----------------------------------------
  " Hooks
  let s:unite_hooks = {}
  function! s:unite_hooks.file() "{{{
    syntax match uniteFileDirectory '.*\/'
    highlight link uniteFileDirectory Directory
  endfunction"}}}

  " grep {{{
  let g:unite_source_grep_max_candidates = 10000
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup'
    let g:unite_source_grep_recursive_opt = ''
  elseif executable('rg')
    let g:unite_source_grep_command =  'rg'
    let g:unite_source_grep_default_opts = '-n --no-heading --color never'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_max_candidates = 200
  else
    let g:unite_source_grep_command =  'grep'
    let g:unite_source_grep_recursive_opt = '-R'
  endif

  function! s:unite_hooks.grep() "{{{
    nnoremap <expr><buffer>re unite#do_action('replace')
  endfunction"}}}
  "}}}
'''

# [[plugins]]
# repo = 'posva/vim-vue'
# on_ft = "vue"
# hook_source = '''
#   " autocmd FileType vue syntax sync fromstart
# '''
#
# [[plugins]]
# repo = 'leafgarland/typescript-vim'
# on_ft = ["typescript"]
#
# [[plugins]]
# repo = 'yuezk/vim-js'
# on_ft = ["javascript", "typescript", "javascript.jsx", "typescript.tsx"]
#
# [[plugins]]
# repo = 'MaxMEllon/vim-jsx-pretty'
# on_ft = ["javascript", "typescript", "javascript.jsx", "typescript.tsx"]
# depends = ["vim-js", "yats.vim"]
# hook_source = '''
#   let g:vim_jsx_pretty_highlight_close_tag = 1
# '''
#
# [[plugins]]
# repo = 'HerringtonDarkholme/yats.vim'
# on_ft = ["javascript", "typescript", "javascript.jsx", "typescript.tsx"]
#
# [[plugins]]
# repo = 'peitalin/vim-jsx-typescript'
# on_ft = ["typescript"]
#
# [[plugins]]
# repo = 'othree/yajs.vim'
# on_ft     = ["javascript"]
#
# [[plugins]]
# repo = 'othree/javascript-libraries-syntax.vim'
# on_ft     = ["javascript"]
#
# [[plugins]]
# repo = 'digitaltoad/vim-jade'
# on_ft     = ["jade"]
#
# [[plugins]]
# repo = 'wavded/vim-stylus'
# on_ft     = ["stylus"]
#
# [[plugins]]
# repo = 'moll/vim-node'
# on_ft     = ["javascript"]
#
# [[plugins]]
# repo = 'alpaca-tc/vim-markdown'
# on_ft     = ["markdown"]
#
# [[plugins]]
# repo = 'mrkn/vim-cruby'
# on_ft = ["c"]
#
# [[plugins]]
# repo = 'vim-ruby/vim-ruby'
# on_ft     = ["ruby", "erb", "ruby.rspec"]
# hook_source = '''
#   let g:ruby_indent_block_style = 'do'
#   let g:ruby_foldable_groups = 'NONE'
# '''


